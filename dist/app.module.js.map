{"version":3,"sources":["../src/app.module.ts"],"sourcesContent":["import { Module } from '@nestjs/common';\nimport { ConditionalModule, ConfigModule, ConfigService } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport configuration from 'src/modules/config/config.module';\nimport { ConfigurationType } from 'src/modules/config/config.module';\nimport { BloggersPlatformModule } from './modules/bloggers-platform/bloggers-platform.module';\nimport { APP_FILTER } from '@nestjs/core';\nimport { AllExceptionFilter } from './core/exceptions/filters/all-exceptions.filter';\nimport { DomainHttpExceptionFilter } from './core/exceptions/filters/domain-exception.filter';\nimport { UserAccountsModule } from './modules/user-accounts/user-accounts.module';\nimport { TestingApiModule } from './testing/testingAPI.module';\nimport { NotificationsModule } from './modules/notifications/notifications.module';\nimport { CqrsModule } from '@nestjs/cqrs';\nimport { ThrottlerModule } from '@nestjs/throttler';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [configuration],\n      isGlobal: true,\n    }),\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService<ConfigurationType>) => ({\n        uri: configService.get('dbURL'),\n        dbName: configService.get('dbName'),\n      }),\n      inject: [ConfigService],\n    }),\n    ThrottlerModule.forRootAsync({\n      useFactory: (configService: ConfigService<ConfigurationType>) => ({\n        throttlers: [\n          {\n            ttl: configService.get<number>('requestsTtl')!,\n            limit: configService.get<number>('requestsLimit')!,\n          },\n        ],\n      }),\n      inject: [ConfigService],\n    }),\n    CqrsModule.forRoot({}),\n    BloggersPlatformModule,\n    UserAccountsModule,\n    NotificationsModule,\n    ConditionalModule.registerWhen(\n      TestingApiModule,\n      (env: NodeJS.ProcessEnv) => env.NODE_ENV !== 'production',\n    ),\n  ],\n  controllers: [],\n  providers: [\n    {\n      provide: APP_FILTER,\n      useClass: AllExceptionFilter,\n    },\n    {\n      provide: APP_FILTER,\n      useClass: DomainHttpExceptionFilter,\n    },\n  ],\n})\nexport class AppModule {}\n"],"names":["AppModule","imports","ConfigModule","forRoot","load","configuration","isGlobal","MongooseModule","forRootAsync","useFactory","configService","uri","get","dbName","inject","ConfigService","ThrottlerModule","throttlers","ttl","limit","CqrsModule","BloggersPlatformModule","UserAccountsModule","NotificationsModule","ConditionalModule","registerWhen","TestingApiModule","env","NODE_ENV","controllers","providers","provide","APP_FILTER","useClass","AllExceptionFilter","DomainHttpExceptionFilter"],"mappings":";;;;+BA6DaA;;;eAAAA;;;wBA7DU;wBACwC;0BAChC;qEACL;wCAEa;sBACZ;qCACQ;uCACO;oCACP;kCACF;qCACG;sBACT;2BACK;;;;;;;;;;;;AAgDzB,IAAA,AAAMA,YAAN,MAAMA;AAAW;;;QA7CtBC,SAAS;YACPC,oBAAY,CAACC,OAAO,CAAC;gBACnBC,MAAM;oBAACC,qBAAa;iBAAC;gBACrBC,UAAU;YACZ;YACAC,wBAAc,CAACC,YAAY,CAAC;gBAC1BP,SAAS;oBAACC,oBAAY;iBAAC;gBACvBO,YAAY,CAACC,gBAAqD,CAAA;wBAChEC,KAAKD,cAAcE,GAAG,CAAC;wBACvBC,QAAQH,cAAcE,GAAG,CAAC;oBAC5B,CAAA;gBACAE,QAAQ;oBAACC,qBAAa;iBAAC;YACzB;YACAC,0BAAe,CAACR,YAAY,CAAC;gBAC3BC,YAAY,CAACC,gBAAqD,CAAA;wBAChEO,YAAY;4BACV;gCACEC,KAAKR,cAAcE,GAAG,CAAS;gCAC/BO,OAAOT,cAAcE,GAAG,CAAS;4BACnC;yBACD;oBACH,CAAA;gBACAE,QAAQ;oBAACC,qBAAa;iBAAC;YACzB;YACAK,gBAAU,CAACjB,OAAO,CAAC,CAAC;YACpBkB,8CAAsB;YACtBC,sCAAkB;YAClBC,wCAAmB;YACnBC,yBAAiB,CAACC,YAAY,CAC5BC,kCAAgB,EAChB,CAACC,MAA2BA,IAAIC,QAAQ,KAAK;SAEhD;QACDC,aAAa,EAAE;QACfC,WAAW;YACT;gBACEC,SAASC,gBAAU;gBACnBC,UAAUC,uCAAkB;YAC9B;YACA;gBACEH,SAASC,gBAAU;gBACnBC,UAAUE,gDAAyB;YACrC;SACD"}