{"version":3,"sources":["../src/app.module.ts"],"sourcesContent":["import { configModule } from './config-dynamic-module';\nimport { DynamicModule, Module } from '@nestjs/common';\nimport { ConditionalModule, ConfigModule } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { BloggersPlatformModule } from './modules/bloggers-platform/bloggers-platform.module';\nimport { APP_FILTER } from '@nestjs/core';\nimport { AllExceptionFilter } from './core/exceptions/filters/all-exceptions.filter';\nimport { DomainHttpExceptionFilter } from './core/exceptions/filters/domain-exception.filter';\nimport { UserAccountsModule } from './modules/user-accounts/user-accounts.module';\nimport { TestingApiModule } from './testing/testingAPI.module';\nimport { NotificationsModule } from './modules/notifications/notifications.module';\nimport { CqrsModule } from '@nestjs/cqrs';\nimport { ThrottlerModule } from '@nestjs/throttler';\nimport { ThrottlerExceptionFilter } from './core/exceptions/filters/throttler-exceptions.filter';\nimport { ApiRequestsStorage } from './modules/user-accounts/infrastructure/apiRequests.repository';\nimport { CoreConfig } from './core/core.config';\nimport { CoreModule } from './core/core.module';\n\n@Module({\n  imports: [\n    configModule,\n    CoreModule,\n    MongooseModule.forRootAsync({\n      useFactory: (configService: CoreConfig) => ({\n        uri: configService.mongoURI,\n        dbName: configService.dbName,\n      }),\n      inject: [CoreConfig],\n    }),\n    ThrottlerModule.forRootAsync({\n      imports: [UserAccountsModule],\n      useFactory: (configService: CoreConfig, storage: ApiRequestsStorage) => ({\n        throttlers: [\n          {\n            ttl: configService.requestsTTL,\n            limit: configService.requestsLimit,\n          },\n        ],\n        storage,\n      }),\n      inject: [CoreConfig, ApiRequestsStorage],\n    }),\n    BloggersPlatformModule,\n    UserAccountsModule,\n    NotificationsModule,\n  ],\n  controllers: [],\n  providers: [\n    {\n      provide: APP_FILTER,\n      useClass: AllExceptionFilter,\n    },\n    {\n      provide: APP_FILTER,\n      useClass: ThrottlerExceptionFilter,\n    },\n    {\n      provide: APP_FILTER,\n      useClass: DomainHttpExceptionFilter,\n    },\n  ],\n})\nexport class AppModule {\n  static async forRoot(coreConfig: CoreConfig): Promise<DynamicModule> {\n    return {\n      module: AppModule,\n      imports: [...(coreConfig.includeTestingModule ? [TestingApiModule] : [])],\n    };\n  }\n}\n"],"names":["AppModule","forRoot","coreConfig","module","imports","includeTestingModule","TestingApiModule","configModule","CoreModule","MongooseModule","forRootAsync","useFactory","configService","uri","mongoURI","dbName","inject","CoreConfig","ThrottlerModule","UserAccountsModule","storage","throttlers","ttl","requestsTTL","limit","requestsLimit","ApiRequestsStorage","BloggersPlatformModule","NotificationsModule","controllers","providers","provide","APP_FILTER","useClass","AllExceptionFilter","ThrottlerExceptionFilter","DomainHttpExceptionFilter"],"mappings":";;;;+BA8DaA;;;eAAAA;;;qCA9DgB;wBACS;0BAEP;wCACQ;sBACZ;qCACQ;uCACO;oCACP;kCACF;qCACG;2BAEJ;2CACS;uCACN;4BACR;4BACA;;;;;;;AA8CpB,IAAA,AAAMA,YAAN,MAAMA;IACX,aAAaC,QAAQC,UAAsB,EAA0B;QACnE,OAAO;YACLC,QAAQH;YACRI,SAAS;mBAAKF,WAAWG,oBAAoB,GAAG;oBAACC,kCAAgB;iBAAC,GAAG,EAAE;aAAE;QAC3E;IACF;AACF;;;QAlDEF,SAAS;YACPG,iCAAY;YACZC,sBAAU;YACVC,wBAAc,CAACC,YAAY,CAAC;gBAC1BC,YAAY,CAACC,gBAA+B,CAAA;wBAC1CC,KAAKD,cAAcE,QAAQ;wBAC3BC,QAAQH,cAAcG,MAAM;oBAC9B,CAAA;gBACAC,QAAQ;oBAACC,sBAAU;iBAAC;YACtB;YACAC,0BAAe,CAACR,YAAY,CAAC;gBAC3BN,SAAS;oBAACe,sCAAkB;iBAAC;gBAC7BR,YAAY,CAACC,eAA2BQ,UAAiC,CAAA;wBACvEC,YAAY;4BACV;gCACEC,KAAKV,cAAcW,WAAW;gCAC9BC,OAAOZ,cAAca,aAAa;4BACpC;yBACD;wBACDL;oBACF,CAAA;gBACAJ,QAAQ;oBAACC,sBAAU;oBAAES,yCAAkB;iBAAC;YAC1C;YACAC,8CAAsB;YACtBR,sCAAkB;YAClBS,wCAAmB;SACpB;QACDC,aAAa,EAAE;QACfC,WAAW;YACT;gBACEC,SAASC,gBAAU;gBACnBC,UAAUC,uCAAkB;YAC9B;YACA;gBACEH,SAASC,gBAAU;gBACnBC,UAAUE,mDAAwB;YACpC;YACA;gBACEJ,SAASC,gBAAU;gBACnBC,UAAUG,gDAAyB;YACrC;SACD"}