{"version":3,"sources":["../../src/core/core.config.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { IsBoolean, IsEnum, IsNumber, IsString } from 'class-validator';\nimport { configValidationUtility } from 'src/setup/config-validation.utility';\n\nexport enum Environments {\n  DEVELOPMENT = 'development',\n  STAGING = 'staging',\n  PRODUCTION = 'production',\n  TESTING = 'testing',\n}\n\n@Injectable()\nexport class CoreConfig {\n  @IsNumber(\n    {},\n    {\n      message: 'Set env variable PORT',\n    },\n  )\n  port: number = Number(this.configService.get('PORT'));\n\n  @IsEnum(Environments, {\n    message:\n      'Set correct NODE_ENV value, available values: ' +\n      configValidationUtility.getEnumValues(Environments).join(', '),\n  })\n  nodeEnv: string = this.configService.get('NODE_ENV');\n\n  @IsString({\n    message: 'Set Env variable DB_URL to a valid mongodb connection string',\n  })\n  mongoURI: string = this.configService.get('DB_URL');\n\n  @IsString({\n    message: 'Set Env variable DB_URL to a valid mongodb connection string',\n  })\n  dbName: string = this.configService.get('DB_NAME');\n\n  @IsBoolean({\n    message:\n      'Set env variable IS_SWAGGER_ENABLED to enable/disable swagger, example: true/false',\n  })\n  isSwaggerEnabled = configValidationUtility.convertToBoolean(\n    this.configService.get('IS_SWAGGER_ENABLED'),\n  ) as boolean;\n\n  @IsBoolean({\n    message:\n      'Set env variable VERBOSE_ERRORS to enable/disable detailed error messages returned to frontend',\n  })\n  verboseErrors = configValidationUtility.convertToBoolean(\n    this.configService.get('VERBOSE_ERRORS'),\n  ) as boolean;\n\n  @IsNumber(\n    {},\n    {\n      message:\n        'Set env variable THROTTLER_REQUESTS_TTL_IN_MS to limit number of allowed requests in a given timeframe',\n    },\n  )\n  requestsTTL: number = Number(\n    this.configService.get('THROTTLER_REQUESTS_TTL_IN_MS'),\n  );\n\n  @IsNumber(\n    {},\n    {\n      message:\n        'Set env variable THROTTLER_REQUESTS_LIMIT to limit number of allowed requests in a given timeframe',\n    },\n  )\n  requestsLimit: number = Number(\n    this.configService.get('THROTTLER_REQUESTS_LIMIT'),\n  );\n\n  @IsBoolean({\n    message:\n      'Set env variable INCLUDE_TESTING_MODULE to enable/disable testing module in the app',\n  })\n  includeTestingModule = configValidationUtility.convertToBoolean(\n    this.configService.get('INCLUDE_TESTING_MODULE'),\n  ) as boolean;\n\n  constructor(private configService: ConfigService<any, true>) {\n    configValidationUtility.validateConfig(this);\n  }\n}\n"],"names":["CoreConfig","Environments","constructor","configService","port","Number","get","nodeEnv","mongoURI","dbName","isSwaggerEnabled","configValidationUtility","convertToBoolean","verboseErrors","requestsTTL","requestsLimit","includeTestingModule","validateConfig","message","getEnumValues","join"],"mappings":";;;;;;;;;;;QAaaA;eAAAA;;QARDC;eAAAA;;;wBALe;wBACG;gCACwB;yCACd;;;;;;;;;;AAEjC,IAAA,AAAKA,sCAAAA;;;;;WAAAA;;AAQL,IAAA,AAAMD,aAAN,MAAMA;IAwEXE,YAAY,AAAQC,aAAuC,CAAE;aAAzCA,gBAAAA;aAjEpBC,OAAeC,OAAO,IAAI,CAACF,aAAa,CAACG,GAAG,CAAC;aAO7CC,UAAkB,IAAI,CAACJ,aAAa,CAACG,GAAG,CAAC;aAKzCE,WAAmB,IAAI,CAACL,aAAa,CAACG,GAAG,CAAC;aAK1CG,SAAiB,IAAI,CAACN,aAAa,CAACG,GAAG,CAAC;aAMxCI,mBAAmBC,gDAAuB,CAACC,gBAAgB,CACzD,IAAI,CAACT,aAAa,CAACG,GAAG,CAAC;aAOzBO,gBAAgBF,gDAAuB,CAACC,gBAAgB,CACtD,IAAI,CAACT,aAAa,CAACG,GAAG,CAAC;aAUzBQ,cAAsBT,OACpB,IAAI,CAACF,aAAa,CAACG,GAAG,CAAC;aAUzBS,gBAAwBV,OACtB,IAAI,CAACF,aAAa,CAACG,GAAG,CAAC;aAOzBU,uBAAuBL,gDAAuB,CAACC,gBAAgB,CAC7D,IAAI,CAACT,aAAa,CAACG,GAAG,CAAC;QAIvBK,gDAAuB,CAACM,cAAc,CAAC,IAAI;IAC7C;AACF;;;QAvEMC,SAAS;;;;;;QAMXA,SACE,mDACAP,gDAAuB,CAACQ,aAAa,CAAClB,cAAcmB,IAAI,CAAC;;;;;;QAK3DF,SAAS;;;;;;QAKTA,SAAS;;;;;;QAKTA,SACE;;;;;QAOFA,SACE;;;;;QASAA,SACE;;;;;;QAUFA,SACE;;;;;;QAQJA,SACE"}