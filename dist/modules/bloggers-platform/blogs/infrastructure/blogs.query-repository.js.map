{"version":3,"sources":["../../../../../src/modules/bloggers-platform/blogs/infrastructure/blogs.query-repository.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { Blog, BlogDocument, BlogModelType } from '../domain/blog.entity';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { GetBlogsQueryParams } from '../api/input-dto/get-blogs-query-params.input-dto';\nimport { PaginatedViewDto } from 'src/core/dto/base.paginated.view-dto';\nimport { BlogViewDto } from '../api/view-dto/blogs.view-dto';\nimport { FilterQuery } from 'mongoose';\nimport { DomainException } from 'src/core/exceptions/domain-exceptions';\nimport { DomainExceptionCode } from 'src/core/exceptions/domain-exception-codes';\nimport { Post, PostModelType } from '../../posts/domain/post.entity';\nimport { GetBlogPostsDto } from '../api/view-dto/get-blog-posts-dto';\nimport { PostViewDto } from '../../posts/api/view-dto/posts.view-dto';\nimport {\n  PostLike,\n  PostLikeModelType,\n} from '../../posts/domain/postLike.entity';\n\n@Injectable()\nexport class BlogsQueryRepository {\n  constructor(\n    @InjectModel(Blog.name) private readonly BlogModel: BlogModelType,\n    @InjectModel(Post.name) private readonly PostModel: PostModelType,\n    @InjectModel(PostLike.name)\n    private readonly PostLikeModel: PostLikeModelType,\n  ) {}\n\n  getFilter(\n    dto: GetBlogsQueryParams | GetBlogPostsDto,\n  ): FilterQuery<BlogDocument> {\n    let byId = {};\n    let search = {};\n    if ('blogId' in dto) {\n      byId = { blogId: dto.blogId };\n    }\n    if ('searchNameTerm' in dto && dto.searchNameTerm !== null) {\n      search = { name: { $regex: dto.searchNameTerm, $options: 'i' } };\n    }\n    return { ...byId, ...search, deletedAt: null };\n  }\n\n  async getAllBlogs(\n    dto: GetBlogsQueryParams,\n  ): Promise<PaginatedViewDto<BlogViewDto[]>> {\n    const filter = this.getFilter(dto);\n    const blogs = await this.BlogModel.find(filter)\n      .sort({ [dto.sortBy]: dto.sortDirection })\n      .skip(dto.calculateSkip())\n      .limit(dto.pageSize)\n      .exec();\n    const total = await this.BlogModel.countDocuments(filter).exec();\n    const blogViews: BlogViewDto[] = blogs.map((blog) => {\n      return BlogViewDto.mapToView(blog);\n    });\n\n    return PaginatedViewDto.mapToView({\n      items: blogViews,\n      page: dto.pageNumber,\n      size: dto.pageSize,\n      totalCount: total,\n    });\n  }\n\n  async getBlogPosts(\n    dto: GetBlogPostsDto,\n  ): Promise<PaginatedViewDto<PostViewDto[]>> {\n    await this.findBlogOrNotFoundFail(dto.blogId);\n    const filter = this.getFilter(dto);\n    const posts = await this.PostModel.find(filter)\n      .sort({ [dto.sortBy]: dto.sortDirection })\n      .skip(dto.calculateSkip())\n      .limit(dto.pageSize)\n      .exec();\n    const total = await this.PostModel.countDocuments(filter);\n    const postViews: PostViewDto[] = posts.map((post) => {\n      return PostViewDto.mapToView(post);\n    });\n    if (dto.userId) {\n      const postIds = posts.map((postDoc) => postDoc._id.toString());\n      const likes = await this.PostLikeModel.find({\n        userId: dto.userId,\n        postId: { $in: postIds },\n      });\n      const likesMap = new Map(likes.map((like) => [like.postId, like.status]));\n      postViews.forEach((post) => {\n        post.setLike(likesMap);\n      });\n    }\n    return PaginatedViewDto.mapToView({\n      items: postViews,\n      page: dto.pageNumber,\n      size: dto.pageSize,\n      totalCount: total,\n    });\n  }\n\n  async findBlogOrNotFoundFail(id: string): Promise<BlogViewDto> {\n    const blog = await this.BlogModel.findOne({\n      _id: id,\n      deletedAt: null,\n    }).orFail(\n      new DomainException({\n        code: DomainExceptionCode.NotFound,\n        message: 'Blog not found',\n      }),\n    );\n    return BlogViewDto.mapToView(blog);\n  }\n}\n"],"names":["BlogsQueryRepository","getFilter","dto","byId","search","blogId","searchNameTerm","name","$regex","$options","deletedAt","getAllBlogs","filter","blogs","BlogModel","find","sort","sortBy","sortDirection","skip","calculateSkip","limit","pageSize","exec","total","countDocuments","blogViews","map","blog","BlogViewDto","mapToView","PaginatedViewDto","items","page","pageNumber","size","totalCount","getBlogPosts","findBlogOrNotFoundFail","posts","PostModel","postViews","post","PostViewDto","userId","postIds","postDoc","_id","toString","likes","PostLikeModel","postId","$in","likesMap","Map","like","status","forEach","setLike","id","findOne","orFail","DomainException","code","DomainExceptionCode","NotFound","message","constructor"],"mappings":"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"}