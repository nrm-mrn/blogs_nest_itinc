{"version":3,"sources":["../../../../../src/modules/bloggers-platform/blogs/api/blogs.controller.ts"],"sourcesContent":["import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Post,\n  Put,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { BlogViewDto } from './view-dto/blogs.view-dto';\nimport { PaginatedViewDto } from 'src/core/dto/base.paginated.view-dto';\nimport {\n  CreateBlogInputDto,\n  UpdateBlogInputDto,\n} from './input-dto/blogs.input-dto';\nimport { GetBlogsQueryParams } from './input-dto/get-blogs-query-params.input-dto';\nimport { BlogsQueryRepository } from '../infrastructure/blogs.query-repository';\nimport { BlogService } from '../application/blog.service';\nimport { CreateBlogDto } from '../dto/create-blog.dto';\nimport { UpdateBlogDto } from '../dto/update-blog.dto';\nimport { ObjectIdValidationPipe } from 'src/core/pipes/object-id-validation-pipe.service';\nimport { CreateBlogPostInputDto } from './input-dto/create-blog-post.input-dto';\nimport { CreateBlogPostDto } from '../dto/create-blog-post.dto';\nimport { PostsQueryRepository } from '../../posts/infrastructure/posts.query-repository';\nimport { PostViewDto } from '../../posts/api/view-dto/posts.view-dto';\nimport { GetBlogPostsDto } from './view-dto/get-blog-posts-dto';\nimport { GetBlogPostsQueryParams } from './input-dto/get-blog-posts-query-params.input-dto';\nimport { BasicAuthGuard } from 'src/modules/user-accounts/guards/basic/basic-auth.guard';\nimport { JwtOptionalAuthGuard } from 'src/modules/user-accounts/guards/bearer/jwt-optional-guard';\nimport { ExtractUserFromRequestIfExists } from 'src/modules/user-accounts/guards/decorators/extract-user-if-exists-from-request.decorator';\nimport { UserContextDto } from 'src/modules/user-accounts/guards/dto/user-context.dto';\n\n@Controller('blogs')\nexport class BlogsController {\n  constructor(\n    private readonly blogsQueryRepository: BlogsQueryRepository,\n    private readonly postsQueryRepository: PostsQueryRepository,\n    private readonly blogsService: BlogService,\n  ) {}\n\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  async getBlogs(\n    @Query() query: GetBlogsQueryParams,\n  ): Promise<PaginatedViewDto<BlogViewDto[]>> {\n    return this.blogsQueryRepository.getAllBlogs(query);\n  }\n\n  @UseGuards(BasicAuthGuard)\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  async createBlog(@Body() body: CreateBlogInputDto): Promise<BlogViewDto> {\n    const dto: CreateBlogDto = {\n      name: body.name,\n      description: body.description,\n      websiteUrl: body.websiteUrl,\n    };\n    const { blogId } = await this.blogsService.createBlog(dto);\n    return this.blogsQueryRepository.findBlogOrNotFoundFail(blogId);\n  }\n\n  @UseGuards(BasicAuthGuard)\n  @Post(':blogId/posts')\n  @HttpCode(HttpStatus.CREATED)\n  async createPostForBlog(\n    @Param('blogId', ObjectIdValidationPipe) blogId: string,\n    @Body() body: CreateBlogPostInputDto,\n  ): Promise<PostViewDto> {\n    const dto: CreateBlogPostDto = {\n      blogId,\n      title: body.title,\n      content: body.content,\n      shortDescription: body.shortDescription,\n    };\n    const { postId } = await this.blogsService.createPostForBlog(dto);\n    return this.postsQueryRepository.findPostOrNotFoundFail(postId);\n  }\n\n  @Get(':id')\n  @HttpCode(HttpStatus.OK)\n  async getBlog(\n    @Param('id', ObjectIdValidationPipe) id: string,\n  ): Promise<BlogViewDto> {\n    return this.blogsQueryRepository.findBlogOrNotFoundFail(id);\n  }\n\n  @UseGuards(JwtOptionalAuthGuard)\n  @Get(':blogId/posts')\n  @HttpCode(HttpStatus.OK)\n  async getPostsForBlog(\n    @Param('blogId', ObjectIdValidationPipe) blogId: string,\n    @Query() query: GetBlogPostsQueryParams,\n    @ExtractUserFromRequestIfExists() user: UserContextDto | null,\n  ): Promise<PaginatedViewDto<PostViewDto[]>> {\n    const dto: GetBlogPostsDto = Object.assign(new GetBlogPostsDto(), query, {\n      blogId,\n      userId: user?.userId,\n    });\n    return this.blogsQueryRepository.getBlogPosts(dto);\n  }\n\n  @UseGuards(BasicAuthGuard)\n  @Put(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async updateBlog(\n    @Param('id', ObjectIdValidationPipe) id: string,\n    @Body() body: UpdateBlogInputDto,\n  ): Promise<void> {\n    const dto: UpdateBlogDto = {\n      name: body.name,\n      description: body.description,\n      websiteUrl: body.websiteUrl,\n    };\n    await this.blogsService.editBlog(id, dto);\n    return;\n  }\n\n  @UseGuards(BasicAuthGuard)\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async deleteBlog(\n    @Param('id', ObjectIdValidationPipe) id: string,\n  ): Promise<void> {\n    return this.blogsService.deleteBlog(id);\n  }\n}\n"],"names":["BlogsController","getBlogs","query","blogsQueryRepository","getAllBlogs","createBlog","body","dto","name","description","websiteUrl","blogId","blogsService","findBlogOrNotFoundFail","createPostForBlog","title","content","shortDescription","postId","postsQueryRepository","findPostOrNotFoundFail","getBlog","id","getPostsForBlog","user","Object","assign","GetBlogPostsDto","userId","getBlogPosts","updateBlog","editBlog","deleteBlog","constructor","OK","CREATED","NO_CONTENT"],"mappings":";;;;+BAqCaA;;;eAAAA;;;wBAzBN;+BAMA;6CAC6B;sCACC;6BACT;+CAGW;wCACA;sCAEF;iCAEL;iDACQ;gCACT;kCACM;yDACU;;;;;;;;;;;;;;;AAIxC,IAAA,AAAMA,kBAAN,MAAMA;IAOX,MAEMC,SACJ,AAASC,KAA0B,EACO;QAC1C,OAAO,IAAI,CAACC,oBAAoB,CAACC,WAAW,CAACF;IAC/C;IAEA,MAGMG,WAAW,AAAQC,IAAwB,EAAwB;QACvE,MAAMC,MAAqB;YACzBC,MAAMF,KAAKE,IAAI;YACfC,aAAaH,KAAKG,WAAW;YAC7BC,YAAYJ,KAAKI,UAAU;QAC7B;QACA,MAAM,EAAEC,MAAM,EAAE,GAAG,MAAM,IAAI,CAACC,YAAY,CAACP,UAAU,CAACE;QACtD,OAAO,IAAI,CAACJ,oBAAoB,CAACU,sBAAsB,CAACF;IAC1D;IAEA,MAGMG,kBACJ,AAAyCH,MAAc,EACvD,AAAQL,IAA4B,EACd;QACtB,MAAMC,MAAyB;YAC7BI;YACAI,OAAOT,KAAKS,KAAK;YACjBC,SAASV,KAAKU,OAAO;YACrBC,kBAAkBX,KAAKW,gBAAgB;QACzC;QACA,MAAM,EAAEC,MAAM,EAAE,GAAG,MAAM,IAAI,CAACN,YAAY,CAACE,iBAAiB,CAACP;QAC7D,OAAO,IAAI,CAACY,oBAAoB,CAACC,sBAAsB,CAACF;IAC1D;IAEA,MAEMG,QACJ,AAAqCC,EAAU,EACzB;QACtB,OAAO,IAAI,CAACnB,oBAAoB,CAACU,sBAAsB,CAACS;IAC1D;IAEA,MAGMC,gBACJ,AAAyCZ,MAAc,EACvD,AAAST,KAA8B,EACvC,AAAkCsB,IAA2B,EACnB;QAC1C,MAAMjB,MAAuBkB,OAAOC,MAAM,CAAC,IAAIC,gCAAe,IAAIzB,OAAO;YACvES;YACAiB,QAAQJ,MAAMI;QAChB;QACA,OAAO,IAAI,CAACzB,oBAAoB,CAAC0B,YAAY,CAACtB;IAChD;IAEA,MAGMuB,WACJ,AAAqCR,EAAU,EAC/C,AAAQhB,IAAwB,EACjB;QACf,MAAMC,MAAqB;YACzBC,MAAMF,KAAKE,IAAI;YACfC,aAAaH,KAAKG,WAAW;YAC7BC,YAAYJ,KAAKI,UAAU;QAC7B;QACA,MAAM,IAAI,CAACE,YAAY,CAACmB,QAAQ,CAACT,IAAIf;QACrC;IACF;IAEA,MAGMyB,WACJ,AAAqCV,EAAU,EAChC;QACf,OAAO,IAAI,CAACV,YAAY,CAACoB,UAAU,CAACV;IACtC;IA1FAW,YACE,AAAiB9B,oBAA0C,EAC3D,AAAiBgB,oBAA0C,EAC3D,AAAiBP,YAAyB,CAC1C;aAHiBT,uBAAAA;aACAgB,uBAAAA;aACAP,eAAAA;IAChB;AAuFL;;;6CApFuBsB;;;;;;;;;;;6CASAC;;;;;;;;;;;6CAaAA;;;;;;;;;;;;6CAgBAD;;;;;;;;;;;6CASAA;;;;;;;;;;;;;;;6CAeAE;;;;;;;;;;;;;6CAgBAA"}