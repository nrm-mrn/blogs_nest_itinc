{"version":3,"sources":["../../../../../src/modules/bloggers-platform/blogs/api/blogs.controller.ts"],"sourcesContent":["import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Post,\n  Put,\n  Query,\n} from '@nestjs/common';\nimport { BlogViewDto } from './view-dto/blogs.view-dto';\nimport { PaginatedViewDto } from 'src/core/dto/base.paginated.view-dto';\nimport {\n  CreateBlogInputDto,\n  UpdateBlogInputDto,\n} from './input-dto/blogs.input-dto';\nimport { GetBlogsQueryParams } from './input-dto/get-blogs-query-params.input-dto';\nimport { BlogsQueryRepository } from '../infrastructure/blogs.query-repository';\nimport { BlogService } from '../application/blog.service';\nimport { CreateBlogDto } from '../dto/create-blog.dto';\nimport { UpdateBlogDto } from '../dto/update-blog.dto';\nimport { ObjectIdValidationPipe } from 'src/core/pipes/object-id-validation-pipe.service';\n\n@Controller('blogs')\nexport class BlogsController {\n  constructor(\n    private readonly blogsQueryRepository: BlogsQueryRepository,\n    private readonly blogsService: BlogService,\n  ) {}\n\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  async getBlogs(\n    @Query() query: GetBlogsQueryParams,\n  ): Promise<PaginatedViewDto<BlogViewDto[]>> {\n    return this.blogsQueryRepository.getAllBlogs(query);\n  }\n\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  async createBlog(@Body() body: CreateBlogInputDto): Promise<BlogViewDto> {\n    const dto: CreateBlogDto = {\n      name: body.name,\n      description: body.description,\n      websiteUrl: body.websiteUrl,\n    };\n    const { blogId } = await this.blogsService.createBlog(dto);\n    return this.blogsQueryRepository.findBlogOrNotFoundFail(blogId);\n  }\n\n  @Get(':id')\n  @HttpCode(HttpStatus.OK)\n  async getBlog(\n    @Param('id', ObjectIdValidationPipe) id: string,\n  ): Promise<BlogViewDto> {\n    return this.blogsQueryRepository.findBlogOrNotFoundFail(id);\n  }\n\n  @Put(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async updateBlog(\n    @Param('id', ObjectIdValidationPipe) id: string,\n    @Body() body: UpdateBlogInputDto,\n  ): Promise<void> {\n    const dto: UpdateBlogDto = {\n      name: body.name,\n      description: body.description,\n      websiteUrl: body.websiteUrl,\n    };\n    await this.blogsService.editBlog(id, dto);\n    return;\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async deleteBlog(\n    @Param('id', ObjectIdValidationPipe) id: string,\n  ): Promise<void> {\n    return this.blogsService.deleteBlog(id);\n  }\n}\n"],"names":["BlogsController","getBlogs","query","blogsQueryRepository","getAllBlogs","createBlog","body","dto","name","description","websiteUrl","blogId","blogsService","findBlogOrNotFoundFail","getBlog","id","updateBlog","editBlog","deleteBlog","constructor","OK","CREATED","NO_CONTENT"],"mappings":";;;;+BA0BaA;;;eAAAA;;;wBAfN;+BAMA;6CAC6B;sCACC;6BACT;+CAGW;;;;;;;;;;;;;;;AAGhC,IAAA,AAAMA,kBAAN,MAAMA;IAMX,MAEMC,SACJ,AAASC,KAA0B,EACO;QAC1C,OAAO,IAAI,CAACC,oBAAoB,CAACC,WAAW,CAACF;IAC/C;IAEA,MAEMG,WAAW,AAAQC,IAAwB,EAAwB;QACvE,MAAMC,MAAqB;YACzBC,MAAMF,KAAKE,IAAI;YACfC,aAAaH,KAAKG,WAAW;YAC7BC,YAAYJ,KAAKI,UAAU;QAC7B;QACA,MAAM,EAAEC,MAAM,EAAE,GAAG,MAAM,IAAI,CAACC,YAAY,CAACP,UAAU,CAACE;QACtD,OAAO,IAAI,CAACJ,oBAAoB,CAACU,sBAAsB,CAACF;IAC1D;IAEA,MAEMG,QACJ,AAAqCC,EAAU,EACzB;QACtB,OAAO,IAAI,CAACZ,oBAAoB,CAACU,sBAAsB,CAACE;IAC1D;IAEA,MAEMC,WACJ,AAAqCD,EAAU,EAC/C,AAAQT,IAAwB,EACjB;QACf,MAAMC,MAAqB;YACzBC,MAAMF,KAAKE,IAAI;YACfC,aAAaH,KAAKG,WAAW;YAC7BC,YAAYJ,KAAKI,UAAU;QAC7B;QACA,MAAM,IAAI,CAACE,YAAY,CAACK,QAAQ,CAACF,IAAIR;QACrC;IACF;IAEA,MAEMW,WACJ,AAAqCH,EAAU,EAChC;QACf,OAAO,IAAI,CAACH,YAAY,CAACM,UAAU,CAACH;IACtC;IAtDAI,YACE,AAAiBhB,oBAA0C,EAC3D,AAAiBS,YAAyB,CAC1C;aAFiBT,uBAAAA;aACAS,eAAAA;IAChB;AAoDL;;;6CAjDuBQ;;;;;;;;;;6CAQAC;;;;;;;;;;6CAYAD;;;;;;;;;;6CAQAE;;;;;;;;;;;;6CAeAA"}