{"version":3,"sources":["../../../../../src/modules/bloggers-platform/blogs/application/blog.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { Blog, BlogModelType } from '../domain/blog.entity';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { BlogsRepository } from '../infrastructure/blogs.repository';\nimport { CreateBlogDto } from '../dto/create-blog.dto';\nimport { UpdateBlogDto } from '../dto/update-blog.dto';\nimport { PostsService } from '../../posts/application/posts.service';\nimport { UpdatePostsByBlog } from '../../posts/dto/update-posts-by-blog.dto';\nimport { CreateBlogPostDto } from '../dto/create-blog-post.dto';\n\n@Injectable()\nexport class BlogService {\n  constructor(\n    @InjectModel(Blog.name) private readonly BlogModel: BlogModelType,\n    private readonly blogRepository: BlogsRepository,\n    private readonly postsService: PostsService,\n  ) {}\n\n  async createBlog(dto: CreateBlogDto): Promise<{ blogId: string }> {\n    const newBlog = this.BlogModel.createBlog(dto);\n    const blogId = await this.blogRepository.save(newBlog);\n    return { blogId };\n  }\n\n  async createPostForBlog(dto: CreateBlogPostDto): Promise<{ postId: string }> {\n    return this.postsService.createPost(dto);\n  }\n\n  async editBlog(id: string, dto: UpdateBlogDto): Promise<void> {\n    const blog = await this.blogRepository.findOrNotFoundFail(id);\n    blog.name = dto.name;\n    blog.description = dto.description;\n    blog.websiteUrl = dto.websiteUrl;\n    await this.blogRepository.save(blog);\n    if (blog.name !== dto.name) {\n      const update: UpdatePostsByBlog = {\n        blogId: id,\n        blogName: dto.name,\n      };\n      await this.postsService.updatePostsByBlogId(update);\n    }\n    return;\n  }\n\n  async deleteBlog(id: string): Promise<void> {\n    const blog = await this.blogRepository.findOrNotFoundFail(id);\n    await this.blogRepository.deleteBlog(blog);\n    await this.postsService.deletePostsByBlogId(id);\n  }\n}\n"],"names":["BlogService","createBlog","dto","newBlog","BlogModel","blogId","blogRepository","save","createPostForBlog","postsService","createPost","editBlog","id","blog","findOrNotFoundFail","name","description","websiteUrl","update","blogName","updatePostsByBlogId","deleteBlog","deletePostsByBlogId","constructor"],"mappings":";;;;+BAWaA;;;eAAAA;;;wBAXc;4BACS;0BACR;iCACI;8BAGH;;;;;;;;;;;;;;;AAKtB,IAAA,AAAMA,cAAN,MAAMA;IAOX,MAAMC,WAAWC,GAAkB,EAA+B;QAChE,MAAMC,UAAU,IAAI,CAACC,SAAS,CAACH,UAAU,CAACC;QAC1C,MAAMG,SAAS,MAAM,IAAI,CAACC,cAAc,CAACC,IAAI,CAACJ;QAC9C,OAAO;YAAEE;QAAO;IAClB;IAEA,MAAMG,kBAAkBN,GAAsB,EAA+B;QAC3E,OAAO,IAAI,CAACO,YAAY,CAACC,UAAU,CAACR;IACtC;IAEA,MAAMS,SAASC,EAAU,EAAEV,GAAkB,EAAiB;QAC5D,MAAMW,OAAO,MAAM,IAAI,CAACP,cAAc,CAACQ,kBAAkB,CAACF;QAC1DC,KAAKE,IAAI,GAAGb,IAAIa,IAAI;QACpBF,KAAKG,WAAW,GAAGd,IAAIc,WAAW;QAClCH,KAAKI,UAAU,GAAGf,IAAIe,UAAU;QAChC,MAAM,IAAI,CAACX,cAAc,CAACC,IAAI,CAACM;QAC/B,IAAIA,KAAKE,IAAI,KAAKb,IAAIa,IAAI,EAAE;YAC1B,MAAMG,SAA4B;gBAChCb,QAAQO;gBACRO,UAAUjB,IAAIa,IAAI;YACpB;YACA,MAAM,IAAI,CAACN,YAAY,CAACW,mBAAmB,CAACF;QAC9C;QACA;IACF;IAEA,MAAMG,WAAWT,EAAU,EAAiB;QAC1C,MAAMC,OAAO,MAAM,IAAI,CAACP,cAAc,CAACQ,kBAAkB,CAACF;QAC1D,MAAM,IAAI,CAACN,cAAc,CAACe,UAAU,CAACR;QACrC,MAAM,IAAI,CAACJ,YAAY,CAACa,mBAAmB,CAACV;IAC9C;IApCAW,YACE,AAAyCnB,SAAwB,EACjE,AAAiBE,cAA+B,EAChD,AAAiBG,YAA0B,CAC3C;aAHyCL,YAAAA;aACxBE,iBAAAA;aACAG,eAAAA;IAChB;AAiCL;;;6DApCsBM"}