{"version":3,"sources":["../../../../../src/modules/bloggers-platform/posts/infrastructure/posts.query-repository.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Post, PostModelType } from '../domain/post.entity';\nimport { GetPostsQueryParams } from '../api/input-dto/get-posts-query-params.input-dto';\nimport { PaginatedViewDto } from 'src/core/dto/base.paginated.view-dto';\nimport { PostViewDto } from '../api/view-dto/posts.view-dto';\nimport { DomainException } from 'src/core/exceptions/domain-exceptions';\nimport { DomainExceptionCode } from 'src/core/exceptions/domain-exception-codes';\n\n@Injectable()\nexport class PostsQueryRepository {\n  constructor(\n    @InjectModel(Post.name) private readonly PostModel: PostModelType,\n  ) {}\n\n  async getAllPosts(\n    dto: GetPostsQueryParams,\n  ): Promise<PaginatedViewDto<PostViewDto[]>> {\n    const posts = await this.PostModel.find({})\n      .sort({ [dto.sortBy]: dto.sortDirection })\n      .skip(dto.calculateSkip())\n      .limit(dto.pageSize)\n      .exec();\n    const total = await this.PostModel.countDocuments().exec();\n    const postsView: PostViewDto[] = posts.map((post) => {\n      return PostViewDto.mapToView(post);\n    });\n\n    // if (dto.userId) {\n    //   const postIds = posts.map((postDoc) => postDoc._id);\n    //   const likes = await PostLikeModel.find({\n    //     \"userInfo.userId\": dto.userId,\n    //     postId: { $in: postIds },\n    //   });\n    //   const likesMap = new Map(\n    //     likes.map((like) => [like.postId.toString(), like.status]),\n    //   );\n\n    return PaginatedViewDto.mapToView({\n      items: postsView,\n      page: dto.pageNumber,\n      size: dto.pageSize,\n      totalCount: total,\n    });\n  }\n\n  async findPostOrNotFoundFail(postId: string): Promise<PostViewDto> {\n    const post = await this.PostModel.findOne({\n      _id: postId,\n      deletedAt: null,\n    }).orFail(\n      new DomainException({\n        code: DomainExceptionCode.NotFound,\n        message: 'Post not found',\n      }),\n    );\n    return PostViewDto.mapToView(post);\n  }\n}\n"],"names":["PostsQueryRepository","getAllPosts","dto","posts","PostModel","find","sort","sortBy","sortDirection","skip","calculateSkip","limit","pageSize","exec","total","countDocuments","postsView","map","post","PostViewDto","mapToView","PaginatedViewDto","items","page","pageNumber","size","totalCount","findPostOrNotFoundFail","postId","findOne","_id","deletedAt","orFail","DomainException","code","DomainExceptionCode","NotFound","message","constructor","name"],"mappings":";;;;+BAUaA;;;eAAAA;;;wBAVc;0BACC;4BACQ;sCAEH;8BACL;kCACI;sCACI;;;;;;;;;;;;;;;AAG7B,IAAA,AAAMA,uBAAN,MAAMA;IAKX,MAAMC,YACJC,GAAwB,EACkB;QAC1C,MAAMC,QAAQ,MAAM,IAAI,CAACC,SAAS,CAACC,IAAI,CAAC,CAAC,GACtCC,IAAI,CAAC;YAAE,CAACJ,IAAIK,MAAM,CAAC,EAAEL,IAAIM,aAAa;QAAC,GACvCC,IAAI,CAACP,IAAIQ,aAAa,IACtBC,KAAK,CAACT,IAAIU,QAAQ,EAClBC,IAAI;QACP,MAAMC,QAAQ,MAAM,IAAI,CAACV,SAAS,CAACW,cAAc,GAAGF,IAAI;QACxD,MAAMG,YAA2Bb,MAAMc,GAAG,CAAC,CAACC;YAC1C,OAAOC,yBAAW,CAACC,SAAS,CAACF;QAC/B;QAEA,oBAAoB;QACpB,yDAAyD;QACzD,6CAA6C;QAC7C,qCAAqC;QACrC,gCAAgC;QAChC,QAAQ;QACR,8BAA8B;QAC9B,kEAAkE;QAClE,OAAO;QAEP,OAAOG,sCAAgB,CAACD,SAAS,CAAC;YAChCE,OAAON;YACPO,MAAMrB,IAAIsB,UAAU;YACpBC,MAAMvB,IAAIU,QAAQ;YAClBc,YAAYZ;QACd;IACF;IAEA,MAAMa,uBAAuBC,MAAc,EAAwB;QACjE,MAAMV,OAAO,MAAM,IAAI,CAACd,SAAS,CAACyB,OAAO,CAAC;YACxCC,KAAKF;YACLG,WAAW;QACb,GAAGC,MAAM,CACP,IAAIC,iCAAe,CAAC;YAClBC,MAAMC,yCAAmB,CAACC,QAAQ;YAClCC,SAAS;QACX;QAEF,OAAOlB,yBAAW,CAACC,SAAS,CAACF;IAC/B;IA9CAoB,YACE,AAAyClC,SAAwB,CACjE;aADyCA,YAAAA;IACxC;AA6CL;;;6DA9CsBmC"}