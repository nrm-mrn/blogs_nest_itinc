{"version":3,"sources":["../../../../../src/modules/bloggers-platform/posts/infrastructure/posts.query-repository.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Post, PostModelType } from '../domain/post.entity';\nimport { GetPostsQueryParams } from '../api/input-dto/get-posts-query-params.input-dto';\nimport { PaginatedViewDto } from 'src/core/dto/base.paginated.view-dto';\nimport { PostViewDto } from '../api/view-dto/posts.view-dto';\nimport { DomainException } from 'src/core/exceptions/domain-exceptions';\nimport { DomainExceptionCode } from 'src/core/exceptions/domain-exception-codes';\nimport { PostLike, PostLikeModelType } from '../domain/postLike.entity';\n\n@Injectable()\nexport class PostsQueryRepository {\n  constructor(\n    @InjectModel(Post.name) private readonly PostModel: PostModelType,\n    @InjectModel(PostLike.name)\n    private readonly PostLikeModel: PostLikeModelType,\n  ) {}\n\n  async getAllPosts(\n    dto: GetPostsQueryParams,\n    userId?: string,\n  ): Promise<PaginatedViewDto<PostViewDto[]>> {\n    const posts = await this.PostModel.find({ deletedAt: null })\n      .sort({ [dto.sortBy]: dto.sortDirection })\n      .skip(dto.calculateSkip())\n      .limit(dto.pageSize)\n      .exec();\n    const total = await this.PostModel.countDocuments().exec();\n    const postsView: PostViewDto[] = posts.map((post) => {\n      return PostViewDto.mapToView(post);\n    });\n\n    if (userId) {\n      const postIds = posts.map((postDoc) => postDoc._id.toString());\n      const likes = await this.PostLikeModel.find({\n        userId,\n        postId: { $in: postIds },\n      });\n      const likesMap = new Map(likes.map((like) => [like.postId, like.status]));\n      postsView.forEach((post) => {\n        post.setLike(likesMap);\n      });\n    }\n\n    return PaginatedViewDto.mapToView({\n      items: postsView,\n      page: dto.pageNumber,\n      size: dto.pageSize,\n      totalCount: total,\n    });\n  }\n\n  async findPostOrNotFoundFail(\n    postId: string,\n    userId?: string,\n  ): Promise<PostViewDto> {\n    const post = await this.PostModel.findOne({\n      _id: postId,\n      deletedAt: null,\n    }).orFail(\n      new DomainException({\n        code: DomainExceptionCode.NotFound,\n        message: 'Post not found',\n      }),\n    );\n    const postView = PostViewDto.mapToView(post);\n    if (userId) {\n      const like = await this.PostLikeModel.findOne({\n        userId,\n        postId,\n      });\n      if (like) {\n        postView.setLike(like);\n      }\n    }\n    return postView;\n  }\n}\n"],"names":["PostsQueryRepository","getAllPosts","dto","userId","posts","PostModel","find","deletedAt","sort","sortBy","sortDirection","skip","calculateSkip","limit","pageSize","exec","total","countDocuments","postsView","map","post","PostViewDto","mapToView","postIds","postDoc","_id","toString","likes","PostLikeModel","postId","$in","likesMap","Map","like","status","forEach","setLike","PaginatedViewDto","items","page","pageNumber","size","totalCount","findPostOrNotFoundFail","findOne","orFail","DomainException","code","DomainExceptionCode","NotFound","message","postView","constructor","name"],"mappings":";;;;+BAWaA;;;eAAAA;;;wBAXc;0BACC;4BACQ;sCAEH;8BACL;kCACI;sCACI;gCACQ;;;;;;;;;;;;;;;AAGrC,IAAA,AAAMA,uBAAN,MAAMA;IAOX,MAAMC,YACJC,GAAwB,EACxBC,MAAe,EAC2B;QAC1C,MAAMC,QAAQ,MAAM,IAAI,CAACC,SAAS,CAACC,IAAI,CAAC;YAAEC,WAAW;QAAK,GACvDC,IAAI,CAAC;YAAE,CAACN,IAAIO,MAAM,CAAC,EAAEP,IAAIQ,aAAa;QAAC,GACvCC,IAAI,CAACT,IAAIU,aAAa,IACtBC,KAAK,CAACX,IAAIY,QAAQ,EAClBC,IAAI;QACP,MAAMC,QAAQ,MAAM,IAAI,CAACX,SAAS,CAACY,cAAc,GAAGF,IAAI;QACxD,MAAMG,YAA2Bd,MAAMe,GAAG,CAAC,CAACC;YAC1C,OAAOC,yBAAW,CAACC,SAAS,CAACF;QAC/B;QAEA,IAAIjB,QAAQ;YACV,MAAMoB,UAAUnB,MAAMe,GAAG,CAAC,CAACK,UAAYA,QAAQC,GAAG,CAACC,QAAQ;YAC3D,MAAMC,QAAQ,MAAM,IAAI,CAACC,aAAa,CAACtB,IAAI,CAAC;gBAC1CH;gBACA0B,QAAQ;oBAAEC,KAAKP;gBAAQ;YACzB;YACA,MAAMQ,WAAW,IAAIC,IAAIL,MAAMR,GAAG,CAAC,CAACc,OAAS;oBAACA,KAAKJ,MAAM;oBAAEI,KAAKC,MAAM;iBAAC;YACvEhB,UAAUiB,OAAO,CAAC,CAACf;gBACjBA,KAAKgB,OAAO,CAACL;YACf;QACF;QAEA,OAAOM,sCAAgB,CAACf,SAAS,CAAC;YAChCgB,OAAOpB;YACPqB,MAAMrC,IAAIsC,UAAU;YACpBC,MAAMvC,IAAIY,QAAQ;YAClB4B,YAAY1B;QACd;IACF;IAEA,MAAM2B,uBACJd,MAAc,EACd1B,MAAe,EACO;QACtB,MAAMiB,OAAO,MAAM,IAAI,CAACf,SAAS,CAACuC,OAAO,CAAC;YACxCnB,KAAKI;YACLtB,WAAW;QACb,GAAGsC,MAAM,CACP,IAAIC,iCAAe,CAAC;YAClBC,MAAMC,yCAAmB,CAACC,QAAQ;YAClCC,SAAS;QACX;QAEF,MAAMC,WAAW9B,yBAAW,CAACC,SAAS,CAACF;QACvC,IAAIjB,QAAQ;YACV,MAAM8B,OAAO,MAAM,IAAI,CAACL,aAAa,CAACgB,OAAO,CAAC;gBAC5CzC;gBACA0B;YACF;YACA,IAAII,MAAM;gBACRkB,SAASf,OAAO,CAACH;YACnB;QACF;QACA,OAAOkB;IACT;IAhEAC,YACE,AAAyC/C,SAAwB,EACjE,AACiBuB,aAAgC,CACjD;aAHyCvB,YAAAA;aAExBuB,gBAAAA;IAChB;AA6DL;;;6DAhEsByB;qEACIA"}