{"version":3,"sources":["../../../../../src/modules/bloggers-platform/posts/infrastructure/posts.repository.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Post, PostDocument, PostModelType } from '../domain/post.entity';\nimport { DomainExceptionCode } from 'src/core/exceptions/domain-exception-codes';\nimport { DomainException } from 'src/core/exceptions/domain-exceptions';\nimport { UpdatePostsByBlog } from '../dto/update-posts-by-blog.dto';\n\n@Injectable()\nexport class PostsRepository {\n  constructor(\n    @InjectModel(Post.name) private readonly PostModel: PostModelType,\n  ) {}\n\n  async save(post: PostDocument): Promise<string> {\n    await post.save();\n    return post._id.toString();\n  }\n\n  async findById(postId: string): Promise<PostDocument | null> {\n    const post = await this.PostModel.findOne({\n      _id: postId,\n      deletedAt: null,\n    });\n    return post;\n  }\n\n  async findOrNotFoundFail(postId: string): Promise<PostDocument> {\n    const post = await this.PostModel.findOne({\n      _id: postId,\n      deletedAt: null,\n    }).orFail(\n      new DomainException({\n        code: DomainExceptionCode.NotFound,\n        message: 'Post not found',\n      }),\n    );\n    return post;\n  }\n\n  async updatePostsByBlogId(dto: UpdatePostsByBlog): Promise<void> {\n    const res = await this.PostModel.updateMany(\n      { blogId: dto.blogId },\n      {\n        $set: {\n          blogName: dto.blogName,\n        },\n      },\n    );\n    if (res.acknowledged) {\n      return;\n    }\n    throw new DomainException({\n      code: DomainExceptionCode.InternalServerError,\n      message: 'Failed to update posts by blog',\n    });\n  }\n\n  async deletePostsByBlogId(blogId: string): Promise<void> {\n    const res = await this.PostModel.deleteMany({ blogId: blogId });\n    if (res.acknowledged) {\n      return;\n    }\n    throw new DomainException({\n      code: DomainExceptionCode.InternalServerError,\n      message: 'Failed to delete posts by blog',\n    });\n  }\n\n  async deletePost(post: PostDocument) {\n    post.markDeleted();\n    return this.save(post);\n  }\n}\n"],"names":["PostsRepository","save","post","_id","toString","findById","postId","PostModel","findOne","deletedAt","findOrNotFoundFail","orFail","DomainException","code","DomainExceptionCode","NotFound","message","updatePostsByBlogId","dto","res","updateMany","blogId","$set","blogName","acknowledged","InternalServerError","deletePostsByBlogId","deleteMany","deletePost","markDeleted","constructor","name"],"mappings":";;;;+BAQaA;;;eAAAA;;;wBARc;0BACC;4BACsB;sCACd;kCACJ;;;;;;;;;;;;;;;AAIzB,IAAA,AAAMA,kBAAN,MAAMA;IAKX,MAAMC,KAAKC,IAAkB,EAAmB;QAC9C,MAAMA,KAAKD,IAAI;QACf,OAAOC,KAAKC,GAAG,CAACC,QAAQ;IAC1B;IAEA,MAAMC,SAASC,MAAc,EAAgC;QAC3D,MAAMJ,OAAO,MAAM,IAAI,CAACK,SAAS,CAACC,OAAO,CAAC;YACxCL,KAAKG;YACLG,WAAW;QACb;QACA,OAAOP;IACT;IAEA,MAAMQ,mBAAmBJ,MAAc,EAAyB;QAC9D,MAAMJ,OAAO,MAAM,IAAI,CAACK,SAAS,CAACC,OAAO,CAAC;YACxCL,KAAKG;YACLG,WAAW;QACb,GAAGE,MAAM,CACP,IAAIC,iCAAe,CAAC;YAClBC,MAAMC,yCAAmB,CAACC,QAAQ;YAClCC,SAAS;QACX;QAEF,OAAOd;IACT;IAEA,MAAMe,oBAAoBC,GAAsB,EAAiB;QAC/D,MAAMC,MAAM,MAAM,IAAI,CAACZ,SAAS,CAACa,UAAU,CACzC;YAAEC,QAAQH,IAAIG,MAAM;QAAC,GACrB;YACEC,MAAM;gBACJC,UAAUL,IAAIK,QAAQ;YACxB;QACF;QAEF,IAAIJ,IAAIK,YAAY,EAAE;YACpB;QACF;QACA,MAAM,IAAIZ,iCAAe,CAAC;YACxBC,MAAMC,yCAAmB,CAACW,mBAAmB;YAC7CT,SAAS;QACX;IACF;IAEA,MAAMU,oBAAoBL,MAAc,EAAiB;QACvD,MAAMF,MAAM,MAAM,IAAI,CAACZ,SAAS,CAACoB,UAAU,CAAC;YAAEN,QAAQA;QAAO;QAC7D,IAAIF,IAAIK,YAAY,EAAE;YACpB;QACF;QACA,MAAM,IAAIZ,iCAAe,CAAC;YACxBC,MAAMC,yCAAmB,CAACW,mBAAmB;YAC7CT,SAAS;QACX;IACF;IAEA,MAAMY,WAAW1B,IAAkB,EAAE;QACnCA,KAAK2B,WAAW;QAChB,OAAO,IAAI,CAAC5B,IAAI,CAACC;IACnB;IA9DA4B,YACE,AAAyCvB,SAAwB,CACjE;aADyCA,YAAAA;IACxC;AA6DL;;;6DA9DsBwB"}