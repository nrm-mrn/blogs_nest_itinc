{"version":3,"sources":["../../../../../src/modules/bloggers-platform/posts/infrastructure/posts.repository.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Post, PostDocument, PostModelType } from '../domain/post.entity';\nimport { DomainExceptionCode } from 'src/core/exceptions/domain-exception-codes';\nimport { DomainException } from 'src/core/exceptions/domain-exceptions';\nimport { UpdatePostsByBlog } from '../dto/update-posts-by-blog.dto';\nimport {\n  PostLike,\n  PostLikeDocument,\n  PostLikeModelType,\n} from '../domain/postLike.entity';\nimport { PostLikeStatus } from '../api/view-dto/posts.view-dto';\n\n@Injectable()\nexport class PostsRepository {\n  constructor(\n    @InjectModel(Post.name) private readonly PostModel: PostModelType,\n    @InjectModel(PostLike.name)\n    private readonly PostLikeModel: PostLikeModelType,\n  ) {}\n\n  async save(doc: PostDocument | PostLikeDocument): Promise<string> {\n    await doc.save();\n    return doc._id.toString();\n  }\n\n  async findById(postId: string): Promise<PostDocument | null> {\n    const post = await this.PostModel.findOne({\n      _id: postId,\n      deletedAt: null,\n    });\n    return post;\n  }\n\n  async findOrNotFoundFail(postId: string): Promise<PostDocument> {\n    const post = await this.PostModel.findOne({\n      _id: postId,\n      deletedAt: null,\n    }).orFail(\n      new DomainException({\n        code: DomainExceptionCode.NotFound,\n        message: 'Post not found',\n      }),\n    );\n    return post;\n  }\n\n  async updatePostsByBlogId(dto: UpdatePostsByBlog): Promise<void> {\n    const res = await this.PostModel.updateMany(\n      { blogId: dto.blogId },\n      {\n        $set: {\n          blogName: dto.blogName,\n        },\n      },\n    );\n    if (res.acknowledged) {\n      return;\n    }\n    throw new DomainException({\n      code: DomainExceptionCode.InternalServerError,\n      message: 'Failed to update posts by blog',\n    });\n  }\n\n  async deletePostsByBlogId(blogId: string): Promise<void> {\n    const ids = await this.PostModel.find({ blogId }).then((posts) => {\n      return posts.map((post) => post._id.toString());\n    });\n    this.PostModel.updateMany({ blogId: blogId }, { deletedAt: new Date() });\n    this.PostLikeModel.deleteMany({\n      postId: { $in: ids },\n    });\n  }\n\n  async deletePost(post: PostDocument) {\n    post.markDeleted();\n    await Promise.all([\n      this.PostLikeModel.deleteOne({ postId: post._id.toString() }),\n      this.save(post),\n    ]);\n  }\n\n  async findPostIdsByBlog(blogId: string): Promise<string[]> {\n    return this.PostModel.find({ blogId }).then((posts) =>\n      posts.map((post) => post._id.toString()),\n    );\n  }\n\n  async findPostLikeByUserId(\n    postId: string,\n    userId: string,\n  ): Promise<PostLikeDocument | null> {\n    return this.PostLikeModel.findOne({\n      postId,\n      userId,\n    });\n  }\n  async getRecentLikeDocsForPost(\n    postId: string,\n    status: PostLikeStatus,\n  ): Promise<PostLikeDocument[]> {\n    const recentLikesDocs = await this.PostLikeModel.find({\n      postId,\n      status,\n    })\n      .sort({ updatedAt: 'desc' })\n      .limit(3);\n    return recentLikesDocs;\n  }\n}\n"],"names":["PostsRepository","save","doc","_id","toString","findById","postId","post","PostModel","findOne","deletedAt","findOrNotFoundFail","orFail","DomainException","code","DomainExceptionCode","NotFound","message","updatePostsByBlogId","dto","res","updateMany","blogId","$set","blogName","acknowledged","InternalServerError","deletePostsByBlogId","ids","find","then","posts","map","Date","PostLikeModel","deleteMany","$in","deletePost","markDeleted","Promise","all","deleteOne","findPostIdsByBlog","findPostLikeByUserId","userId","getRecentLikeDocsForPost","status","recentLikesDocs","sort","updatedAt","limit","constructor","name"],"mappings":";;;;+BAcaA;;;eAAAA;;;wBAdc;0BACC;4BACsB;sCACd;kCACJ;gCAMzB;;;;;;;;;;;;;;;AAIA,IAAA,AAAMA,kBAAN,MAAMA;IAOX,MAAMC,KAAKC,GAAoC,EAAmB;QAChE,MAAMA,IAAID,IAAI;QACd,OAAOC,IAAIC,GAAG,CAACC,QAAQ;IACzB;IAEA,MAAMC,SAASC,MAAc,EAAgC;QAC3D,MAAMC,OAAO,MAAM,IAAI,CAACC,SAAS,CAACC,OAAO,CAAC;YACxCN,KAAKG;YACLI,WAAW;QACb;QACA,OAAOH;IACT;IAEA,MAAMI,mBAAmBL,MAAc,EAAyB;QAC9D,MAAMC,OAAO,MAAM,IAAI,CAACC,SAAS,CAACC,OAAO,CAAC;YACxCN,KAAKG;YACLI,WAAW;QACb,GAAGE,MAAM,CACP,IAAIC,iCAAe,CAAC;YAClBC,MAAMC,yCAAmB,CAACC,QAAQ;YAClCC,SAAS;QACX;QAEF,OAAOV;IACT;IAEA,MAAMW,oBAAoBC,GAAsB,EAAiB;QAC/D,MAAMC,MAAM,MAAM,IAAI,CAACZ,SAAS,CAACa,UAAU,CACzC;YAAEC,QAAQH,IAAIG,MAAM;QAAC,GACrB;YACEC,MAAM;gBACJC,UAAUL,IAAIK,QAAQ;YACxB;QACF;QAEF,IAAIJ,IAAIK,YAAY,EAAE;YACpB;QACF;QACA,MAAM,IAAIZ,iCAAe,CAAC;YACxBC,MAAMC,yCAAmB,CAACW,mBAAmB;YAC7CT,SAAS;QACX;IACF;IAEA,MAAMU,oBAAoBL,MAAc,EAAiB;QACvD,MAAMM,MAAM,MAAM,IAAI,CAACpB,SAAS,CAACqB,IAAI,CAAC;YAAEP;QAAO,GAAGQ,IAAI,CAAC,CAACC;YACtD,OAAOA,MAAMC,GAAG,CAAC,CAACzB,OAASA,KAAKJ,GAAG,CAACC,QAAQ;QAC9C;QACA,IAAI,CAACI,SAAS,CAACa,UAAU,CAAC;YAAEC,QAAQA;QAAO,GAAG;YAAEZ,WAAW,IAAIuB;QAAO;QACtE,IAAI,CAACC,aAAa,CAACC,UAAU,CAAC;YAC5B7B,QAAQ;gBAAE8B,KAAKR;YAAI;QACrB;IACF;IAEA,MAAMS,WAAW9B,IAAkB,EAAE;QACnCA,KAAK+B,WAAW;QAChB,MAAMC,QAAQC,GAAG,CAAC;YAChB,IAAI,CAACN,aAAa,CAACO,SAAS,CAAC;gBAAEnC,QAAQC,KAAKJ,GAAG,CAACC,QAAQ;YAAG;YAC3D,IAAI,CAACH,IAAI,CAACM;SACX;IACH;IAEA,MAAMmC,kBAAkBpB,MAAc,EAAqB;QACzD,OAAO,IAAI,CAACd,SAAS,CAACqB,IAAI,CAAC;YAAEP;QAAO,GAAGQ,IAAI,CAAC,CAACC,QAC3CA,MAAMC,GAAG,CAAC,CAACzB,OAASA,KAAKJ,GAAG,CAACC,QAAQ;IAEzC;IAEA,MAAMuC,qBACJrC,MAAc,EACdsC,MAAc,EACoB;QAClC,OAAO,IAAI,CAACV,aAAa,CAACzB,OAAO,CAAC;YAChCH;YACAsC;QACF;IACF;IACA,MAAMC,yBACJvC,MAAc,EACdwC,MAAsB,EACO;QAC7B,MAAMC,kBAAkB,MAAM,IAAI,CAACb,aAAa,CAACL,IAAI,CAAC;YACpDvB;YACAwC;QACF,GACGE,IAAI,CAAC;YAAEC,WAAW;QAAO,GACzBC,KAAK,CAAC;QACT,OAAOH;IACT;IA9FAI,YACE,AAAyC3C,SAAwB,EACjE,AACiB0B,aAAgC,CACjD;aAHyC1B,YAAAA;aAExB0B,gBAAAA;IAChB;AA2FL;;;6DA9FsBkB;qEACIA"}