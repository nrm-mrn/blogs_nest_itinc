{"version":3,"sources":["../../../../../src/modules/bloggers-platform/posts/application/posts.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { BlogDocument } from '../../blogs/domain/blog.entity';\nimport { Post, PostModelType } from '../domain/post.entity';\nimport { CreatePostDto } from '../dto/create-post.dto';\nimport { PostsRepository } from '../infrastructure/posts.repository';\nimport { BlogsRepository } from '../../blogs/infrastructure/blogs.repository';\nimport {\n  DomainException,\n  Extension,\n} from 'src/core/exceptions/domain-exceptions';\nimport { DomainExceptionCode } from 'src/core/exceptions/domain-exception-codes';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { UpdatePostDto } from '../dto/update-post.dto';\nimport { UpdatePostsByBlog } from '../dto/update-posts-by-blog.dto';\nimport { CreatePostDomainDto } from '../domain/dto/create-post-domain-dto';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    @InjectModel(Post.name) private readonly PostModel: PostModelType,\n    private readonly postsRepository: PostsRepository,\n    private readonly blogRepository: BlogsRepository,\n  ) {}\n  async getParentBlog(blogId: string): Promise<BlogDocument> {\n    const blog = await this.blogRepository.findById(blogId);\n    if (!blog) {\n      throw new DomainException({\n        code: DomainExceptionCode.BadRequest,\n        message: 'Wrong blogid',\n        extensions: [new Extension('wrong blogId', 'blogId')],\n      });\n    }\n    return blog;\n  }\n\n  async createPost(input: CreatePostDto): Promise<{ postId: string }> {\n    const blog = await this.getParentBlog(input.blogId);\n    const dto: CreatePostDomainDto = { ...input, blogName: blog.name };\n    const newPost = this.PostModel.createPost(dto);\n    const postId = await this.postsRepository.save(newPost);\n    return { postId };\n  }\n\n  async editPost(id: string, input: UpdatePostDto): Promise<void> {\n    const post = await this.postsRepository.findOrNotFoundFail(id);\n    post.updatePost(input);\n    await this.postsRepository.save(post);\n    return;\n  }\n\n  async updatePostsByBlogId(update: UpdatePostsByBlog): Promise<void> {\n    return this.postsRepository.updatePostsByBlogId(update);\n  }\n\n  async deletePostsByBlogId(id: string): Promise<void> {\n    return this.postsRepository.deletePostsByBlogId(id);\n  }\n\n  async deletePost(id: string): Promise<void> {\n    const post = await this.postsRepository.findOrNotFoundFail(id);\n    await this.postsRepository.deletePost(post);\n    // if (res) {\n    //   await Promise.all([\n    //     this.postsRepository.deleteLikesByPost(id),\n    //     this.commentsService.deleteCommentsByPost(id),\n    //   ]);\n    //   return;\n    // }\n    // throw new Error('Failed to delete a post');\n  }\n}\n"],"names":["PostsService","getParentBlog","blogId","blog","blogRepository","findById","DomainException","code","DomainExceptionCode","BadRequest","message","extensions","Extension","createPost","input","dto","blogName","name","newPost","PostModel","postId","postsRepository","save","editPost","id","post","findOrNotFoundFail","updatePost","updatePostsByBlogId","update","deletePostsByBlogId","deletePost","constructor"],"mappings":";;;;+BAiBaA;;;eAAAA;;;wBAjBc;4BAES;iCAEJ;iCACA;kCAIzB;sCAC6B;0BACR;;;;;;;;;;;;;;;AAMrB,IAAA,AAAMA,eAAN,MAAMA;IAMX,MAAMC,cAAcC,MAAc,EAAyB;QACzD,MAAMC,OAAO,MAAM,IAAI,CAACC,cAAc,CAACC,QAAQ,CAACH;QAChD,IAAI,CAACC,MAAM;YACT,MAAM,IAAIG,iCAAe,CAAC;gBACxBC,MAAMC,yCAAmB,CAACC,UAAU;gBACpCC,SAAS;gBACTC,YAAY;oBAAC,IAAIC,2BAAS,CAAC,gBAAgB;iBAAU;YACvD;QACF;QACA,OAAOT;IACT;IAEA,MAAMU,WAAWC,KAAoB,EAA+B;QAClE,MAAMX,OAAO,MAAM,IAAI,CAACF,aAAa,CAACa,MAAMZ,MAAM;QAClD,MAAMa,MAA2B;YAAE,GAAGD,KAAK;YAAEE,UAAUb,KAAKc,IAAI;QAAC;QACjE,MAAMC,UAAU,IAAI,CAACC,SAAS,CAACN,UAAU,CAACE;QAC1C,MAAMK,SAAS,MAAM,IAAI,CAACC,eAAe,CAACC,IAAI,CAACJ;QAC/C,OAAO;YAAEE;QAAO;IAClB;IAEA,MAAMG,SAASC,EAAU,EAAEV,KAAoB,EAAiB;QAC9D,MAAMW,OAAO,MAAM,IAAI,CAACJ,eAAe,CAACK,kBAAkB,CAACF;QAC3DC,KAAKE,UAAU,CAACb;QAChB,MAAM,IAAI,CAACO,eAAe,CAACC,IAAI,CAACG;QAChC;IACF;IAEA,MAAMG,oBAAoBC,MAAyB,EAAiB;QAClE,OAAO,IAAI,CAACR,eAAe,CAACO,mBAAmB,CAACC;IAClD;IAEA,MAAMC,oBAAoBN,EAAU,EAAiB;QACnD,OAAO,IAAI,CAACH,eAAe,CAACS,mBAAmB,CAACN;IAClD;IAEA,MAAMO,WAAWP,EAAU,EAAiB;QAC1C,MAAMC,OAAO,MAAM,IAAI,CAACJ,eAAe,CAACK,kBAAkB,CAACF;QAC3D,MAAM,IAAI,CAACH,eAAe,CAACU,UAAU,CAACN;IACtC,aAAa;IACb,wBAAwB;IACxB,kDAAkD;IAClD,qDAAqD;IACrD,QAAQ;IACR,YAAY;IACZ,IAAI;IACJ,8CAA8C;IAChD;IAnDAO,YACE,AAAyCb,SAAwB,EACjE,AAAiBE,eAAgC,EACjD,AAAiBjB,cAA+B,CAChD;aAHyCe,YAAAA;aACxBE,kBAAAA;aACAjB,iBAAAA;IAChB;AAgDL;;;6DAnDsBa"}