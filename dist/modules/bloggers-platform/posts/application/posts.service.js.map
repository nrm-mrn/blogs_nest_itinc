{"version":3,"sources":["../../../../../src/modules/bloggers-platform/posts/application/posts.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { BlogDocument } from '../../blogs/domain/blog.entity';\nimport { Post, PostDocument, PostModelType } from '../domain/post.entity';\nimport { CreatePostDto } from '../dto/create-post.dto';\nimport { PostsRepository } from '../infrastructure/posts.repository';\nimport { BlogsRepository } from '../../blogs/infrastructure/blogs.repository';\nimport {\n  DomainException,\n  Extension,\n} from 'src/core/exceptions/domain-exceptions';\nimport { DomainExceptionCode } from 'src/core/exceptions/domain-exception-codes';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { UpdatePostDto } from '../dto/update-post.dto';\nimport { UpdatePostsByBlog } from '../dto/update-posts-by-blog.dto';\nimport { CreatePostDomainDto } from '../domain/dto/create-post-domain-dto';\nimport { HandlePostLikeDto } from '../dto/handle-post-like.dto';\nimport { PostLikeStatus } from '../api/view-dto/posts.view-dto';\nimport {\n  PostLike,\n  PostLikeDocument,\n  PostLikeModelType,\n} from '../domain/postLike.entity';\nimport { UsersExternalService } from 'src/modules/user-accounts/application/users.external-service';\nimport { CreatePostLikeDomainDto } from '../domain/dto/create-post-like-domain-dto';\nimport { CommentsRepository } from '../../comments/infrastructure/comments.repository';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    @InjectModel(Post.name) private readonly PostModel: PostModelType,\n    @InjectModel(PostLike.name)\n    private readonly PostLikeModel: PostLikeModelType,\n    private readonly postsRepository: PostsRepository,\n    private readonly commentsRepository: CommentsRepository,\n    private readonly blogRepository: BlogsRepository,\n    private readonly usersService: UsersExternalService,\n  ) {}\n  async getParentBlog(blogId: string): Promise<BlogDocument> {\n    const blog = await this.blogRepository.findById(blogId);\n    if (!blog) {\n      throw new DomainException({\n        code: DomainExceptionCode.NotFound,\n        message: 'Wrong blogid',\n        extensions: [new Extension('wrong blogId', 'blogId')],\n      });\n    }\n    return blog;\n  }\n\n  async createPost(input: CreatePostDto): Promise<{ postId: string }> {\n    const blog = await this.getParentBlog(input.blogId);\n    const dto: CreatePostDomainDto = { ...input, blogName: blog.name };\n    const newPost = this.PostModel.createPost(dto);\n    const postId = await this.postsRepository.save(newPost);\n    return { postId };\n  }\n\n  async editPost(id: string, input: UpdatePostDto): Promise<void> {\n    const post = await this.postsRepository.findOrNotFoundFail(id);\n    post.updatePost(input);\n    await this.postsRepository.save(post);\n    return;\n  }\n\n  async updatePostsByBlogId(update: UpdatePostsByBlog): Promise<void> {\n    return this.postsRepository.updatePostsByBlogId(update);\n  }\n\n  async deletePostsByBlogId(id: string): Promise<void> {\n    const postIds = await this.postsRepository.findPostIdsByBlog(id);\n    await Promise.all([\n      this.postsRepository.deletePostsByBlogId(id),\n      this.commentsRepository.deleteCommentsForPosts(postIds),\n    ]);\n    return;\n  }\n\n  async deletePost(id: string): Promise<void> {\n    const post = await this.postsRepository.findOrNotFoundFail(id);\n    await Promise.all([\n      this.postsRepository.deletePost(post),\n      this.commentsRepository.deleteCommentsByPost(post._id.toString()),\n    ]);\n    return;\n  }\n\n  async handlePostLike(likeDto: HandlePostLikeDto): Promise<void> {\n    const post = await this.postsRepository.findOrNotFoundFail(likeDto.postId);\n    const postLike = await this.postsRepository.findPostLikeByUserId(\n      post._id.toString(),\n      likeDto.userId,\n    );\n    const user = await this.usersService.findUserById(likeDto.userId);\n    if (!user) {\n      throw new DomainException({\n        code: DomainExceptionCode.InternalServerError,\n        message: 'User not found by id for post like',\n      });\n    }\n    const dto: CreatePostLikeDomainDto = {\n      ...likeDto,\n      login: user.login,\n    };\n    if (!postLike) {\n      return this.createNewLikeDoc(dto, post);\n    }\n    return this.updateLikeStatus(dto, postLike, post);\n  }\n\n  private async createNewLikeDoc(\n    dto: CreatePostLikeDomainDto,\n    post: PostDocument,\n  ) {\n    if (dto.status === PostLikeStatus.NONE) {\n      return;\n    }\n    switch (dto.status) {\n      case PostLikeStatus.LIKE: {\n        post.addLike();\n        break;\n      }\n      case PostLikeStatus.DISLIKE: {\n        post.addDislike();\n        break;\n      }\n    }\n    const postLike = this.PostLikeModel.createLike(dto);\n    if (PostLikeStatus.LIKE) {\n      await this.postsRepository.save(postLike);\n      const recentLikes = await this.postsRepository.getRecentLikeDocsForPost(\n        dto.postId,\n        PostLikeStatus.LIKE,\n      );\n      post.updateNewestLikes(recentLikes);\n      await this.postsRepository.save(post);\n      return;\n    }\n    await Promise.all([\n      this.postsRepository.save(post),\n      this.postsRepository.save(postLike),\n    ]);\n    return;\n  }\n\n  private async updateLikeStatus(\n    dto: CreatePostLikeDomainDto,\n    like: PostLikeDocument,\n    post: PostDocument,\n  ) {\n    if (like.status === dto.status) {\n      return;\n    }\n    switch (dto.status) {\n      case PostLikeStatus.LIKE: {\n        post.addLike();\n        if (like.status === PostLikeStatus.DISLIKE) {\n          post.removeDislike();\n        }\n        break;\n      }\n      case PostLikeStatus.DISLIKE: {\n        post.addDislike();\n        if (like.status === PostLikeStatus.LIKE) {\n          post.removeLike();\n        }\n        break;\n      }\n      case PostLikeStatus.NONE: {\n        if (like.status === PostLikeStatus.LIKE) {\n          post.removeLike();\n          break;\n        }\n        post.removeDislike();\n        break;\n      }\n    }\n    like.status = dto.status;\n    //NOTE: the only case when LIKEs do not change\n    if (\n      dto.status === PostLikeStatus.NONE &&\n      like.status !== PostLikeStatus.LIKE\n    ) {\n      await Promise.all([\n        this.postsRepository.save(post),\n        this.postsRepository.save(like),\n      ]);\n      return;\n    }\n\n    await this.postsRepository.save(like);\n    const recentLikes = await this.postsRepository.getRecentLikeDocsForPost(\n      dto.postId,\n      PostLikeStatus.LIKE,\n    );\n    post.updateNewestLikes(recentLikes);\n    await this.postsRepository.save(post);\n    return;\n  }\n}\n"],"names":["PostsService","getParentBlog","blogId","blog","blogRepository","findById","DomainException","code","DomainExceptionCode","NotFound","message","extensions","Extension","createPost","input","dto","blogName","name","newPost","PostModel","postId","postsRepository","save","editPost","id","post","findOrNotFoundFail","updatePost","updatePostsByBlogId","update","deletePostsByBlogId","postIds","findPostIdsByBlog","Promise","all","commentsRepository","deleteCommentsForPosts","deletePost","deleteCommentsByPost","_id","toString","handlePostLike","likeDto","postLike","findPostLikeByUserId","userId","user","usersService","findUserById","InternalServerError","login","createNewLikeDoc","updateLikeStatus","status","PostLikeStatus","NONE","LIKE","addLike","DISLIKE","addDislike","PostLikeModel","createLike","recentLikes","getRecentLikeDocsForPost","updateNewestLikes","like","removeDislike","removeLike","constructor"],"mappings":"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"}