{"version":3,"sources":["../../../../../src/modules/bloggers-platform/posts/api/posts.controller.ts"],"sourcesContent":["import {\n        Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Post,\n  Put,\n  Query,\n} from '@nestjs/common';\nimport { PostsQueryRepository } from '../infrastructure/posts.query-repository';\nimport { PostsService } from '../application/posts.service';\nimport { GetPostsQueryParams } from './input-dto/get-posts-query-params.input-dto';\nimport { PaginatedViewDto } from 'src/core/dto/base.paginated.view-dto';\nimport { PostViewDto } from './view-dto/posts.view-dto';\nimport {\n  CreatePostInputDto,\n  UpdatePostInputDto,\n} from './input-dto/posts.input-dto';\nimport { ObjectIdValidationPipe } from 'src/core/pipes/object-id-validation-pipe.service';\n\n@Controller('posts')\nexport class PostsController {\n  constructor(\n    private readonly postsQueryRepo: PostsQueryRepository,\n    private readonly postsService: PostsService,\n  ) {}\n\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  async getPosts(\n    @Query() query: GetPostsQueryParams,\n  ): Promise<PaginatedViewDto<PostViewDto[]>> {\n    return this.postsQueryRepo.getAllPosts(query);\n  }\n\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  async createPost(@Body() query: CreatePostInputDto): Promise<PostViewDto> {\n    const postId = await this.postsService.createPost(query);\n    return this.postsQueryRepo.findPostOrNotFoundFail(postId);\n  }\n\n  @Get(':id')\n  @HttpCode(HttpStatus.OK)\n  async getPost(\n    @Param('id', ObjectIdValidationPipe) id: string,\n  ): Promise<PostViewDto> {\n    return this.postsQueryRepo.findPostOrNotFoundFail(id);\n  }\n\n  @Put(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async editPost(\n    @Param('id', ObjectIdValidationPipe) id: string,\n    @Body() query: UpdatePostInputDto,\n  ): Promise<void> {\n    return this.postsService.editPost(id, query);\n  }\n\n  @Delete('id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async deletePost(\n    @Param('id', ObjectIdValidationPipe) id: string,\n  ): Promise<void> {\n    return this.postsService.deletePost(id);\n  }\n\n  // async createCommentForPost(\n  //   req: RequestWithParamsBodyAndUserId<\n  //     { id: string },\n  //     CommentInputModel,\n  //     { id: string }\n  //   >,\n  //   res: Response<ICommentView>,\n  //   next: NextFunction,\n  // ) {\n  //   const postId = req.params.id as unknown as ObjectId;\n  //   const userId = req.user!.id;\n  //   const input: CreateCommentDto = {\n  //     postId,\n  //     userId,\n  //     content: req.body.content,\n  //   };\n  //   try {\n  //     const commentId = await this.commentsService.createComment(input);\n  //     const comment = await this.commentsQueryRepo.getCommentById(commentId);\n  //     res.status(HttpStatuses.Created).send(comment);\n  //     return;\n  //   } catch (err) {\n  //     next(err);\n  //   }\n  // }\n  //\n  // async getCommentsForPost(\n  //   req: RequestWithParamsAndQuery<{ id: string }, PagingQuery>,\n  //   res: Response<PagedResponse<ICommentView>>,\n  //   next: NextFunction,\n  // ) {\n  //   const postId = req.params.id as unknown as ObjectId;\n  //   const { ...pagination } = req.query as PagingFilter;\n  //   const dto: GetCommentsDto = {\n  //     postId,\n  //     paginator: pagination,\n  //   };\n  //   if (req.user?.id) {\n  //     const userId = createObjId(req.user.id);\n  //     dto.userId = userId;\n  //   }\n  //   try {\n  //     const data = await this.commentsQueryRepo.getComments(dto);\n  //     res.status(HttpStatuses.Success).send(data);\n  //     return;\n  //   } catch (err) {\n  //     next(err);\n  //   }\n  // }\n}\n"],"names":["PostsController","getPosts","query","postsQueryRepo","getAllPosts","createPost","postId","postsService","findPostOrNotFoundFail","getPost","id","editPost","deletePost","constructor","OK","CREATED","NO_CONTENT"],"mappings":";;;;+BAwBaA;;;eAAAA;;;wBAbN;sCAC8B;8BACR;6CACO;+BAM7B;+CACgC;;;;;;;;;;;;;;;AAGhC,IAAA,AAAMA,kBAAN,MAAMA;IAMX,MAEMC,SACJ,AAASC,KAA0B,EACO;QAC1C,OAAO,IAAI,CAACC,cAAc,CAACC,WAAW,CAACF;IACzC;IAEA,MAEMG,WAAW,AAAQH,KAAyB,EAAwB;QACxE,MAAMI,SAAS,MAAM,IAAI,CAACC,YAAY,CAACF,UAAU,CAACH;QAClD,OAAO,IAAI,CAACC,cAAc,CAACK,sBAAsB,CAACF;IACpD;IAEA,MAEMG,QACJ,AAAqCC,EAAU,EACzB;QACtB,OAAO,IAAI,CAACP,cAAc,CAACK,sBAAsB,CAACE;IACpD;IAEA,MAEMC,SACJ,AAAqCD,EAAU,EAC/C,AAAQR,KAAyB,EAClB;QACf,OAAO,IAAI,CAACK,YAAY,CAACI,QAAQ,CAACD,IAAIR;IACxC;IAEA,MAEMU,WACJ,AAAqCF,EAAU,EAChC;QACf,OAAO,IAAI,CAACH,YAAY,CAACK,UAAU,CAACF;IACtC;IA3CAG,YACE,AAAiBV,cAAoC,EACrD,AAAiBI,YAA0B,CAC3C;aAFiBJ,iBAAAA;aACAI,eAAAA;IAChB;AA2FL;;;6CAxFuBO;;;;;;;;;;6CAQAC;;;;;;;;;;6CAOAD;;;;;;;;;;6CAQAE;;;;;;;;;;;;6CASAA"}