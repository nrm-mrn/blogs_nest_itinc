{"version":3,"sources":["../../../../../src/modules/bloggers-platform/posts/api/posts.controller.ts"],"sourcesContent":["import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Post,\n  Put,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { PostsQueryRepository } from '../infrastructure/posts.query-repository';\nimport { PostsService } from '../application/posts.service';\nimport { GetPostsQueryParams } from './input-dto/get-posts-query-params.input-dto';\nimport { PaginatedViewDto } from 'src/core/dto/base.paginated.view-dto';\nimport { PostViewDto } from './view-dto/posts.view-dto';\nimport {\n  CreatePostInputDto,\n  UpdatePostInputDto,\n} from './input-dto/posts.input-dto';\nimport { ObjectIdValidationPipe } from 'src/core/pipes/object-id-validation-pipe.service';\nimport { GetPostCommentsQueryParams } from './input-dto/get-post-comments-query-params.input-dto';\nimport { CommentsQueryRepository } from '../../comments/infrastructure/comments.query-repository';\nimport { CommentViewDto } from '../../comments/api/view-dto/comment-view.dto';\nimport { GetPostCommentsDto } from './input-dto/get-post-comments-dto';\nimport { PostLikeInputDto } from './input-dto/post-like.input-dto';\nimport { ExtractUserFromRequest } from 'src/modules/user-accounts/guards/decorators/extract-user-from-request.decorator';\nimport {\n  Nullable,\n  UserContextDto,\n} from 'src/modules/user-accounts/guards/dto/user-context.dto';\nimport { JwtOptionalAuthGuard } from 'src/modules/user-accounts/guards/bearer/jwt-optional-guard';\nimport { JwtAuthGuard } from 'src/modules/user-accounts/guards/bearer/jwt-auth.guard';\nimport { BasicAuthGuard } from 'src/modules/user-accounts/guards/basic/basic-auth.guard';\nimport { HandlePostLikeDto } from '../dto/handle-post-like.dto';\nimport { ExtractUserFromRequestIfExists } from 'src/modules/user-accounts/guards/decorators/extract-user-if-exists-from-request.decorator';\nimport { CommandBus, QueryBus } from '@nestjs/cqrs';\nimport { GetCommentsByPostQuery } from '../../comments/application/queries/get-comments-for-post.query';\nimport { CreateCommentForPostInputDto } from './input-dto/create-comment-for-post.input-dto';\nimport { CreateCommentCommand } from '../../comments/application/usecases/create-comment.usecase';\nimport { GetCommentQuery } from '../../comments/application/queries/get-comment.query';\n\n@Controller('posts')\nexport class PostsController {\n  constructor(\n    private readonly postsQueryRepo: PostsQueryRepository,\n    private readonly postsService: PostsService,\n    private readonly queryBus: QueryBus,\n    private readonly commandBus: CommandBus,\n  ) {}\n\n  @UseGuards(JwtOptionalAuthGuard)\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  async getPosts(\n    @Query() query: GetPostsQueryParams,\n    @ExtractUserFromRequestIfExists() user: UserContextDto | null,\n  ): Promise<PaginatedViewDto<PostViewDto[]>> {\n    return this.postsQueryRepo.getAllPosts(query, user?.userId);\n  }\n\n  @UseGuards(BasicAuthGuard)\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  async createPost(@Body() query: CreatePostInputDto): Promise<PostViewDto> {\n    const { postId } = await this.postsService.createPost(query);\n    return this.postsQueryRepo.findPostOrNotFoundFail(postId);\n  }\n\n  @UseGuards(JwtOptionalAuthGuard)\n  @Get(':id')\n  @HttpCode(HttpStatus.OK)\n  async getPost(\n    @Param('id', ObjectIdValidationPipe) id: string,\n    @ExtractUserFromRequestIfExists() user: UserContextDto | null,\n  ): Promise<PostViewDto> {\n    return this.postsQueryRepo.findPostOrNotFoundFail(id, user?.userId);\n  }\n\n  @UseGuards(BasicAuthGuard)\n  @Put(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async editPost(\n    @Param('id', ObjectIdValidationPipe) id: string,\n    @Body() query: UpdatePostInputDto,\n  ): Promise<void> {\n    return this.postsService.editPost(id, query);\n  }\n\n  @UseGuards(BasicAuthGuard)\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async deletePost(\n    @Param('id', ObjectIdValidationPipe) id: string,\n  ): Promise<void> {\n    return this.postsService.deletePost(id);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Put(':postId/like-status')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async handlePostLike(\n    @Param('postId', ObjectIdValidationPipe) postId: string,\n    @Body() body: PostLikeInputDto,\n    @ExtractUserFromRequest() user: UserContextDto,\n  ) {\n    const dto: HandlePostLikeDto = {\n      postId,\n      userId: user.userId,\n      status: body.likeStatus,\n    };\n    return this.postsService.handlePostLike(dto);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post(':postId/comments')\n  @HttpCode(HttpStatus.CREATED)\n  async createCommentForPost(\n    @Body() body: CreateCommentForPostInputDto,\n    @Param('postId', ObjectIdValidationPipe) postId: string,\n    @ExtractUserFromRequest() user: UserContextDto,\n  ): Promise<CommentViewDto> {\n    const commentId = await this.commandBus.execute(\n      new CreateCommentCommand(postId, user.userId, body.content),\n    );\n    return this.queryBus.execute(new GetCommentQuery(commentId, user.userId));\n  }\n\n  @UseGuards(JwtOptionalAuthGuard)\n  @Get(':id/comments')\n  @HttpCode(HttpStatus.OK)\n  async getCommentsForPost(\n    @Param('id', ObjectIdValidationPipe) postId: string,\n    @Query() query: GetPostCommentsQueryParams,\n    @ExtractUserFromRequestIfExists() user: Nullable<UserContextDto>,\n  ): Promise<PaginatedViewDto<CommentViewDto[]>> {\n    return this.queryBus.execute(\n      new GetCommentsByPostQuery(query, postId, user.userId),\n    );\n  }\n}\n"],"names":["PostsController","getPosts","query","user","postsQueryRepo","getAllPosts","userId","createPost","postId","postsService","findPostOrNotFoundFail","getPost","id","editPost","deletePost","handlePostLike","body","dto","status","likeStatus","createCommentForPost","commentId","commandBus","execute","CreateCommentCommand","content","queryBus","GetCommentQuery","getCommentsForPost","GetCommentsByPostQuery","constructor","OK","CREATED","NO_CONTENT"],"mappings":";;;;+BA6CaA;;;eAAAA;;;wBAjCN;sCAC8B;8BACR;6CACO;+BAM7B;+CACgC;oDACI;kCAIV;iDACM;gCAIhC;kCAC8B;8BACR;gCACE;yDAEgB;sBACV;yCACE;8CACM;sCACR;iCACL;;;;;;;;;;;;;;;AAGzB,IAAA,AAAMA,kBAAN,MAAMA;IAQX,MAGMC,SACJ,AAASC,KAA0B,EACnC,AAAkCC,IAA2B,EACnB;QAC1C,OAAO,IAAI,CAACC,cAAc,CAACC,WAAW,CAACH,OAAOC,MAAMG;IACtD;IAEA,MAGMC,WAAW,AAAQL,KAAyB,EAAwB;QACxE,MAAM,EAAEM,MAAM,EAAE,GAAG,MAAM,IAAI,CAACC,YAAY,CAACF,UAAU,CAACL;QACtD,OAAO,IAAI,CAACE,cAAc,CAACM,sBAAsB,CAACF;IACpD;IAEA,MAGMG,QACJ,AAAqCC,EAAU,EAC/C,AAAkCT,IAA2B,EACvC;QACtB,OAAO,IAAI,CAACC,cAAc,CAACM,sBAAsB,CAACE,IAAIT,MAAMG;IAC9D;IAEA,MAGMO,SACJ,AAAqCD,EAAU,EAC/C,AAAQV,KAAyB,EAClB;QACf,OAAO,IAAI,CAACO,YAAY,CAACI,QAAQ,CAACD,IAAIV;IACxC;IAEA,MAGMY,WACJ,AAAqCF,EAAU,EAChC;QACf,OAAO,IAAI,CAACH,YAAY,CAACK,UAAU,CAACF;IACtC;IAEA,MAGMG,eACJ,AAAyCP,MAAc,EACvD,AAAQQ,IAAsB,EAC9B,AAA0Bb,IAAoB,EAC9C;QACA,MAAMc,MAAyB;YAC7BT;YACAF,QAAQH,KAAKG,MAAM;YACnBY,QAAQF,KAAKG,UAAU;QACzB;QACA,OAAO,IAAI,CAACV,YAAY,CAACM,cAAc,CAACE;IAC1C;IAEA,MAGMG,qBACJ,AAAQJ,IAAkC,EAC1C,AAAyCR,MAAc,EACvD,AAA0BL,IAAoB,EACrB;QACzB,MAAMkB,YAAY,MAAM,IAAI,CAACC,UAAU,CAACC,OAAO,CAC7C,IAAIC,0CAAoB,CAAChB,QAAQL,KAAKG,MAAM,EAAEU,KAAKS,OAAO;QAE5D,OAAO,IAAI,CAACC,QAAQ,CAACH,OAAO,CAAC,IAAII,gCAAe,CAACN,WAAWlB,KAAKG,MAAM;IACzE;IAEA,MAGMsB,mBACJ,AAAqCpB,MAAc,EACnD,AAASN,KAAiC,EAC1C,AAAkCC,IAA8B,EACnB;QAC7C,OAAO,IAAI,CAACuB,QAAQ,CAACH,OAAO,CAC1B,IAAIM,+CAAsB,CAAC3B,OAAOM,QAAQL,KAAKG,MAAM;IAEzD;IA/FAwB,YACE,AAAiB1B,cAAoC,EACrD,AAAiBK,YAA0B,EAC3C,AAAiBiB,QAAkB,EACnC,AAAiBJ,UAAsB,CACvC;aAJiBlB,iBAAAA;aACAK,eAAAA;aACAiB,WAAAA;aACAJ,aAAAA;IAChB;AA2FL;;;;6CAvFuBS;;;;;;;;;;;;;6CAUAC;;;;;;;;;;;6CAQAD;;;;;;;;;;;;;6CAUAE;;;;;;;;;;;;;6CAUAA;;;;;;;;;;;6CASAA;;;;;;;;;;;;;;;6CAgBAD;;;;;;;;;;;;;;;6CAcAD"}