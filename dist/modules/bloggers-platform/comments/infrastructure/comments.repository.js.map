{"version":3,"sources":["../../../../../src/modules/bloggers-platform/comments/infrastructure/comments.repository.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport {\n  Comment,\n  CommentDocument,\n  CommentModelType,\n} from '../domain/comment.entity';\nimport { DomainException } from 'src/core/exceptions/domain-exceptions';\nimport { DomainExceptionCode } from 'src/core/exceptions/domain-exception-codes';\nimport {\n  CommentLike,\n  CommentLikeDocument,\n  CommentLikeModelType,\n} from '../domain/comment-like.entity';\n\n@Injectable()\nexport class CommentsRepository {\n  constructor(\n    @InjectModel(Comment.name) private readonly CommentModel: CommentModelType,\n    @InjectModel(CommentLike.name)\n    private readonly CommentLikeModel: CommentLikeModelType,\n  ) {}\n\n  async save(doc: CommentDocument | CommentLikeDocument): Promise<string> {\n    const savedDoc = await doc.save();\n    return savedDoc._id.toString();\n  }\n\n  async findCommentByIdOrFail(id: string): Promise<CommentDocument> {\n    const comment = await this.CommentModel.findOne({\n      _id: id,\n      deletedAt: null,\n    }).orFail(\n      new DomainException({\n        code: DomainExceptionCode.NotFound,\n        message: 'Comment not found',\n      }),\n    );\n    return comment;\n  }\n\n  async deleteComment(comment: CommentDocument): Promise<void> {\n    comment.markDeleted();\n    await Promise.all([\n      this.save(comment),\n      this.CommentLikeModel.deleteMany({ commentId: comment._id.toString() }),\n    ]);\n    return;\n  }\n\n  async deleteCommentsByPost(postId: string): Promise<void> {\n    const ids = await this.CommentModel.find({ postId }).then((comments) => {\n      return comments.map((comment) => comment._id.toString());\n    });\n    await Promise.all([\n      this.CommentModel.updateMany({ postId }, { deletedAt: new Date() }),\n      this.CommentLikeModel.deleteMany({ commentId: { $in: ids } }),\n    ]);\n  }\n\n  async deleteCommentsForPosts(postIds: string[]): Promise<void> {\n    const commentIds = await this.CommentModel.find({\n      postId: { $in: postIds },\n    }).then((comments) => comments.map((comment) => comment._id.toString()));\n    await Promise.all([\n      this.CommentModel.updateMany(\n        {\n          postId: { $in: postIds },\n        },\n        { deletedAt: new Date() },\n      ),\n      this.deleteCommentsLikes(commentIds),\n    ]);\n    return;\n  }\n\n  private async deleteCommentsLikes(commentIds: string[]) {\n    return this.CommentLikeModel.deleteMany({ commentId: { $in: commentIds } });\n  }\n\n  async findCommLikeByUser(\n    commentId: string,\n    userId: string,\n  ): Promise<CommentLikeDocument | null> {\n    const like = await this.CommentLikeModel.findOne({\n      commentId,\n      userId,\n    }).exec();\n    return like;\n  }\n}\n"],"names":["CommentsRepository","save","doc","savedDoc","_id","toString","findCommentByIdOrFail","id","comment","CommentModel","findOne","deletedAt","orFail","DomainException","code","DomainExceptionCode","NotFound","message","deleteComment","markDeleted","Promise","all","CommentLikeModel","deleteMany","commentId","deleteCommentsByPost","postId","ids","find","then","comments","map","updateMany","Date","$in","deleteCommentsForPosts","postIds","commentIds","deleteCommentsLikes","findCommLikeByUser","userId","like","exec","constructor","name"],"mappings":";;;;+BAgBaA;;;eAAAA;;;wBAhBc;0BACC;+BAKrB;kCACyB;sCACI;mCAK7B;;;;;;;;;;;;;;;AAGA,IAAA,AAAMA,qBAAN,MAAMA;IAOX,MAAMC,KAAKC,GAA0C,EAAmB;QACtE,MAAMC,WAAW,MAAMD,IAAID,IAAI;QAC/B,OAAOE,SAASC,GAAG,CAACC,QAAQ;IAC9B;IAEA,MAAMC,sBAAsBC,EAAU,EAA4B;QAChE,MAAMC,UAAU,MAAM,IAAI,CAACC,YAAY,CAACC,OAAO,CAAC;YAC9CN,KAAKG;YACLI,WAAW;QACb,GAAGC,MAAM,CACP,IAAIC,iCAAe,CAAC;YAClBC,MAAMC,yCAAmB,CAACC,QAAQ;YAClCC,SAAS;QACX;QAEF,OAAOT;IACT;IAEA,MAAMU,cAAcV,OAAwB,EAAiB;QAC3DA,QAAQW,WAAW;QACnB,MAAMC,QAAQC,GAAG,CAAC;YAChB,IAAI,CAACpB,IAAI,CAACO;YACV,IAAI,CAACc,gBAAgB,CAACC,UAAU,CAAC;gBAAEC,WAAWhB,QAAQJ,GAAG,CAACC,QAAQ;YAAG;SACtE;QACD;IACF;IAEA,MAAMoB,qBAAqBC,MAAc,EAAiB;QACxD,MAAMC,MAAM,MAAM,IAAI,CAAClB,YAAY,CAACmB,IAAI,CAAC;YAAEF;QAAO,GAAGG,IAAI,CAAC,CAACC;YACzD,OAAOA,SAASC,GAAG,CAAC,CAACvB,UAAYA,QAAQJ,GAAG,CAACC,QAAQ;QACvD;QACA,MAAMe,QAAQC,GAAG,CAAC;YAChB,IAAI,CAACZ,YAAY,CAACuB,UAAU,CAAC;gBAAEN;YAAO,GAAG;gBAAEf,WAAW,IAAIsB;YAAO;YACjE,IAAI,CAACX,gBAAgB,CAACC,UAAU,CAAC;gBAAEC,WAAW;oBAAEU,KAAKP;gBAAI;YAAE;SAC5D;IACH;IAEA,MAAMQ,uBAAuBC,OAAiB,EAAiB;QAC7D,MAAMC,aAAa,MAAM,IAAI,CAAC5B,YAAY,CAACmB,IAAI,CAAC;YAC9CF,QAAQ;gBAAEQ,KAAKE;YAAQ;QACzB,GAAGP,IAAI,CAAC,CAACC,WAAaA,SAASC,GAAG,CAAC,CAACvB,UAAYA,QAAQJ,GAAG,CAACC,QAAQ;QACpE,MAAMe,QAAQC,GAAG,CAAC;YAChB,IAAI,CAACZ,YAAY,CAACuB,UAAU,CAC1B;gBACEN,QAAQ;oBAAEQ,KAAKE;gBAAQ;YACzB,GACA;gBAAEzB,WAAW,IAAIsB;YAAO;YAE1B,IAAI,CAACK,mBAAmB,CAACD;SAC1B;QACD;IACF;IAEA,MAAcC,oBAAoBD,UAAoB,EAAE;QACtD,OAAO,IAAI,CAACf,gBAAgB,CAACC,UAAU,CAAC;YAAEC,WAAW;gBAAEU,KAAKG;YAAW;QAAE;IAC3E;IAEA,MAAME,mBACJf,SAAiB,EACjBgB,MAAc,EACuB;QACrC,MAAMC,OAAO,MAAM,IAAI,CAACnB,gBAAgB,CAACZ,OAAO,CAAC;YAC/Cc;YACAgB;QACF,GAAGE,IAAI;QACP,OAAOD;IACT;IAxEAE,YACE,AAA4ClC,YAA8B,EAC1E,AACiBa,gBAAsC,CACvD;aAH4Cb,eAAAA;aAE3Ba,mBAAAA;IAChB;AAqEL;;;mEAxEyBsB;2EACIA"}