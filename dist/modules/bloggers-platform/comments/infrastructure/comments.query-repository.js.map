{"version":3,"sources":["../../../../../src/modules/bloggers-platform/comments/infrastructure/comments.query-repository.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { PaginatedViewDto } from 'src/core/dto/base.paginated.view-dto';\nimport { CommentViewDto } from '../api/view-dto/comment-view.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Comment, CommentModelType } from '../domain/comment.entity';\nimport {\n  CommentLike,\n  CommentLikeModelType,\n} from '../domain/comment-like.entity';\nimport { DomainException } from 'src/core/exceptions/domain-exceptions';\nimport { DomainExceptionCode } from 'src/core/exceptions/domain-exception-codes';\nimport { GetCommentsForPostQueryDto } from '../dto/get-comments-for-post.dto';\nimport { GetCommentDto } from '../dto/get-comment-dto';\n\n@Injectable()\nexport class CommentsQueryRepository {\n  constructor(\n    @InjectModel(Comment.name) private readonly CommentModel: CommentModelType,\n    @InjectModel(CommentLike.name)\n    private readonly CommentLikeModel: CommentLikeModelType,\n  ) {}\n\n  async getCommentsForPost(\n    dto: GetCommentsForPostQueryDto,\n  ): Promise<PaginatedViewDto<CommentViewDto[]>> {\n    const filter = {\n      postId: dto.postId,\n      deletedAt: null,\n    };\n    const comments = await this.CommentModel.find(filter)\n      .sort({ [dto.query.sortBy]: dto.query.sortDirection })\n      .skip(dto.query.calculateSkip())\n      .limit(dto.query.pageSize)\n      .exec();\n    const total = await this.CommentModel.countDocuments(filter).exec();\n    const commentsView = comments.map((comment) =>\n      CommentViewDto.mapToView(comment),\n    );\n    if (dto.userId) {\n      const commentIds = comments.map((commentDoc) =>\n        commentDoc._id.toString(),\n      );\n      const likes = await this.CommentLikeModel.find({\n        userId: dto.userId,\n        commentId: { $in: commentIds },\n      });\n      const likesMap = new Map(\n        likes.map((like) => [like.commentId, like.status]),\n      );\n      commentsView.forEach((comment) => comment.setLike(likesMap));\n    }\n\n    return PaginatedViewDto.mapToView({\n      items: commentsView,\n      page: dto.query.pageNumber,\n      size: dto.query.pageSize,\n      totalCount: total,\n    });\n  }\n\n  async findCommentOrNotFoundFail(dto: GetCommentDto): Promise<CommentViewDto> {\n    const comment = await this.CommentModel.findOne({\n      _id: dto.commentId,\n      deletedAt: null,\n    }).orFail(\n      new DomainException({\n        code: DomainExceptionCode.NotFound,\n        message: 'Comment not found',\n      }),\n    );\n    const commentView = CommentViewDto.mapToView(comment);\n\n    if (dto.userId) {\n      const like = await this.CommentLikeModel.findOne({\n        commentId: dto.commentId,\n        userId: dto.userId,\n      });\n      if (like) {\n        commentView.setLike(like);\n      }\n    }\n    return commentView;\n  }\n}\n"],"names":["CommentsQueryRepository","getCommentsForPost","dto","filter","postId","deletedAt","comments","CommentModel","find","sort","query","sortBy","sortDirection","skip","calculateSkip","limit","pageSize","exec","total","countDocuments","commentsView","map","comment","CommentViewDto","mapToView","userId","commentIds","commentDoc","_id","toString","likes","CommentLikeModel","commentId","$in","likesMap","Map","like","status","forEach","setLike","PaginatedViewDto","items","page","pageNumber","size","totalCount","findCommentOrNotFoundFail","findOne","orFail","DomainException","code","DomainExceptionCode","NotFound","message","commentView","constructor","name"],"mappings":";;;;+BAeaA;;;eAAAA;;;wBAfc;sCACM;gCACF;0BACH;+BACc;mCAInC;kCACyB;sCACI;;;;;;;;;;;;;;;AAK7B,IAAA,AAAMA,0BAAN,MAAMA;IAOX,MAAMC,mBACJC,GAA+B,EACc;QAC7C,MAAMC,SAAS;YACbC,QAAQF,IAAIE,MAAM;YAClBC,WAAW;QACb;QACA,MAAMC,WAAW,MAAM,IAAI,CAACC,YAAY,CAACC,IAAI,CAACL,QAC3CM,IAAI,CAAC;YAAE,CAACP,IAAIQ,KAAK,CAACC,MAAM,CAAC,EAAET,IAAIQ,KAAK,CAACE,aAAa;QAAC,GACnDC,IAAI,CAACX,IAAIQ,KAAK,CAACI,aAAa,IAC5BC,KAAK,CAACb,IAAIQ,KAAK,CAACM,QAAQ,EACxBC,IAAI;QACP,MAAMC,QAAQ,MAAM,IAAI,CAACX,YAAY,CAACY,cAAc,CAAChB,QAAQc,IAAI;QACjE,MAAMG,eAAed,SAASe,GAAG,CAAC,CAACC,UACjCC,8BAAc,CAACC,SAAS,CAACF;QAE3B,IAAIpB,IAAIuB,MAAM,EAAE;YACd,MAAMC,aAAapB,SAASe,GAAG,CAAC,CAACM,aAC/BA,WAAWC,GAAG,CAACC,QAAQ;YAEzB,MAAMC,QAAQ,MAAM,IAAI,CAACC,gBAAgB,CAACvB,IAAI,CAAC;gBAC7CiB,QAAQvB,IAAIuB,MAAM;gBAClBO,WAAW;oBAAEC,KAAKP;gBAAW;YAC/B;YACA,MAAMQ,WAAW,IAAIC,IACnBL,MAAMT,GAAG,CAAC,CAACe,OAAS;oBAACA,KAAKJ,SAAS;oBAAEI,KAAKC,MAAM;iBAAC;YAEnDjB,aAAakB,OAAO,CAAC,CAAChB,UAAYA,QAAQiB,OAAO,CAACL;QACpD;QAEA,OAAOM,sCAAgB,CAAChB,SAAS,CAAC;YAChCiB,OAAOrB;YACPsB,MAAMxC,IAAIQ,KAAK,CAACiC,UAAU;YAC1BC,MAAM1C,IAAIQ,KAAK,CAACM,QAAQ;YACxB6B,YAAY3B;QACd;IACF;IAEA,MAAM4B,0BAA0B5C,GAAkB,EAA2B;QAC3E,MAAMoB,UAAU,MAAM,IAAI,CAACf,YAAY,CAACwC,OAAO,CAAC;YAC9CnB,KAAK1B,IAAI8B,SAAS;YAClB3B,WAAW;QACb,GAAG2C,MAAM,CACP,IAAIC,iCAAe,CAAC;YAClBC,MAAMC,yCAAmB,CAACC,QAAQ;YAClCC,SAAS;QACX;QAEF,MAAMC,cAAc/B,8BAAc,CAACC,SAAS,CAACF;QAE7C,IAAIpB,IAAIuB,MAAM,EAAE;YACd,MAAMW,OAAO,MAAM,IAAI,CAACL,gBAAgB,CAACgB,OAAO,CAAC;gBAC/Cf,WAAW9B,IAAI8B,SAAS;gBACxBP,QAAQvB,IAAIuB,MAAM;YACpB;YACA,IAAIW,MAAM;gBACRkB,YAAYf,OAAO,CAACH;YACtB;QACF;QACA,OAAOkB;IACT;IAlEAC,YACE,AAA4ChD,YAA8B,EAC1E,AACiBwB,gBAAsC,CACvD;aAH4CxB,eAAAA;aAE3BwB,mBAAAA;IAChB;AA+DL;;;mEAlEyByB;2EACIA"}