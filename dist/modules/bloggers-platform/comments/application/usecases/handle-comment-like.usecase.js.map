{"version":3,"sources":["../../../../../../src/modules/bloggers-platform/comments/application/usecases/handle-comment-like.usecase.ts"],"sourcesContent":["import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport {\n  CommentLike,\n  CommentLikeDocument,\n  CommentLikeModelType,\n  CommentLikeStatus,\n} from '../../domain/comment-like.entity';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { CommentDocument } from '../../domain/comment.entity';\nimport { CommentsRepository } from '../../infrastructure/comments.repository';\nimport { CreateCommentLikeDomainDto } from '../../domain/dto/create-comment-like-domain-dto';\n\nexport class HandleCommentLikeCommand {\n  constructor(\n    public userId: string,\n    public commentId: string,\n    public status: CommentLikeStatus,\n  ) {}\n}\n\n@CommandHandler(HandleCommentLikeCommand)\nexport class CommentLikeCommandHandler\n  implements ICommandHandler<HandleCommentLikeCommand>\n{\n  constructor(\n    @InjectModel(CommentLike.name)\n    private readonly CommentLikeModel: CommentLikeModelType,\n    private readonly commentRepository: CommentsRepository,\n  ) {}\n  async execute(command: HandleCommentLikeCommand): Promise<void> {\n    const comment = await this.commentRepository.findCommentByIdOrFail(\n      command.commentId,\n    );\n    const commentLike = await this.commentRepository.findCommLikeByUser(\n      command.commentId,\n      command.userId,\n    );\n    const dto: CreateCommentLikeDomainDto = {\n      commentId: command.commentId,\n      status: command.status,\n      userId: command.userId,\n    };\n    if (!commentLike) {\n      return this.createNewLikeDoc(dto, comment);\n    }\n    return this.updateLikeStatus(comment, commentLike, dto);\n  }\n\n  private async createNewLikeDoc(\n    dto: CreateCommentLikeDomainDto,\n    comment: CommentDocument,\n  ) {\n    if (dto.status === CommentLikeStatus.NONE) {\n      return;\n    }\n    switch (dto.status) {\n      case CommentLikeStatus.LIKE: {\n        comment.addLike();\n        break;\n      }\n      case CommentLikeStatus.DISLIKE: {\n        comment.addDislike();\n        break;\n      }\n    }\n    const like = this.CommentLikeModel.createLike({\n      ...dto,\n    });\n    await Promise.all([\n      this.commentRepository.save(like),\n      this.commentRepository.save(comment),\n    ]);\n    return;\n  }\n\n  private async updateLikeStatus(\n    comment: CommentDocument,\n    like: CommentLikeDocument,\n    dto: CreateCommentLikeDomainDto,\n  ): Promise<void> {\n    if (like.status !== dto.status) {\n      switch (like.status) {\n        case CommentLikeStatus.LIKE: {\n          comment.removeLike();\n          if (dto.status === CommentLikeStatus.DISLIKE) {\n            comment.addDislike();\n          }\n          break;\n        }\n        case CommentLikeStatus.DISLIKE: {\n          comment.removeDislike();\n          if (dto.status === CommentLikeStatus.LIKE) {\n            comment.addLike();\n          }\n          break;\n        }\n        case CommentLikeStatus.NONE: {\n          if (dto.status === CommentLikeStatus.LIKE) {\n            comment.addLike();\n            break;\n          }\n          comment.addDislike();\n          break;\n        }\n      }\n      like.status = dto.status;\n      await Promise.all([\n        this.commentRepository.save(like),\n        this.commentRepository.save(comment),\n      ]);\n    }\n    return;\n  }\n}\n"],"names":["CommentLikeCommandHandler","HandleCommentLikeCommand","constructor","userId","commentId","status","execute","command","comment","commentRepository","findCommentByIdOrFail","commentLike","findCommLikeByUser","dto","createNewLikeDoc","updateLikeStatus","CommentLikeStatus","NONE","LIKE","addLike","DISLIKE","addDislike","like","CommentLikeModel","createLike","Promise","all","save","removeLike","removeDislike","name"],"mappings":";;;;;;;;;;;QAqBaA;eAAAA;;QATAC;eAAAA;;;sBAZmC;mCAMzC;0BACqB;oCAEO;;;;;;;;;;;;;;;AAG5B,IAAA,AAAMA,2BAAN,MAAMA;IACXC,YACE,AAAOC,MAAc,EACrB,AAAOC,SAAiB,EACxB,AAAOC,MAAyB,CAChC;aAHOF,SAAAA;aACAC,YAAAA;aACAC,SAAAA;IACN;AACL;AAGO,IAAA,AAAML,4BAAN,MAAMA;IAQX,MAAMM,QAAQC,OAAiC,EAAiB;QAC9D,MAAMC,UAAU,MAAM,IAAI,CAACC,iBAAiB,CAACC,qBAAqB,CAChEH,QAAQH,SAAS;QAEnB,MAAMO,cAAc,MAAM,IAAI,CAACF,iBAAiB,CAACG,kBAAkB,CACjEL,QAAQH,SAAS,EACjBG,QAAQJ,MAAM;QAEhB,MAAMU,MAAkC;YACtCT,WAAWG,QAAQH,SAAS;YAC5BC,QAAQE,QAAQF,MAAM;YACtBF,QAAQI,QAAQJ,MAAM;QACxB;QACA,IAAI,CAACQ,aAAa;YAChB,OAAO,IAAI,CAACG,gBAAgB,CAACD,KAAKL;QACpC;QACA,OAAO,IAAI,CAACO,gBAAgB,CAACP,SAASG,aAAaE;IACrD;IAEA,MAAcC,iBACZD,GAA+B,EAC/BL,OAAwB,EACxB;QACA,IAAIK,IAAIR,MAAM,KAAKW,oCAAiB,CAACC,IAAI,EAAE;YACzC;QACF;QACA,OAAQJ,IAAIR,MAAM;YAChB,KAAKW,oCAAiB,CAACE,IAAI;gBAAE;oBAC3BV,QAAQW,OAAO;oBACf;gBACF;YACA,KAAKH,oCAAiB,CAACI,OAAO;gBAAE;oBAC9BZ,QAAQa,UAAU;oBAClB;gBACF;QACF;QACA,MAAMC,OAAO,IAAI,CAACC,gBAAgB,CAACC,UAAU,CAAC;YAC5C,GAAGX,GAAG;QACR;QACA,MAAMY,QAAQC,GAAG,CAAC;YAChB,IAAI,CAACjB,iBAAiB,CAACkB,IAAI,CAACL;YAC5B,IAAI,CAACb,iBAAiB,CAACkB,IAAI,CAACnB;SAC7B;QACD;IACF;IAEA,MAAcO,iBACZP,OAAwB,EACxBc,IAAyB,EACzBT,GAA+B,EAChB;QACf,IAAIS,KAAKjB,MAAM,KAAKQ,IAAIR,MAAM,EAAE;YAC9B,OAAQiB,KAAKjB,MAAM;gBACjB,KAAKW,oCAAiB,CAACE,IAAI;oBAAE;wBAC3BV,QAAQoB,UAAU;wBAClB,IAAIf,IAAIR,MAAM,KAAKW,oCAAiB,CAACI,OAAO,EAAE;4BAC5CZ,QAAQa,UAAU;wBACpB;wBACA;oBACF;gBACA,KAAKL,oCAAiB,CAACI,OAAO;oBAAE;wBAC9BZ,QAAQqB,aAAa;wBACrB,IAAIhB,IAAIR,MAAM,KAAKW,oCAAiB,CAACE,IAAI,EAAE;4BACzCV,QAAQW,OAAO;wBACjB;wBACA;oBACF;gBACA,KAAKH,oCAAiB,CAACC,IAAI;oBAAE;wBAC3B,IAAIJ,IAAIR,MAAM,KAAKW,oCAAiB,CAACE,IAAI,EAAE;4BACzCV,QAAQW,OAAO;4BACf;wBACF;wBACAX,QAAQa,UAAU;wBAClB;oBACF;YACF;YACAC,KAAKjB,MAAM,GAAGQ,IAAIR,MAAM;YACxB,MAAMoB,QAAQC,GAAG,CAAC;gBAChB,IAAI,CAACjB,iBAAiB,CAACkB,IAAI,CAACL;gBAC5B,IAAI,CAACb,iBAAiB,CAACkB,IAAI,CAACnB;aAC7B;QACH;QACA;IACF;IAxFAN,YACE,AACiBqB,gBAAsC,EACvD,AAAiBd,iBAAqC,CACtD;aAFiBc,mBAAAA;aACAd,oBAAAA;IAChB;AAqFL;;;2EAxF6BqB"}