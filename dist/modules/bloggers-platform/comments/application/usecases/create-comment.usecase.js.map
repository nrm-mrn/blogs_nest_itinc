{"version":3,"sources":["../../../../../../src/modules/bloggers-platform/comments/application/usecases/create-comment.usecase.ts"],"sourcesContent":["import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { CommentsRepository } from '../../infrastructure/comments.repository';\nimport { PostsRepository } from 'src/modules/bloggers-platform/posts/infrastructure/posts.repository';\nimport { UsersExternalService } from 'src/modules/user-accounts/application/users.external-service';\nimport { DomainException } from 'src/core/exceptions/domain-exceptions';\nimport { DomainExceptionCode } from 'src/core/exceptions/domain-exception-codes';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Comment, CommentModelType } from '../../domain/comment.entity';\n\nexport class CreateCommentCommand {\n  constructor(\n    public postId: string,\n    public userId: string,\n    public content: string,\n  ) {}\n}\n\n@CommandHandler(CreateCommentCommand)\nexport class CreateCommentCommandHandler\n  implements ICommandHandler<CreateCommentCommand, string>\n{\n  constructor(\n    @InjectModel(Comment.name) private readonly CommentModel: CommentModelType,\n    private readonly commentsRepository: CommentsRepository,\n    private readonly postsRepository: PostsRepository,\n    private readonly usersService: UsersExternalService,\n  ) {}\n\n  async execute(command: CreateCommentCommand): Promise<string> {\n    await this.postsRepository.findOrNotFoundFail(command.postId);\n    const user = await this.usersService.findUserById(command.userId);\n    if (!user) {\n      throw new DomainException({\n        code: DomainExceptionCode.InternalServerError,\n        message: 'User not found',\n      });\n    }\n    const newComment = this.CommentModel.createComment({\n      content: command.content,\n      postId: command.postId,\n      userId: command.userId,\n      userLogin: user.login,\n    });\n    const commentId = await this.commentsRepository.save(newComment);\n    return commentId;\n  }\n}\n"],"names":["CreateCommentCommand","CreateCommentCommandHandler","constructor","postId","userId","content","execute","command","postsRepository","findOrNotFoundFail","user","usersService","findUserById","DomainException","code","DomainExceptionCode","InternalServerError","message","newComment","CommentModel","createComment","userLogin","login","commentId","commentsRepository","save","name"],"mappings":";;;;;;;;;;;QASaA;eAAAA;;QASAC;eAAAA;;;sBAlBmC;oCACb;iCACH;sCACK;kCACL;sCACI;0BACR;+BACc;;;;;;;;;;;;;;;AAEnC,IAAA,AAAMD,uBAAN,MAAMA;IACXE,YACE,AAAOC,MAAc,EACrB,AAAOC,MAAc,EACrB,AAAOC,OAAe,CACtB;aAHOF,SAAAA;aACAC,SAAAA;aACAC,UAAAA;IACN;AACL;AAGO,IAAA,AAAMJ,8BAAN,MAAMA;IAUX,MAAMK,QAAQC,OAA6B,EAAmB;QAC5D,MAAM,IAAI,CAACC,eAAe,CAACC,kBAAkB,CAACF,QAAQJ,MAAM;QAC5D,MAAMO,OAAO,MAAM,IAAI,CAACC,YAAY,CAACC,YAAY,CAACL,QAAQH,MAAM;QAChE,IAAI,CAACM,MAAM;YACT,MAAM,IAAIG,iCAAe,CAAC;gBACxBC,MAAMC,yCAAmB,CAACC,mBAAmB;gBAC7CC,SAAS;YACX;QACF;QACA,MAAMC,aAAa,IAAI,CAACC,YAAY,CAACC,aAAa,CAAC;YACjDf,SAASE,QAAQF,OAAO;YACxBF,QAAQI,QAAQJ,MAAM;YACtBC,QAAQG,QAAQH,MAAM;YACtBiB,WAAWX,KAAKY,KAAK;QACvB;QACA,MAAMC,YAAY,MAAM,IAAI,CAACC,kBAAkB,CAACC,IAAI,CAACP;QACrD,OAAOK;IACT;IAxBArB,YACE,AAA4CiB,YAA8B,EAC1E,AAAiBK,kBAAsC,EACvD,AAAiBhB,eAAgC,EACjD,AAAiBG,YAAkC,CACnD;aAJ4CQ,eAAAA;aAC3BK,qBAAAA;aACAhB,kBAAAA;aACAG,eAAAA;IAChB;AAoBL;;;mEAxByBe"}