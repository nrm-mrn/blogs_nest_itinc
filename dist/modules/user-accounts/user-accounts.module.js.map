{"version":3,"sources":["../../../src/modules/user-accounts/user-accounts.module.ts"],"sourcesContent":["import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './domain/user.entity';\nimport { UsersController } from './api/users.controller';\nimport { UsersService } from './application/users.service';\nimport { UsersRepository } from './infrastructure/users.repository';\nimport { BasicAuthGuard } from './guards/basic/basic-auth.guard';\nimport { HashService } from './application/passHash.service';\nimport { JwtModule, JwtService } from '@nestjs/jwt';\nimport { DeviceAuthSession, SessionSchema } from './domain/session.entity';\nimport { AuthController } from './api/auth.controller';\nimport { DevicesSecurityController } from './api/devices-security.controller';\nimport { JwtAuthGuard } from './guards/bearer/jwt-auth.guard';\nimport { RefreshTokenGuard } from './guards/bearer/jwt-refresh-token-guard';\nimport { EmailTemplates } from '../notifications/email.templates';\nimport { NotificationsModule } from '../notifications/notifications.module';\nimport { DevicesSecurityRepository } from './infrastructure/devices-security.repository';\nimport {\n  ACCESS_TOKEN_STRATEGY_INJECT_TOKEN,\n  REFRESH_TOKEN_STRATEGY_INJECT_TOKEN,\n} from './constants/auth-token.inject-constants';\nimport { UsersExternalService } from './application/users.external-service';\nimport { JwtStrategy } from './guards/bearer/jwt.strategy';\nimport { ApiRequest, ApiRequestSchema } from './domain/apiRequest.entity';\nimport { ApiRequestsStorage } from './infrastructure/apiRequests.repository';\nimport { GetAllUsersQueryHandler } from './application/queries/get-all-users.query';\nimport { GetUserInfoQueryHandler } from './application/queries/get-user-info.query';\nimport { GetUserQueryHandler } from './application/queries/get-user.query';\nimport { CreateUserByAdminHandler } from './application/usecases/create-user.usecase';\nimport { DeleteUserHandler } from './application/usecases/delete-user.usecase';\nimport { RegisterUserHandler } from './application/usecases/register-user.usecase';\nimport { ResendEmailConfirmationHandler } from './application/usecases/resend-email-confirmation.usecase';\nimport { LoginUserHandler } from './application/usecases/login-user.usecase';\nimport { ConfirmUserEmailHandler } from './application/usecases/confirm-user-email.usecase';\nimport { ReissueTokensHandler } from './application/usecases/reissue-tokens.usecase';\nimport { RecoverPasswordHandler } from './application/usecases/recover-password.usecase';\nimport { ConfirmPasswordHandler } from './application/usecases/confirm-new-password.usecase';\nimport { LogoutCommandHandler } from './application/usecases/logout-user.usecase';\nimport { LogoutAnotherSessionHandler } from './application/usecases/logout-another-session.usecase';\nimport { LogoutOtherSessionHandler } from './application/usecases/logout-all-other-sessions.usecase';\nimport { UserAccountConfig } from './config/user-account.config';\nimport { GetUserSessionsQueryHandler } from './application/queries/get-all-user-sessions.query';\n\nconst queries = [\n  GetAllUsersQueryHandler,\n  GetUserInfoQueryHandler,\n  GetUserQueryHandler,\n  GetUserSessionsQueryHandler,\n];\nconst useCases = [\n  CreateUserByAdminHandler,\n  DeleteUserHandler,\n  RegisterUserHandler,\n  ResendEmailConfirmationHandler,\n  LoginUserHandler,\n  ConfirmUserEmailHandler,\n  ReissueTokensHandler,\n  RecoverPasswordHandler,\n  ConfirmPasswordHandler,\n  LogoutCommandHandler,\n  LogoutAnotherSessionHandler,\n  LogoutOtherSessionHandler,\n];\n\n@Module({\n  imports: [\n    JwtModule.register({}),\n    NotificationsModule,\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    MongooseModule.forFeature([\n      { name: DeviceAuthSession.name, schema: SessionSchema },\n    ]),\n    MongooseModule.forFeature([\n      { name: ApiRequest.name, schema: ApiRequestSchema },\n    ]),\n  ],\n  controllers: [UsersController, AuthController, DevicesSecurityController],\n  providers: [\n    UserAccountConfig,\n    {\n      provide: ACCESS_TOKEN_STRATEGY_INJECT_TOKEN,\n      useFactory: (configService: UserAccountConfig) => {\n        return new JwtService({\n          secret: configService.jwtAccessSecret,\n          signOptions: {\n            expiresIn: `${configService.accessTokenDuration}s`,\n          },\n        });\n      },\n      inject: [UserAccountConfig],\n    },\n    {\n      provide: REFRESH_TOKEN_STRATEGY_INJECT_TOKEN,\n      useFactory: (configService: UserAccountConfig) => {\n        return new JwtService({\n          secret: configService.jwtRefreshSecret,\n          signOptions: {\n            expiresIn: `${configService.refreshTokenDuration}s`,\n          },\n        });\n      },\n      inject: [UserAccountConfig],\n    },\n    UsersService,\n    UsersExternalService,\n    UsersRepository,\n    BasicAuthGuard,\n    JwtAuthGuard,\n    JwtStrategy,\n    RefreshTokenGuard,\n    HashService,\n    EmailTemplates,\n    DevicesSecurityRepository,\n    ApiRequestsStorage,\n    ...queries,\n    ...useCases,\n  ],\n  exports: [\n    BasicAuthGuard,\n    JwtAuthGuard,\n    UsersExternalService,\n    ApiRequestsStorage,\n    UserAccountConfig,\n  ],\n})\nexport class UserAccountsModule {}\n"],"names":["UserAccountsModule","queries","GetAllUsersQueryHandler","GetUserInfoQueryHandler","GetUserQueryHandler","GetUserSessionsQueryHandler","useCases","CreateUserByAdminHandler","DeleteUserHandler","RegisterUserHandler","ResendEmailConfirmationHandler","LoginUserHandler","ConfirmUserEmailHandler","ReissueTokensHandler","RecoverPasswordHandler","ConfirmPasswordHandler","LogoutCommandHandler","LogoutAnotherSessionHandler","LogoutOtherSessionHandler","imports","JwtModule","register","NotificationsModule","MongooseModule","forFeature","name","User","schema","UserSchema","DeviceAuthSession","SessionSchema","ApiRequest","ApiRequestSchema","controllers","UsersController","AuthController","DevicesSecurityController","providers","UserAccountConfig","provide","ACCESS_TOKEN_STRATEGY_INJECT_TOKEN","useFactory","configService","JwtService","secret","jwtAccessSecret","signOptions","expiresIn","accessTokenDuration","inject","REFRESH_TOKEN_STRATEGY_INJECT_TOKEN","jwtRefreshSecret","refreshTokenDuration","UsersService","UsersExternalService","UsersRepository","BasicAuthGuard","JwtAuthGuard","JwtStrategy","RefreshTokenGuard","HashService","EmailTemplates","DevicesSecurityRepository","ApiRequestsStorage","exports"],"mappings":";;;;+BA6HaA;;;eAAAA;;;wBA7HU;0BACQ;4BACE;iCACD;8BACH;iCACG;gCACD;iCACH;qBACU;+BACW;gCAClB;2CACW;8BACb;sCACK;gCACH;qCACK;2CACM;0CAInC;sCAC8B;6BACT;kCACiB;uCACV;kCACK;kCACA;8BACJ;mCACK;mCACP;qCACE;gDACW;kCACd;yCACO;sCACH;wCACE;2CACA;mCACF;6CACO;+CACF;mCACR;yCACU;;;;;;;AAE5C,MAAMC,UAAU;IACdC,yCAAuB;IACvBC,yCAAuB;IACvBC,iCAAmB;IACnBC,oDAA2B;CAC5B;AACD,MAAMC,WAAW;IACfC,2CAAwB;IACxBC,oCAAiB;IACjBC,wCAAmB;IACnBC,8DAA8B;IAC9BC,kCAAgB;IAChBC,gDAAuB;IACvBC,0CAAoB;IACpBC,8CAAsB;IACtBC,iDAAsB;IACtBC,uCAAoB;IACpBC,wDAA2B;IAC3BC,wDAAyB;CAC1B;AA+DM,IAAA,AAAMlB,qBAAN,MAAMA;AAAoB;;;QA5D/BmB,SAAS;YACPC,cAAS,CAACC,QAAQ,CAAC,CAAC;YACpBC,wCAAmB;YACnBC,wBAAc,CAACC,UAAU,CAAC;gBAAC;oBAAEC,MAAMC,gBAAI,CAACD,IAAI;oBAAEE,QAAQC,sBAAU;gBAAC;aAAE;YACnEL,wBAAc,CAACC,UAAU,CAAC;gBACxB;oBAAEC,MAAMI,gCAAiB,CAACJ,IAAI;oBAAEE,QAAQG,4BAAa;gBAAC;aACvD;YACDP,wBAAc,CAACC,UAAU,CAAC;gBACxB;oBAAEC,MAAMM,4BAAU,CAACN,IAAI;oBAAEE,QAAQK,kCAAgB;gBAAC;aACnD;SACF;QACDC,aAAa;YAACC,gCAAe;YAAEC,8BAAc;YAAEC,oDAAyB;SAAC;QACzEC,WAAW;YACTC,oCAAiB;YACjB;gBACEC,SAASC,4DAAkC;gBAC3CC,YAAY,CAACC;oBACX,OAAO,IAAIC,eAAU,CAAC;wBACpBC,QAAQF,cAAcG,eAAe;wBACrCC,aAAa;4BACXC,WAAW,GAAGL,cAAcM,mBAAmB,CAAC,CAAC,CAAC;wBACpD;oBACF;gBACF;gBACAC,QAAQ;oBAACX,oCAAiB;iBAAC;YAC7B;YACA;gBACEC,SAASW,6DAAmC;gBAC5CT,YAAY,CAACC;oBACX,OAAO,IAAIC,eAAU,CAAC;wBACpBC,QAAQF,cAAcS,gBAAgB;wBACtCL,aAAa;4BACXC,WAAW,GAAGL,cAAcU,oBAAoB,CAAC,CAAC,CAAC;wBACrD;oBACF;gBACF;gBACAH,QAAQ;oBAACX,oCAAiB;iBAAC;YAC7B;YACAe,0BAAY;YACZC,0CAAoB;YACpBC,gCAAe;YACfC,8BAAc;YACdC,0BAAY;YACZC,wBAAW;YACXC,uCAAiB;YACjBC,4BAAW;YACXC,8BAAc;YACdC,oDAAyB;YACzBC,yCAAkB;eACf9D;eACAK;SACJ;QACD0D,SAAS;YACPR,8BAAc;YACdC,0BAAY;YACZH,0CAAoB;YACpBS,yCAAkB;YAClBzB,oCAAiB;SAClB"}