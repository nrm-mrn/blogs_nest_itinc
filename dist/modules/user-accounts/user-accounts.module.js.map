{"version":3,"sources":["../../../src/modules/user-accounts/user-accounts.module.ts"],"sourcesContent":["import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './domain/user.entity';\nimport { UsersController } from './api/users.controller';\nimport { UsersService } from './application/users.service';\nimport { UsersQueryRepository } from './infrastructure/query/users.query-repository';\nimport { UsersRepository } from './infrastructure/users.repository';\nimport { BasicAuthGuard } from './guards/basic/basic-auth.guard';\nimport { HashService } from './application/passHash.service';\nimport { JwtModule, JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { ConfigurationType } from '../config/config.module';\nimport { DeviceAuthSession, SessionSchema } from './domain/session.entity';\nimport { AuthController } from './api/auth.controller';\nimport { DevicesSecurityController } from './api/devices-security.controller';\nimport { JwtAuthGuard } from './guards/bearer/jwt-auth.guard';\nimport { RefreshTokenGuard } from './guards/bearer/jwt-refresh-token-guard';\nimport { EmailTemplates } from '../notifications/email.templates';\nimport { EmailService } from '../notifications/email.service';\nimport { AuthService } from './application/auth.service';\nimport { SessionsService } from './application/devices-security.service';\nimport { NotificationsModule } from '../notifications/notifications.module';\nimport { DevicesSecurityRepository } from './infrastructure/devices-security.repository';\nimport { SessionsQueryRepository } from './infrastructure/query/devices-security.query-repository';\nimport {\n  ACCESS_TOKEN_STRATEGY_INJECT_TOKEN,\n  REFRESH_TOKEN_STRATEGY_INJECT_TOKEN,\n} from './constants/auth-token.inject-constants';\nimport { UsersExternalService } from './application/users.external-service';\nimport { JwtStrategy } from './guards/bearer/jwt.strategy';\nimport { ApiRequest, ApiRequestSchema } from './domain/apiRequest.entity';\nimport { ApiRequestsStorage } from './infrastructure/apiRequests.repository';\nimport { ThrottlerModule } from '@nestjs/throttler';\n\n@Module({\n  imports: [\n    JwtModule.register({}),\n    NotificationsModule,\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    MongooseModule.forFeature([\n      { name: DeviceAuthSession.name, schema: SessionSchema },\n    ]),\n    MongooseModule.forFeature([\n      { name: ApiRequest.name, schema: ApiRequestSchema },\n    ]),\n  ],\n  controllers: [UsersController, AuthController, DevicesSecurityController],\n  providers: [\n    {\n      provide: ACCESS_TOKEN_STRATEGY_INJECT_TOKEN,\n      useFactory: (configService: ConfigService<ConfigurationType>) => {\n        return new JwtService({\n          secret: configService.get('jwtAccessSecret'),\n          signOptions: {\n            expiresIn: `${configService.get('accessTokenDuration')}s`,\n          },\n        });\n      },\n      inject: [ConfigService],\n    },\n    {\n      provide: REFRESH_TOKEN_STRATEGY_INJECT_TOKEN,\n      useFactory: (configService: ConfigService<ConfigurationType>) => {\n        return new JwtService({\n          secret: configService.get('jwtRefreshSecret'),\n          signOptions: {\n            expiresIn: `${configService.get('refreshTokenDuration')}s`,\n          },\n        });\n      },\n      inject: [ConfigService],\n    },\n    UsersService,\n    UsersExternalService,\n    UsersQueryRepository,\n    UsersRepository,\n    BasicAuthGuard,\n    JwtAuthGuard,\n    JwtStrategy,\n    RefreshTokenGuard,\n    HashService,\n    EmailTemplates,\n    EmailService,\n    AuthService,\n    SessionsService,\n    DevicesSecurityRepository,\n    SessionsQueryRepository,\n    ApiRequestsStorage,\n  ],\n  exports: [\n    BasicAuthGuard,\n    JwtAuthGuard,\n    UsersExternalService,\n    ApiRequestsStorage,\n  ],\n})\nexport class UserAccountsModule {}\n"],"names":["UserAccountsModule","imports","JwtModule","register","NotificationsModule","MongooseModule","forFeature","name","User","schema","UserSchema","DeviceAuthSession","SessionSchema","ApiRequest","ApiRequestSchema","controllers","UsersController","AuthController","DevicesSecurityController","providers","provide","ACCESS_TOKEN_STRATEGY_INJECT_TOKEN","useFactory","configService","JwtService","secret","get","signOptions","expiresIn","inject","ConfigService","REFRESH_TOKEN_STRATEGY_INJECT_TOKEN","UsersService","UsersExternalService","UsersQueryRepository","UsersRepository","BasicAuthGuard","JwtAuthGuard","JwtStrategy","RefreshTokenGuard","HashService","EmailTemplates","EmailService","AuthService","SessionsService","DevicesSecurityRepository","SessionsQueryRepository","ApiRequestsStorage","exports"],"mappings":";;;;+BAgGaA;;;eAAAA;;;wBAhGU;0BACQ;4BACE;iCACD;8BACH;sCACQ;iCACL;gCACD;iCACH;qBACU;wBACR;+BAEmB;gCAClB;2CACW;8BACb;sCACK;gCACH;8BACF;6BACD;wCACI;qCACI;2CACM;gDACF;0CAIjC;sCAC8B;6BACT;kCACiB;uCACV;;;;;;;AAiE5B,IAAA,AAAMA,qBAAN,MAAMA;AAAoB;;;QA7D/BC,SAAS;YACPC,cAAS,CAACC,QAAQ,CAAC,CAAC;YACpBC,wCAAmB;YACnBC,wBAAc,CAACC,UAAU,CAAC;gBAAC;oBAAEC,MAAMC,gBAAI,CAACD,IAAI;oBAAEE,QAAQC,sBAAU;gBAAC;aAAE;YACnEL,wBAAc,CAACC,UAAU,CAAC;gBACxB;oBAAEC,MAAMI,gCAAiB,CAACJ,IAAI;oBAAEE,QAAQG,4BAAa;gBAAC;aACvD;YACDP,wBAAc,CAACC,UAAU,CAAC;gBACxB;oBAAEC,MAAMM,4BAAU,CAACN,IAAI;oBAAEE,QAAQK,kCAAgB;gBAAC;aACnD;SACF;QACDC,aAAa;YAACC,gCAAe;YAAEC,8BAAc;YAAEC,oDAAyB;SAAC;QACzEC,WAAW;YACT;gBACEC,SAASC,4DAAkC;gBAC3CC,YAAY,CAACC;oBACX,OAAO,IAAIC,eAAU,CAAC;wBACpBC,QAAQF,cAAcG,GAAG,CAAC;wBAC1BC,aAAa;4BACXC,WAAW,GAAGL,cAAcG,GAAG,CAAC,uBAAuB,CAAC,CAAC;wBAC3D;oBACF;gBACF;gBACAG,QAAQ;oBAACC,qBAAa;iBAAC;YACzB;YACA;gBACEV,SAASW,6DAAmC;gBAC5CT,YAAY,CAACC;oBACX,OAAO,IAAIC,eAAU,CAAC;wBACpBC,QAAQF,cAAcG,GAAG,CAAC;wBAC1BC,aAAa;4BACXC,WAAW,GAAGL,cAAcG,GAAG,CAAC,wBAAwB,CAAC,CAAC;wBAC5D;oBACF;gBACF;gBACAG,QAAQ;oBAACC,qBAAa;iBAAC;YACzB;YACAE,0BAAY;YACZC,0CAAoB;YACpBC,0CAAoB;YACpBC,gCAAe;YACfC,8BAAc;YACdC,0BAAY;YACZC,wBAAW;YACXC,uCAAiB;YACjBC,4BAAW;YACXC,8BAAc;YACdC,0BAAY;YACZC,wBAAW;YACXC,uCAAe;YACfC,oDAAyB;YACzBC,uDAAuB;YACvBC,yCAAkB;SACnB;QACDC,SAAS;YACPZ,8BAAc;YACdC,0BAAY;YACZJ,0CAAoB;YACpBc,yCAAkB;SACnB"}