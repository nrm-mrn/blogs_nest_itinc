{"version":3,"sources":["../../../../src/modules/user-accounts/infrastructure/users.repository.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User, UserDocument, UserModelType } from '../domain/user.entity';\nimport { DomainException } from 'src/core/exceptions/domain-exceptions';\nimport { DomainExceptionCode } from 'src/core/exceptions/domain-exception-codes';\nimport { UUID } from 'crypto';\n\n@Injectable()\nexport class UsersRepository {\n  constructor(\n    @InjectModel(User.name) private readonly UserModel: UserModelType,\n  ) {}\n\n  async save(user: UserDocument): Promise<string> {\n    await user.save();\n    return user._id.toString();\n  }\n\n  async findById(userId: string): Promise<UserDocument | null> {\n    const user = await this.UserModel.findOne({ _id: userId, deletedAt: null });\n    return user;\n  }\n\n  async findOrNotFoundFail(userId: string): Promise<UserDocument> {\n    const user = await this.UserModel.findOne({\n      _id: userId,\n      deletedAt: null,\n    }).orFail(\n      new DomainException({\n        code: DomainExceptionCode.NotFound,\n        message: 'User not found',\n      }),\n    );\n    return user;\n  }\n\n  async deleteUser(user: UserDocument) {\n    user.markDeleted();\n    return this.save(user);\n  }\n\n  async findUserByLoginOrEmail(input: string): Promise<UserDocument | null> {\n    const user = await this.UserModel.findOne()\n      .or([{ login: input }, { email: input }])\n      .where('deletedAt')\n      .equals(null);\n    return user;\n  }\n\n  async findUserByEmail(input: string): Promise<UserDocument | null> {\n    const user = await this.UserModel.findOne({\n      email: input,\n      deletedAt: null,\n    });\n    return user;\n  }\n\n  async findUserByEmailConfirmation(code: UUID): Promise<UserDocument | null> {\n    const user = await this.UserModel.findOne({\n      'emailConfirmation.confirmationCode': code,\n      deletedAt: null,\n    });\n    return user;\n  }\n\n  async getUserByPassRecovery(code: UUID): Promise<UserDocument | null> {\n    const user = await this.UserModel.findOne({\n      'passwordRecovery.confirmationCode': code,\n      deletedAt: null,\n    });\n    return user;\n  }\n}\n"],"names":["UsersRepository","save","user","_id","toString","findById","userId","UserModel","findOne","deletedAt","findOrNotFoundFail","orFail","DomainException","code","DomainExceptionCode","NotFound","message","deleteUser","markDeleted","findUserByLoginOrEmail","input","or","login","email","where","equals","findUserByEmail","findUserByEmailConfirmation","getUserByPassRecovery","constructor","name"],"mappings":";;;;+BAQaA;;;eAAAA;;;wBARc;0BACC;4BACsB;kCAClB;sCACI;;;;;;;;;;;;;;;AAI7B,IAAA,AAAMA,kBAAN,MAAMA;IAKX,MAAMC,KAAKC,IAAkB,EAAmB;QAC9C,MAAMA,KAAKD,IAAI;QACf,OAAOC,KAAKC,GAAG,CAACC,QAAQ;IAC1B;IAEA,MAAMC,SAASC,MAAc,EAAgC;QAC3D,MAAMJ,OAAO,MAAM,IAAI,CAACK,SAAS,CAACC,OAAO,CAAC;YAAEL,KAAKG;YAAQG,WAAW;QAAK;QACzE,OAAOP;IACT;IAEA,MAAMQ,mBAAmBJ,MAAc,EAAyB;QAC9D,MAAMJ,OAAO,MAAM,IAAI,CAACK,SAAS,CAACC,OAAO,CAAC;YACxCL,KAAKG;YACLG,WAAW;QACb,GAAGE,MAAM,CACP,IAAIC,iCAAe,CAAC;YAClBC,MAAMC,yCAAmB,CAACC,QAAQ;YAClCC,SAAS;QACX;QAEF,OAAOd;IACT;IAEA,MAAMe,WAAWf,IAAkB,EAAE;QACnCA,KAAKgB,WAAW;QAChB,OAAO,IAAI,CAACjB,IAAI,CAACC;IACnB;IAEA,MAAMiB,uBAAuBC,KAAa,EAAgC;QACxE,MAAMlB,OAAO,MAAM,IAAI,CAACK,SAAS,CAACC,OAAO,GACtCa,EAAE,CAAC;YAAC;gBAAEC,OAAOF;YAAM;YAAG;gBAAEG,OAAOH;YAAM;SAAE,EACvCI,KAAK,CAAC,aACNC,MAAM,CAAC;QACV,OAAOvB;IACT;IAEA,MAAMwB,gBAAgBN,KAAa,EAAgC;QACjE,MAAMlB,OAAO,MAAM,IAAI,CAACK,SAAS,CAACC,OAAO,CAAC;YACxCe,OAAOH;YACPX,WAAW;QACb;QACA,OAAOP;IACT;IAEA,MAAMyB,4BAA4Bd,IAAU,EAAgC;QAC1E,MAAMX,OAAO,MAAM,IAAI,CAACK,SAAS,CAACC,OAAO,CAAC;YACxC,sCAAsCK;YACtCJ,WAAW;QACb;QACA,OAAOP;IACT;IAEA,MAAM0B,sBAAsBf,IAAU,EAAgC;QACpE,MAAMX,OAAO,MAAM,IAAI,CAACK,SAAS,CAACC,OAAO,CAAC;YACxC,qCAAqCK;YACrCJ,WAAW;QACb;QACA,OAAOP;IACT;IA9DA2B,YACE,AAAyCtB,SAAwB,CACjE;aADyCA,YAAAA;IACxC;AA6DL;;;6DA9DsBuB"}