{"version":3,"sources":["../../../../../src/modules/user-accounts/infrastructure/query/devices-security.query-repository.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport {\n  DeviceAuthSession,\n  SessionModelType,\n} from '../../domain/session.entity';\nimport { SessionViewDto } from '../../api/view-dto/session.view-dto';\nimport { DomainException } from 'src/core/exceptions/domain-exceptions';\nimport { DomainExceptionCode } from 'src/core/exceptions/domain-exception-codes';\n\n@Injectable()\nexport class SessionsQueryRepository {\n  constructor(\n    @InjectModel(DeviceAuthSession.name)\n    private readonly SessionModel: SessionModelType,\n  ) {}\n  async getSessionsOrFail(userId: string): Promise<SessionViewDto[]> {\n    const sessions = await this.SessionModel.find({ userId }).exec();\n    if (!sessions.length) {\n      throw new DomainException({\n        code: DomainExceptionCode.InternalServerError,\n        message: 'Not found any sessions for a valid refresh token',\n      });\n    }\n    const res: SessionViewDto[] = [];\n    sessions.forEach((session) => {\n      res.push(SessionViewDto.mapToView(session));\n    });\n    return res;\n  }\n}\n"],"names":["SessionsQueryRepository","getSessionsOrFail","userId","sessions","SessionModel","find","exec","length","DomainException","code","DomainExceptionCode","InternalServerError","message","res","forEach","session","push","SessionViewDto","mapToView","constructor","name"],"mappings":";;;;+BAWaA;;;eAAAA;;;wBAXc;0BACC;+BAIrB;gCACwB;kCACC;sCACI;;;;;;;;;;;;;;;AAG7B,IAAA,AAAMA,0BAAN,MAAMA;IAKX,MAAMC,kBAAkBC,MAAc,EAA6B;QACjE,MAAMC,WAAW,MAAM,IAAI,CAACC,YAAY,CAACC,IAAI,CAAC;YAAEH;QAAO,GAAGI,IAAI;QAC9D,IAAI,CAACH,SAASI,MAAM,EAAE;YACpB,MAAM,IAAIC,iCAAe,CAAC;gBACxBC,MAAMC,yCAAmB,CAACC,mBAAmB;gBAC7CC,SAAS;YACX;QACF;QACA,MAAMC,MAAwB,EAAE;QAChCV,SAASW,OAAO,CAAC,CAACC;YAChBF,IAAIG,IAAI,CAACC,8BAAc,CAACC,SAAS,CAACH;QACpC;QACA,OAAOF;IACT;IAjBAM,YACE,AACiBf,YAA8B,CAC/C;aADiBA,eAAAA;IAChB;AAeL;;;6EAjBmCgB"}