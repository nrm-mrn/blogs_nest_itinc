{"version":3,"sources":["../../../../../src/modules/user-accounts/infrastructure/query/users.query-repository.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User, UserDocument, UserModelType } from '../../domain/user.entity';\nimport { GetUsersQueryParams } from '../../api/input-dto/get-users-query-params.input-dto';\nimport { FilterQuery } from 'mongoose';\nimport { PaginatedViewDto } from 'src/core/dto/base.paginated.view-dto';\nimport { MeViewDto, UserViewDto } from '../../api/view-dto/users.view-dto';\nimport { DomainException } from 'src/core/exceptions/domain-exceptions';\nimport { DomainExceptionCode } from 'src/core/exceptions/domain-exception-codes';\n\n@Injectable()\nexport class UsersQueryRepository {\n  constructor(\n    @InjectModel(User.name) private readonly UserModel: UserModelType,\n  ) {}\n\n  getFilter(dto: GetUsersQueryParams): FilterQuery<UserDocument> {\n    const filter: FilterQuery<UserDocument> = { deletedAt: null };\n    let searchLogin: FilterQuery<UserDocument> | null = null;\n    let searchEmail: FilterQuery<UserDocument> | null = null;\n    if ('searchLoginTerm' in dto && dto.searchLoginTerm !== null) {\n      searchLogin = { login: { $regex: dto.searchLoginTerm, $options: 'i' } };\n    }\n    if ('searchEmailTerm' in dto && dto.searchEmailTerm !== null) {\n      searchEmail = { email: { $regex: dto.searchEmailTerm, $options: 'i' } };\n    }\n    if (searchLogin) {\n      if (searchEmail) {\n        return { ...filter, $or: [searchEmail, searchLogin] };\n      }\n      return { ...filter, $or: [searchLogin] };\n    }\n    if (searchEmail) {\n      return { ...filter, $or: [searchEmail] };\n    }\n    return filter;\n  }\n\n  async getAllUsers(\n    dto: GetUsersQueryParams,\n  ): Promise<PaginatedViewDto<UserViewDto[]>> {\n    const filter = this.getFilter(dto);\n    const users = await this.UserModel.find(filter)\n      .sort({ [dto.sortBy]: dto.sortDirection })\n      .skip(dto.calculateSkip())\n      .limit(dto.pageSize)\n      .exec();\n    const total = await this.UserModel.countDocuments(filter).exec();\n    const usersView = users.map((user) => {\n      return UserViewDto.mapToView(user);\n    });\n    return PaginatedViewDto.mapToView({\n      items: usersView,\n      page: dto.pageNumber,\n      size: dto.pageSize,\n      totalCount: total,\n    });\n  }\n\n  async getUserById(id: string): Promise<UserViewDto | null> {\n    //for users router post method\n    const user = await this.UserModel.findOne({ _id: id, deletedAt: null });\n    if (!user) {\n      return null;\n    }\n    return {\n      id: user._id.toString(),\n      login: user.login,\n      email: user.email,\n      createdAt: user.createdAt.toISOString(),\n    };\n  }\n\n  async getUserInfoOrFail(id: string): Promise<MeViewDto> {\n    const user = await this.UserModel.findOne({\n      _id: id,\n      deletedAt: null,\n    }).orFail(\n      new DomainException({\n        code: DomainExceptionCode.InternalServerError,\n        message: 'user not found by access token info',\n      }),\n    );\n    return MeViewDto.mapToView(user);\n  }\n}\n"],"names":["UsersQueryRepository","getFilter","dto","filter","deletedAt","searchLogin","searchEmail","searchLoginTerm","login","$regex","$options","searchEmailTerm","email","$or","getAllUsers","users","UserModel","find","sort","sortBy","sortDirection","skip","calculateSkip","limit","pageSize","exec","total","countDocuments","usersView","map","user","UserViewDto","mapToView","PaginatedViewDto","items","page","pageNumber","size","totalCount","getUserById","id","findOne","_id","toString","createdAt","toISOString","getUserInfoOrFail","orFail","DomainException","code","DomainExceptionCode","InternalServerError","message","MeViewDto","constructor","name"],"mappings":";;;;+BAWaA;;;eAAAA;;;wBAXc;0BACC;4BACsB;sCAGjB;8BACM;kCACP;sCACI;;;;;;;;;;;;;;;AAG7B,IAAA,AAAMA,uBAAN,MAAMA;IAKXC,UAAUC,GAAwB,EAA6B;QAC7D,MAAMC,SAAoC;YAAEC,WAAW;QAAK;QAC5D,IAAIC,cAAgD;QACpD,IAAIC,cAAgD;QACpD,IAAI,qBAAqBJ,OAAOA,IAAIK,eAAe,KAAK,MAAM;YAC5DF,cAAc;gBAAEG,OAAO;oBAAEC,QAAQP,IAAIK,eAAe;oBAAEG,UAAU;gBAAI;YAAE;QACxE;QACA,IAAI,qBAAqBR,OAAOA,IAAIS,eAAe,KAAK,MAAM;YAC5DL,cAAc;gBAAEM,OAAO;oBAAEH,QAAQP,IAAIS,eAAe;oBAAED,UAAU;gBAAI;YAAE;QACxE;QACA,IAAIL,aAAa;YACf,IAAIC,aAAa;gBACf,OAAO;oBAAE,GAAGH,MAAM;oBAAEU,KAAK;wBAACP;wBAAaD;qBAAY;gBAAC;YACtD;YACA,OAAO;gBAAE,GAAGF,MAAM;gBAAEU,KAAK;oBAACR;iBAAY;YAAC;QACzC;QACA,IAAIC,aAAa;YACf,OAAO;gBAAE,GAAGH,MAAM;gBAAEU,KAAK;oBAACP;iBAAY;YAAC;QACzC;QACA,OAAOH;IACT;IAEA,MAAMW,YACJZ,GAAwB,EACkB;QAC1C,MAAMC,SAAS,IAAI,CAACF,SAAS,CAACC;QAC9B,MAAMa,QAAQ,MAAM,IAAI,CAACC,SAAS,CAACC,IAAI,CAACd,QACrCe,IAAI,CAAC;YAAE,CAAChB,IAAIiB,MAAM,CAAC,EAAEjB,IAAIkB,aAAa;QAAC,GACvCC,IAAI,CAACnB,IAAIoB,aAAa,IACtBC,KAAK,CAACrB,IAAIsB,QAAQ,EAClBC,IAAI;QACP,MAAMC,QAAQ,MAAM,IAAI,CAACV,SAAS,CAACW,cAAc,CAACxB,QAAQsB,IAAI;QAC9D,MAAMG,YAAYb,MAAMc,GAAG,CAAC,CAACC;YAC3B,OAAOC,yBAAW,CAACC,SAAS,CAACF;QAC/B;QACA,OAAOG,sCAAgB,CAACD,SAAS,CAAC;YAChCE,OAAON;YACPO,MAAMjC,IAAIkC,UAAU;YACpBC,MAAMnC,IAAIsB,QAAQ;YAClBc,YAAYZ;QACd;IACF;IAEA,MAAMa,YAAYC,EAAU,EAA+B;QACzD,8BAA8B;QAC9B,MAAMV,OAAO,MAAM,IAAI,CAACd,SAAS,CAACyB,OAAO,CAAC;YAAEC,KAAKF;YAAIpC,WAAW;QAAK;QACrE,IAAI,CAAC0B,MAAM;YACT,OAAO;QACT;QACA,OAAO;YACLU,IAAIV,KAAKY,GAAG,CAACC,QAAQ;YACrBnC,OAAOsB,KAAKtB,KAAK;YACjBI,OAAOkB,KAAKlB,KAAK;YACjBgC,WAAWd,KAAKc,SAAS,CAACC,WAAW;QACvC;IACF;IAEA,MAAMC,kBAAkBN,EAAU,EAAsB;QACtD,MAAMV,OAAO,MAAM,IAAI,CAACd,SAAS,CAACyB,OAAO,CAAC;YACxCC,KAAKF;YACLpC,WAAW;QACb,GAAG2C,MAAM,CACP,IAAIC,iCAAe,CAAC;YAClBC,MAAMC,yCAAmB,CAACC,mBAAmB;YAC7CC,SAAS;QACX;QAEF,OAAOC,uBAAS,CAACrB,SAAS,CAACF;IAC7B;IAxEAwB,YACE,AAAyCtC,SAAwB,CACjE;aADyCA,YAAAA;IACxC;AAuEL;;;6DAxEsBuC"}