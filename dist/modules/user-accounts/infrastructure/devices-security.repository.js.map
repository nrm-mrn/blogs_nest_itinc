{"version":3,"sources":["../../../../src/modules/user-accounts/infrastructure/devices-security.repository.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport {\n  DeviceAuthSession,\n  SessionDocument,\n  SessionModelType,\n} from '../domain/session.entity';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { DomainException } from 'src/core/exceptions/domain-exceptions';\nimport { DomainExceptionCode } from 'src/core/exceptions/domain-exception-codes';\n\n@Injectable()\nexport class DevicesSecurityRepository {\n  constructor(\n    @InjectModel(DeviceAuthSession.name)\n    private readonly SessionModel: SessionModelType,\n  ) {}\n  async save(session: SessionDocument): Promise<string> {\n    const res = await session.save();\n    return res._id.toString();\n  }\n\n  async deleteOtherSessions(iat: number, userId: string): Promise<void> {\n    const result = await this.SessionModel.deleteMany({\n      userId,\n      iat: { $ne: iat },\n    }).exec();\n    if (result.acknowledged) {\n      return;\n    }\n    throw new DomainException({\n      code: DomainExceptionCode.InternalServerError,\n      message: 'Failed to delete sessions, operation not acknowledged by db',\n    });\n  }\n\n  async deleteSession(session: SessionDocument): Promise<void> {\n    const result = await session.deleteOne();\n    if (result.acknowledged) {\n      return;\n    }\n    throw new DomainException({\n      code: DomainExceptionCode.InternalServerError,\n      message: 'Failed to delete the session, operation not acknowledged by db',\n    });\n  }\n\n  async findSessionOrFail(\n    deviceId: string,\n    iat: number,\n  ): Promise<SessionDocument> {\n    const session = await this.SessionModel.findOne({\n      _id: deviceId,\n      iat,\n    }).orFail(\n      new DomainException({\n        code: DomainExceptionCode.Unauthorized,\n        message: 'Session does not exist or already expired',\n      }),\n    );\n    return session;\n  }\n\n  //WARN: Unsafe without checking iat of the token presenter\n  async findSessionByDeviceId(\n    deviceId: string,\n  ): Promise<SessionDocument | null> {\n    return this.SessionModel.findById(deviceId);\n  }\n}\n"],"names":["DevicesSecurityRepository","save","session","res","_id","toString","deleteOtherSessions","iat","userId","result","SessionModel","deleteMany","$ne","exec","acknowledged","DomainException","code","DomainExceptionCode","InternalServerError","message","deleteSession","deleteOne","findSessionOrFail","deviceId","findOne","orFail","Unauthorized","findSessionByDeviceId","findById","constructor","name"],"mappings":";;;;+BAWaA;;;eAAAA;;;wBAXc;+BAKpB;0BACqB;kCACI;sCACI;;;;;;;;;;;;;;;AAG7B,IAAA,AAAMA,4BAAN,MAAMA;IAKX,MAAMC,KAAKC,OAAwB,EAAmB;QACpD,MAAMC,MAAM,MAAMD,QAAQD,IAAI;QAC9B,OAAOE,IAAIC,GAAG,CAACC,QAAQ;IACzB;IAEA,MAAMC,oBAAoBC,GAAW,EAAEC,MAAc,EAAiB;QACpE,MAAMC,SAAS,MAAM,IAAI,CAACC,YAAY,CAACC,UAAU,CAAC;YAChDH;YACAD,KAAK;gBAAEK,KAAKL;YAAI;QAClB,GAAGM,IAAI;QACP,IAAIJ,OAAOK,YAAY,EAAE;YACvB;QACF;QACA,MAAM,IAAIC,iCAAe,CAAC;YACxBC,MAAMC,yCAAmB,CAACC,mBAAmB;YAC7CC,SAAS;QACX;IACF;IAEA,MAAMC,cAAclB,OAAwB,EAAiB;QAC3D,MAAMO,SAAS,MAAMP,QAAQmB,SAAS;QACtC,IAAIZ,OAAOK,YAAY,EAAE;YACvB;QACF;QACA,MAAM,IAAIC,iCAAe,CAAC;YACxBC,MAAMC,yCAAmB,CAACC,mBAAmB;YAC7CC,SAAS;QACX;IACF;IAEA,MAAMG,kBACJC,QAAgB,EAChBhB,GAAW,EACe;QAC1B,MAAML,UAAU,MAAM,IAAI,CAACQ,YAAY,CAACc,OAAO,CAAC;YAC9CpB,KAAKmB;YACLhB;QACF,GAAGkB,MAAM,CACP,IAAIV,iCAAe,CAAC;YAClBC,MAAMC,yCAAmB,CAACS,YAAY;YACtCP,SAAS;QACX;QAEF,OAAOjB;IACT;IAEA,0DAA0D;IAC1D,MAAMyB,sBACJJ,QAAgB,EACiB;QACjC,OAAO,IAAI,CAACb,YAAY,CAACkB,QAAQ,CAACL;IACpC;IAvDAM,YACE,AACiBnB,YAA8B,CAC/C;aADiBA,eAAAA;IAChB;AAqDL;;;6EAvDmCoB"}