{"version":3,"sources":["../../../../src/modules/user-accounts/infrastructure/apiRequests.repository.ts"],"sourcesContent":["import { InjectModel } from '@nestjs/mongoose';\nimport { ThrottlerStorage } from '@nestjs/throttler';\nimport { ThrottlerStorageRecord } from '@nestjs/throttler/dist/throttler-storage-record.interface';\nimport { ApiRequest, ApiRequestModelType } from '../domain/apiRequest.entity';\n\nexport class ApiRequestsStorage implements ThrottlerStorage {\n  constructor(\n    @InjectModel(ApiRequest.name)\n    private readonly ApiRequestModel: ApiRequestModelType,\n  ) {}\n\n  async increment(\n    key: string,\n    ttl: number,\n    limit: number,\n    blockDuration: number,\n    throttlerName: string,\n  ): Promise<ThrottlerStorageRecord> {\n    const now = Date.now();\n    const windowStart = now - ttl;\n\n    const record = await this.ApiRequestModel.findOne({ key }).exec();\n\n    if (!record) {\n      const newRec = this.ApiRequestModel.createApiRequest({\n        key,\n        timestamps: [now],\n      });\n      await newRec.save();\n      return {\n        totalHits: 1,\n        timeToExpire: ttl,\n        isBlocked: false,\n        timeToBlockExpire: 0,\n      };\n    }\n\n    if (record.blockedUntil && now < record.blockedUntil) {\n      const timeToBlockExpire = record.blockedUntil - now;\n      return {\n        totalHits: limit,\n        timeToExpire: 0,\n        timeToBlockExpire,\n        isBlocked: true,\n      };\n    }\n\n    // Remove expired timestamps\n    const recentHits = record.timestamps.filter((ts) => ts > windowStart);\n    recentHits.push(now);\n\n    const totalHits = recentHits.length;\n    const isBlocked = totalHits > limit;\n\n    if (isBlocked) {\n      record.blockedUntil = now + blockDuration;\n      await record.save();\n      return {\n        totalHits,\n        timeToExpire: 0,\n        timeToBlockExpire: blockDuration,\n        isBlocked: true,\n      };\n    }\n\n    record.timestamps = recentHits;\n    record.blockedUntil = 0;\n    await record.save();\n\n    const timeToExpire = ttl - (now - recentHits[0]);\n\n    return {\n      totalHits,\n      timeToExpire,\n      isBlocked: false,\n      timeToBlockExpire: 0,\n    };\n  }\n}\n"],"names":["ApiRequestsStorage","increment","key","ttl","limit","blockDuration","throttlerName","now","Date","windowStart","record","ApiRequestModel","findOne","exec","newRec","createApiRequest","timestamps","save","totalHits","timeToExpire","isBlocked","timeToBlockExpire","blockedUntil","recentHits","filter","ts","push","length","constructor","name"],"mappings":";;;;+BAKaA;;;eAAAA;;;0BALe;kCAGoB;;;;;;;;;;;;;;;AAEzC,IAAA,AAAMA,qBAAN,MAAMA;IAMX,MAAMC,UACJC,GAAW,EACXC,GAAW,EACXC,KAAa,EACbC,aAAqB,EACrBC,aAAqB,EACY;QACjC,MAAMC,MAAMC,KAAKD,GAAG;QACpB,MAAME,cAAcF,MAAMJ;QAE1B,MAAMO,SAAS,MAAM,IAAI,CAACC,eAAe,CAACC,OAAO,CAAC;YAAEV;QAAI,GAAGW,IAAI;QAE/D,IAAI,CAACH,QAAQ;YACX,MAAMI,SAAS,IAAI,CAACH,eAAe,CAACI,gBAAgB,CAAC;gBACnDb;gBACAc,YAAY;oBAACT;iBAAI;YACnB;YACA,MAAMO,OAAOG,IAAI;YACjB,OAAO;gBACLC,WAAW;gBACXC,cAAchB;gBACdiB,WAAW;gBACXC,mBAAmB;YACrB;QACF;QAEA,IAAIX,OAAOY,YAAY,IAAIf,MAAMG,OAAOY,YAAY,EAAE;YACpD,MAAMD,oBAAoBX,OAAOY,YAAY,GAAGf;YAChD,OAAO;gBACLW,WAAWd;gBACXe,cAAc;gBACdE;gBACAD,WAAW;YACb;QACF;QAEA,4BAA4B;QAC5B,MAAMG,aAAab,OAAOM,UAAU,CAACQ,MAAM,CAAC,CAACC,KAAOA,KAAKhB;QACzDc,WAAWG,IAAI,CAACnB;QAEhB,MAAMW,YAAYK,WAAWI,MAAM;QACnC,MAAMP,YAAYF,YAAYd;QAE9B,IAAIgB,WAAW;YACbV,OAAOY,YAAY,GAAGf,MAAMF;YAC5B,MAAMK,OAAOO,IAAI;YACjB,OAAO;gBACLC;gBACAC,cAAc;gBACdE,mBAAmBhB;gBACnBe,WAAW;YACb;QACF;QAEAV,OAAOM,UAAU,GAAGO;QACpBb,OAAOY,YAAY,GAAG;QACtB,MAAMZ,OAAOO,IAAI;QAEjB,MAAME,eAAehB,MAAOI,CAAAA,MAAMgB,UAAU,CAAC,EAAE,AAAD;QAE9C,OAAO;YACLL;YACAC;YACAC,WAAW;YACXC,mBAAmB;QACrB;IACF;IAvEAO,YACE,AACiBjB,eAAoC,CACrD;aADiBA,kBAAAA;IAChB;AAqEL;;yEAvE4BkB"}