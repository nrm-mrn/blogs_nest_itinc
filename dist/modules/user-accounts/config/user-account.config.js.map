{"version":3,"sources":["../../../../src/modules/user-accounts/config/user-account.config.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { IsBoolean, IsNumber, IsString } from 'class-validator';\nimport { configValidationUtility } from 'src/setup/config-validation.utility';\n\n@Injectable()\nexport class UserAccountConfig {\n  @IsString({\n    message: 'Set Env variable ADMIN_USERNAME',\n  })\n  adminUsername: string = this.configService.get('ADMIN_USERNAME');\n\n  @IsString({\n    message: 'Set Env variable ADMIN_PASSWORD',\n  })\n  adminPassword: string = this.configService.get('ADMIN_PASSWORD');\n\n  @IsString({\n    message: 'Set Env variable JWT_ACCESS_TOKEN_SECRET to any secure string',\n  })\n  jwtAccessSecret: string = this.configService.get('JWT_ACCESS_TOKEN_SECRET');\n\n  @IsNumber(\n    {},\n    {\n      message: 'Set JWT_EXP_TIME_IN_SECONDS env variable, example: 10',\n    },\n  )\n  accessTokenDuration: number = Number(\n    this.configService.get('JWT_EXP_TIME_IN_SECONDS'),\n  );\n\n  @IsString({\n    message: 'Set Env variable JWT_REFRESH_TOKEN_SECRET to any secure string',\n  })\n  jwtRefreshSecret: string = this.configService.get('JWT_REFRESH_TOKEN_SECRET');\n\n  @IsNumber(\n    {},\n    {\n      message: 'Set REFRESHT_TIME_IN_SECONDS env variable, example: 20',\n    },\n  )\n  refreshTokenDuration: number = Number(\n    this.configService.get('REFRESHT_TIME_IN_SECONDS'),\n  );\n\n  @IsString({\n    message:\n      'Set env variable CONFIRMATION_CODES_DOMAIN to a valid domain name of the app, example: blogs-nest-itinc.vercel.app',\n  })\n  confirmationCodesDomain: string = this.configService.get(\n    'CONFIRMATION_CODES_DOMAIN',\n  );\n\n  @IsNumber(\n    {},\n    {\n      message:\n        'Set PASS_RECOVERY_EXPIRATION_IN_MINUTES env variable, example: 10',\n    },\n  )\n  passRecoveryExpiration: number = Number(\n    this.configService.get('PASS_RECOVERY_EXPIRATION_IN_MINUTES'),\n  );\n\n  @IsNumber(\n    {},\n    {\n      message:\n        'Set EMAIL_RECOVERY_EXPIRATION_IN_MINUTES env variable, example: 10',\n    },\n  )\n  emailExpiration: number = Number(\n    this.configService.get('EMAIL_RECOVERY_EXPIRATION_IN_MINUTES'),\n  );\n\n  @IsBoolean({\n    message:\n      'Set env variable SECURE_REFRESHTOKEN_COOKIE to enable/disable secure cookie, example: true/false',\n  })\n  secureCookie = configValidationUtility.convertToBoolean(\n    this.configService.get('SECURE_REFRESHTOKEN_COOKIE'),\n  ) as boolean;\n\n  constructor(private readonly configService: ConfigService<any, true>) {\n    configValidationUtility.validateConfig(this);\n  }\n}\n"],"names":["UserAccountConfig","constructor","configService","adminUsername","get","adminPassword","jwtAccessSecret","accessTokenDuration","Number","jwtRefreshSecret","refreshTokenDuration","confirmationCodesDomain","passRecoveryExpiration","emailExpiration","secureCookie","configValidationUtility","convertToBoolean","validateConfig","message"],"mappings":";;;;+BAMaA;;;eAAAA;;;wBANc;wBACG;gCACgB;yCACN;;;;;;;;;;AAGjC,IAAA,AAAMA,oBAAN,MAAMA;IA+EXC,YAAY,AAAiBC,aAAuC,CAAE;aAAzCA,gBAAAA;aA3E7BC,gBAAwB,IAAI,CAACD,aAAa,CAACE,GAAG,CAAC;aAK/CC,gBAAwB,IAAI,CAACH,aAAa,CAACE,GAAG,CAAC;aAK/CE,kBAA0B,IAAI,CAACJ,aAAa,CAACE,GAAG,CAAC;aAQjDG,sBAA8BC,OAC5B,IAAI,CAACN,aAAa,CAACE,GAAG,CAAC;aAMzBK,mBAA2B,IAAI,CAACP,aAAa,CAACE,GAAG,CAAC;aAQlDM,uBAA+BF,OAC7B,IAAI,CAACN,aAAa,CAACE,GAAG,CAAC;aAOzBO,0BAAkC,IAAI,CAACT,aAAa,CAACE,GAAG,CACtD;aAUFQ,yBAAiCJ,OAC/B,IAAI,CAACN,aAAa,CAACE,GAAG,CAAC;aAUzBS,kBAA0BL,OACxB,IAAI,CAACN,aAAa,CAACE,GAAG,CAAC;aAOzBU,eAAeC,gDAAuB,CAACC,gBAAgB,CACrD,IAAI,CAACd,aAAa,CAACE,GAAG,CAAC;QAIvBW,gDAAuB,CAACE,cAAc,CAAC,IAAI;IAC7C;AACF;;;QAhFIC,SAAS;;;;;;QAKTA,SAAS;;;;;;QAKTA,SAAS;;;;;;QAOPA,SAAS;;;;;;QAQXA,SAAS;;;;;;QAOPA,SAAS;;;;;;QAQXA,SACE;;;;;;QASAA,SACE;;;;;;QAUFA,SACE;;;;;;QAQJA,SACE"}