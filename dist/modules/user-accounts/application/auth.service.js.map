{"version":3,"sources":["../../../../src/modules/user-accounts/application/auth.service.ts"],"sourcesContent":["import { JwtService } from '@nestjs/jwt';\nimport { HashService } from './passHash.service';\nimport { UsersService } from './users.service';\nimport { MailerService } from '@nestjs-modules/mailer';\nimport { EmailTemplates } from 'src/modules/notifications/email.templates';\nimport { LoginDto } from '../dto/login.dto';\nimport { AuthSuccessDto } from '../dto/auth-success.dto';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { DomainException } from 'src/core/exceptions/domain-exceptions';\nimport { DomainExceptionCode } from 'src/core/exceptions/domain-exception-codes';\nimport { CreateRefreshTokenDto } from '../dto/create-refresh-token.dto';\nimport mongoose from 'mongoose';\nimport { CreateAccessTokenDto } from '../dto/create-access-token.dto';\nimport { CreateSessionDto } from '../dto/create-session.dto';\nimport { SessionsService } from './devices-security.service';\nimport { UserInputModel } from '../dto/user-input.dto';\nimport { UUID } from 'crypto';\nimport { ConfirmPasswordDto } from '../dto/confirm-password.dto';\nimport {\n  ACCESS_TOKEN_STRATEGY_INJECT_TOKEN,\n  REFRESH_TOKEN_STRATEGY_INJECT_TOKEN,\n} from '../constants/auth-token.inject-constants';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly passHashService: HashService,\n    @Inject(ACCESS_TOKEN_STRATEGY_INJECT_TOKEN)\n    private readonly jwtAccesTokService: JwtService,\n    @Inject(REFRESH_TOKEN_STRATEGY_INJECT_TOKEN)\n    private readonly jwtRefreshTokService: JwtService,\n    private readonly sessionsService: SessionsService,\n    private readonly mailerService: MailerService,\n    private readonly templateFactory: EmailTemplates,\n  ) {}\n\n  async checkCredentials(credentials: LoginDto): Promise<AuthSuccessDto> {\n    const user = await this.usersService.getUserByLoginOrEmail(\n      credentials.loginOrEmail,\n    );\n    if (!user) {\n      throw new DomainException({\n        code: DomainExceptionCode.Unauthorized,\n        message: 'Wrong login or password',\n      });\n    }\n    const isValidPass = await this.passHashService.compareHash(\n      credentials.password,\n      user.passwordHash,\n    );\n    if (!isValidPass) {\n      throw new DomainException({\n        code: DomainExceptionCode.Unauthorized,\n        message: 'Wrong login or password',\n      });\n    }\n    const rtInput: CreateRefreshTokenDto = {\n      userId: user._id.toString(),\n      deviceId: new mongoose.Types.ObjectId().toString(),\n      iat: new Date().getTime(),\n    };\n    const accTInput: CreateAccessTokenDto = {\n      id: user._id.toString(),\n    };\n    const accessToken = this.jwtAccesTokService.sign(accTInput);\n    const refreshToken = this.jwtRefreshTokService.sign(rtInput);\n\n    const sessionInput: CreateSessionDto = {\n      deviceId: rtInput.deviceId,\n      userId: rtInput.userId,\n      iat: new Date(rtInput.iat),\n      ip: credentials.ip,\n      title: credentials.title,\n    };\n    await this.sessionsService.saveSession(sessionInput);\n\n    return { accessToken, refreshToken };\n  }\n\n  async registerUser(newUserDto: UserInputModel): Promise<{ userId }> {\n    const { userId } = await this.usersService.createUser(newUserDto);\n\n    const user = await this.usersService.findUserById(userId);\n\n    if (!user) {\n      throw new DomainException({\n        code: DomainExceptionCode.InternalServerError,\n        message: 'Failed to create a new user entry',\n      });\n    }\n\n    const emailConfirmation = await this.usersService.createEmailConfirmation(\n      user.email,\n    );\n\n    const email = this.templateFactory.generateRegistrationEmail(\n      emailConfirmation.confirmationCode,\n    );\n\n    await this.mailerService.sendMail({\n      to: user.email,\n      subject: 'Bloggers platform registration',\n      html: email,\n    });\n    // .catch((err) => console.error(`error sending email: ${err}`));\n\n    return { userId };\n  }\n\n  async confirmEmail(code: string): Promise<void> {\n    const confirmationCode = code as UUID;\n    await this.usersService.confirmEmail(confirmationCode);\n    return;\n  }\n\n  async resendConfirmation(email: string): Promise<void> {\n    const newConfirmation =\n      await this.usersService.createEmailConfirmation(email);\n    const emailTemplate = this.templateFactory.generateRegistrationEmail(\n      newConfirmation.confirmationCode,\n    );\n    await this.mailerService.sendMail({\n      to: email,\n      subject: 'Bloggers platform registration',\n      html: emailTemplate,\n    });\n    // .catch((err) => console.error(`error sending email: ${err}`));\n    return;\n  }\n\n  async reissueTokensPair(token: string): Promise<AuthSuccessDto> {\n    const payload =\n      this.jwtRefreshTokService.decode<CreateRefreshTokenDto>(token);\n\n    await this.sessionsService.getSession(payload.deviceId, payload.iat);\n\n    const rtInput: CreateRefreshTokenDto = {\n      userId: payload.userId,\n      deviceId: new mongoose.Types.ObjectId().toString(),\n      iat: new Date().getTime(),\n    };\n    const refreshToken = this.jwtRefreshTokService.sign(rtInput);\n    const accessToken = this.jwtAccesTokService.sign({ id: payload.userId });\n    await this.sessionsService.refreshSession(payload.deviceId, rtInput.iat);\n    return { accessToken, refreshToken };\n  }\n\n  async recoverPassword(email: string): Promise<void> {\n    const recoveryObj = await this.usersService.setPasswordRecovery(email);\n    if (!recoveryObj) {\n      return;\n    }\n    const emailTemplate = this.templateFactory.generatePassRecoveryEmail(\n      recoveryObj.confirmationCode,\n    );\n\n    await this.mailerService.sendMail({\n      to: email,\n      subject: 'Blogs service password recovery request',\n      html: emailTemplate,\n    });\n    // .catch((err) => console.error(`Error sending email: ${err}`));\n    return;\n  }\n\n  async confirmPassword(input: ConfirmPasswordDto): Promise<void> {\n    await this.usersService.confirmPassword(input);\n  }\n}\n"],"names":["AuthService","checkCredentials","credentials","user","usersService","getUserByLoginOrEmail","loginOrEmail","DomainException","code","DomainExceptionCode","Unauthorized","message","isValidPass","passHashService","compareHash","password","passwordHash","rtInput","userId","_id","toString","deviceId","mongoose","Types","ObjectId","iat","Date","getTime","accTInput","id","accessToken","jwtAccesTokService","sign","refreshToken","jwtRefreshTokService","sessionInput","ip","title","sessionsService","saveSession","registerUser","newUserDto","createUser","findUserById","InternalServerError","emailConfirmation","createEmailConfirmation","email","templateFactory","generateRegistrationEmail","confirmationCode","mailerService","sendMail","to","subject","html","confirmEmail","resendConfirmation","newConfirmation","emailTemplate","reissueTokensPair","token","payload","decode","getSession","refreshSession","recoverPassword","recoveryObj","setPasswordRecovery","generatePassRecoveryEmail","confirmPassword","input","constructor"],"mappings":"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"}