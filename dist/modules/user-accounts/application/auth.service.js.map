{"version":3,"sources":["../../../../src/modules/user-accounts/application/auth.service.ts"],"sourcesContent":["import { JwtService } from '@nestjs/jwt';\nimport { HashService } from './passHash.service';\nimport { UsersService } from './users.service';\nimport { MailerService } from '@nestjs-modules/mailer';\nimport { EmailTemplates } from 'src/modules/notifications/email.templates';\nimport { LoginDto } from '../dto/login.dto';\nimport { AuthSuccessDto } from '../dto/auth-success.dto';\nimport { Injectable } from '@nestjs/common';\nimport { DomainException } from 'src/core/exceptions/domain-exceptions';\nimport { DomainExceptionCode } from 'src/core/exceptions/domain-exception-codes';\nimport { CreateRefreshTokenDto } from '../dto/create-refresh-token.dto';\nimport mongoose from 'mongoose';\nimport { CreateAccessTokenDto } from '../dto/create-access-token.dto';\nimport { CreateSessionDto } from '../dto/create-session.dto';\nimport { SessionsService } from './devices-security.service';\nimport { UserInputModel } from '../dto/user-input.dto';\nimport { UUID } from 'crypto';\nimport { ConfirmPasswordDto } from '../dto/confirm-password.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly passHashService: HashService,\n    private readonly jwtService: JwtService,\n    private readonly sessionsService: SessionsService,\n    private readonly mailerService: MailerService,\n    private readonly templateFactory: EmailTemplates,\n  ) {}\n\n  async checkCredentials(credentials: LoginDto): Promise<AuthSuccessDto> {\n    const user = await this.usersService.getUserByLoginOrEmail(\n      credentials.loginOrEmail,\n    );\n    if (!user) {\n      throw new DomainException({\n        code: DomainExceptionCode.Unauthorized,\n        message: 'Wrong login or password',\n      });\n    }\n    const isValidPass = await this.passHashService.compareHash(\n      credentials.password,\n      user.passwordHash,\n    );\n    if (!isValidPass) {\n      throw new DomainException({\n        code: DomainExceptionCode.Unauthorized,\n        message: 'Wrong login or password',\n      });\n    }\n    const rtInput: CreateRefreshTokenDto = {\n      userId: user._id.toString(),\n      deviceId: new mongoose.Types.ObjectId().toString(),\n      iat: new Date().getTime(),\n    };\n    const accTInput: CreateAccessTokenDto = {\n      id: user._id.toString(),\n    };\n    const accessToken = this.jwtService.sign(accTInput);\n    const refreshToken = this.jwtService.sign(rtInput);\n\n    const sessionInput: CreateSessionDto = {\n      deviceId: rtInput.deviceId,\n      userId: rtInput.userId,\n      iat: new Date(rtInput.iat),\n      ip: credentials.ip,\n      title: credentials.title,\n    };\n    await this.sessionsService.saveSession(sessionInput);\n\n    return { accessToken, refreshToken };\n  }\n\n  async registerUser(newUserDto: UserInputModel): Promise<{ userId }> {\n    const { userId } = await this.usersService.createUser(newUserDto);\n\n    const user = await this.usersService.findUserById(userId);\n\n    if (!user) {\n      throw new DomainException({\n        code: DomainExceptionCode.InternalServerError,\n        message: 'Failed to create a new user entry',\n      });\n    }\n\n    const emailConfirmation = await this.usersService.createEmailConfirmation(\n      user.email,\n    );\n\n    const email = this.templateFactory.generateRegistrationEmail(\n      emailConfirmation.confirmationCode,\n    );\n\n    this.mailerService\n      .sendMail({\n        to: user.email,\n        subject: 'Bloggers platform registration',\n        html: email,\n      })\n      .catch((err) => console.error(`error sending email: ${err}`));\n\n    return { userId };\n  }\n\n  async confirmEmail(code: string): Promise<void> {\n    const confirmationCode = code as UUID;\n    await this.usersService.confirmEmail(confirmationCode);\n    return;\n  }\n\n  async resendConfirmation(email: string): Promise<void> {\n    const newConfirmation =\n      await this.usersService.createEmailConfirmation(email);\n    const emailTemplate = this.templateFactory.generateRegistrationEmail(\n      newConfirmation.confirmationCode,\n    );\n    this.mailerService\n      .sendMail({\n        to: email,\n        subject: 'Bloggers platform registration',\n        html: emailTemplate,\n      })\n      .catch((err) => console.error(`error sending email: ${err}`));\n    return;\n  }\n\n  async reissueTokensPair(token: string): Promise<AuthSuccessDto> {\n    const payload = this.jwtService.decode<CreateRefreshTokenDto>(token);\n\n    await this.sessionsService.getSession(payload.deviceId, payload.iat);\n\n    const rtInput: CreateRefreshTokenDto = {\n      userId: payload.userId,\n      deviceId: new mongoose.Types.ObjectId().toString(),\n      iat: new Date().getTime(),\n    };\n    const refreshToken = this.jwtService.sign(rtInput);\n    const accessToken = this.jwtService.sign({ id: payload.userId });\n    await this.sessionsService.refreshSession(payload.deviceId, rtInput.iat);\n    return { accessToken, refreshToken };\n  }\n\n  async recoverPassword(email: string): Promise<void> {\n    const recoveryObj = await this.usersService.setPasswordRecovery(email);\n    if (!recoveryObj) {\n      return;\n    }\n    const emailTemplate = this.templateFactory.generatePassRecoveryEmail(\n      recoveryObj.confirmationCode,\n    );\n\n    this.mailerService\n      .sendMail({\n        to: email,\n        subject: 'Blogs service password recovery request',\n        html: emailTemplate,\n      })\n      .catch((err) => console.error(`Error sending email: ${err}`));\n    return;\n  }\n\n  async confirmPassword(input: ConfirmPasswordDto): Promise<void> {\n    await this.usersService.confirmPassword(input);\n  }\n}\n"],"names":["AuthService","checkCredentials","credentials","user","usersService","getUserByLoginOrEmail","loginOrEmail","DomainException","code","DomainExceptionCode","Unauthorized","message","isValidPass","passHashService","compareHash","password","passwordHash","rtInput","userId","_id","toString","deviceId","mongoose","Types","ObjectId","iat","Date","getTime","accTInput","id","accessToken","jwtService","sign","refreshToken","sessionInput","ip","title","sessionsService","saveSession","registerUser","newUserDto","createUser","findUserById","InternalServerError","emailConfirmation","createEmailConfirmation","email","templateFactory","generateRegistrationEmail","confirmationCode","mailerService","sendMail","to","subject","html","catch","err","console","error","confirmEmail","resendConfirmation","newConfirmation","emailTemplate","reissueTokensPair","token","payload","decode","getSession","refreshSession","recoverPassword","recoveryObj","setPasswordRecovery","generatePassRecoveryEmail","confirmPassword","input","constructor"],"mappings":";;;;+BAoBaA;;;eAAAA;;;qBApBc;iCACC;8BACC;wBACC;gCACC;wBAGJ;kCACK;sCACI;iEAEf;wCAGW;;;;;;;;;;;;;;;AAMzB,IAAA,AAAMA,cAAN,MAAMA;IAUX,MAAMC,iBAAiBC,WAAqB,EAA2B;QACrE,MAAMC,OAAO,MAAM,IAAI,CAACC,YAAY,CAACC,qBAAqB,CACxDH,YAAYI,YAAY;QAE1B,IAAI,CAACH,MAAM;YACT,MAAM,IAAII,iCAAe,CAAC;gBACxBC,MAAMC,yCAAmB,CAACC,YAAY;gBACtCC,SAAS;YACX;QACF;QACA,MAAMC,cAAc,MAAM,IAAI,CAACC,eAAe,CAACC,WAAW,CACxDZ,YAAYa,QAAQ,EACpBZ,KAAKa,YAAY;QAEnB,IAAI,CAACJ,aAAa;YAChB,MAAM,IAAIL,iCAAe,CAAC;gBACxBC,MAAMC,yCAAmB,CAACC,YAAY;gBACtCC,SAAS;YACX;QACF;QACA,MAAMM,UAAiC;YACrCC,QAAQf,KAAKgB,GAAG,CAACC,QAAQ;YACzBC,UAAU,IAAIC,iBAAQ,CAACC,KAAK,CAACC,QAAQ,GAAGJ,QAAQ;YAChDK,KAAK,IAAIC,OAAOC,OAAO;QACzB;QACA,MAAMC,YAAkC;YACtCC,IAAI1B,KAAKgB,GAAG,CAACC,QAAQ;QACvB;QACA,MAAMU,cAAc,IAAI,CAACC,UAAU,CAACC,IAAI,CAACJ;QACzC,MAAMK,eAAe,IAAI,CAACF,UAAU,CAACC,IAAI,CAACf;QAE1C,MAAMiB,eAAiC;YACrCb,UAAUJ,QAAQI,QAAQ;YAC1BH,QAAQD,QAAQC,MAAM;YACtBO,KAAK,IAAIC,KAAKT,QAAQQ,GAAG;YACzBU,IAAIjC,YAAYiC,EAAE;YAClBC,OAAOlC,YAAYkC,KAAK;QAC1B;QACA,MAAM,IAAI,CAACC,eAAe,CAACC,WAAW,CAACJ;QAEvC,OAAO;YAAEJ;YAAaG;QAAa;IACrC;IAEA,MAAMM,aAAaC,UAA0B,EAAuB;QAClE,MAAM,EAAEtB,MAAM,EAAE,GAAG,MAAM,IAAI,CAACd,YAAY,CAACqC,UAAU,CAACD;QAEtD,MAAMrC,OAAO,MAAM,IAAI,CAACC,YAAY,CAACsC,YAAY,CAACxB;QAElD,IAAI,CAACf,MAAM;YACT,MAAM,IAAII,iCAAe,CAAC;gBACxBC,MAAMC,yCAAmB,CAACkC,mBAAmB;gBAC7ChC,SAAS;YACX;QACF;QAEA,MAAMiC,oBAAoB,MAAM,IAAI,CAACxC,YAAY,CAACyC,uBAAuB,CACvE1C,KAAK2C,KAAK;QAGZ,MAAMA,QAAQ,IAAI,CAACC,eAAe,CAACC,yBAAyB,CAC1DJ,kBAAkBK,gBAAgB;QAGpC,IAAI,CAACC,aAAa,CACfC,QAAQ,CAAC;YACRC,IAAIjD,KAAK2C,KAAK;YACdO,SAAS;YACTC,MAAMR;QACR,GACCS,KAAK,CAAC,CAACC,MAAQC,QAAQC,KAAK,CAAC,CAAC,qBAAqB,EAAEF,KAAK;QAE7D,OAAO;YAAEtC;QAAO;IAClB;IAEA,MAAMyC,aAAanD,IAAY,EAAiB;QAC9C,MAAMyC,mBAAmBzC;QACzB,MAAM,IAAI,CAACJ,YAAY,CAACuD,YAAY,CAACV;QACrC;IACF;IAEA,MAAMW,mBAAmBd,KAAa,EAAiB;QACrD,MAAMe,kBACJ,MAAM,IAAI,CAACzD,YAAY,CAACyC,uBAAuB,CAACC;QAClD,MAAMgB,gBAAgB,IAAI,CAACf,eAAe,CAACC,yBAAyB,CAClEa,gBAAgBZ,gBAAgB;QAElC,IAAI,CAACC,aAAa,CACfC,QAAQ,CAAC;YACRC,IAAIN;YACJO,SAAS;YACTC,MAAMQ;QACR,GACCP,KAAK,CAAC,CAACC,MAAQC,QAAQC,KAAK,CAAC,CAAC,qBAAqB,EAAEF,KAAK;QAC7D;IACF;IAEA,MAAMO,kBAAkBC,KAAa,EAA2B;QAC9D,MAAMC,UAAU,IAAI,CAAClC,UAAU,CAACmC,MAAM,CAAwBF;QAE9D,MAAM,IAAI,CAAC3B,eAAe,CAAC8B,UAAU,CAACF,QAAQ5C,QAAQ,EAAE4C,QAAQxC,GAAG;QAEnE,MAAMR,UAAiC;YACrCC,QAAQ+C,QAAQ/C,MAAM;YACtBG,UAAU,IAAIC,iBAAQ,CAACC,KAAK,CAACC,QAAQ,GAAGJ,QAAQ;YAChDK,KAAK,IAAIC,OAAOC,OAAO;QACzB;QACA,MAAMM,eAAe,IAAI,CAACF,UAAU,CAACC,IAAI,CAACf;QAC1C,MAAMa,cAAc,IAAI,CAACC,UAAU,CAACC,IAAI,CAAC;YAAEH,IAAIoC,QAAQ/C,MAAM;QAAC;QAC9D,MAAM,IAAI,CAACmB,eAAe,CAAC+B,cAAc,CAACH,QAAQ5C,QAAQ,EAAEJ,QAAQQ,GAAG;QACvE,OAAO;YAAEK;YAAaG;QAAa;IACrC;IAEA,MAAMoC,gBAAgBvB,KAAa,EAAiB;QAClD,MAAMwB,cAAc,MAAM,IAAI,CAAClE,YAAY,CAACmE,mBAAmB,CAACzB;QAChE,IAAI,CAACwB,aAAa;YAChB;QACF;QACA,MAAMR,gBAAgB,IAAI,CAACf,eAAe,CAACyB,yBAAyB,CAClEF,YAAYrB,gBAAgB;QAG9B,IAAI,CAACC,aAAa,CACfC,QAAQ,CAAC;YACRC,IAAIN;YACJO,SAAS;YACTC,MAAMQ;QACR,GACCP,KAAK,CAAC,CAACC,MAAQC,QAAQC,KAAK,CAAC,CAAC,qBAAqB,EAAEF,KAAK;QAC7D;IACF;IAEA,MAAMiB,gBAAgBC,KAAyB,EAAiB;QAC9D,MAAM,IAAI,CAACtE,YAAY,CAACqE,eAAe,CAACC;IAC1C;IA9IAC,YACE,AAAiBvE,YAA0B,EAC3C,AAAiBS,eAA4B,EAC7C,AAAiBkB,UAAsB,EACvC,AAAiBM,eAAgC,EACjD,AAAiBa,aAA4B,EAC7C,AAAiBH,eAA+B,CAChD;aANiB3C,eAAAA;aACAS,kBAAAA;aACAkB,aAAAA;aACAM,kBAAAA;aACAa,gBAAAA;aACAH,kBAAAA;IAChB;AAwIL"}