{"version":3,"sources":["../../../../src/modules/user-accounts/application/auth.service.ts"],"sourcesContent":["import { JwtService } from '@nestjs/jwt';\nimport { HashService } from './passHash.service';\nimport { UsersService } from './users.service';\nimport { MailerService } from '@nestjs-modules/mailer';\nimport { EmailTemplates } from 'src/modules/notifications/email.templates';\nimport { LoginDto } from '../dto/login.dto';\nimport { AuthSuccessDto } from '../dto/auth-success.dto';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { DomainException } from 'src/core/exceptions/domain-exceptions';\nimport { DomainExceptionCode } from 'src/core/exceptions/domain-exception-codes';\nimport { CreateRefreshTokenDto } from '../dto/create-refresh-token.dto';\nimport mongoose from 'mongoose';\nimport { CreateAccessTokenDto } from '../dto/create-access-token.dto';\nimport { CreateSessionDto } from '../dto/create-session.dto';\nimport { SessionsService } from './devices-security.service';\nimport { UserInputModel } from '../dto/user-input.dto';\nimport { UUID } from 'crypto';\nimport { ConfirmPasswordDto } from '../dto/confirm-password.dto';\nimport {\n  ACCESS_TOKEN_STRATEGY_INJECT_TOKEN,\n  REFRESH_TOKEN_STRATEGY_INJECT_TOKEN,\n} from '../constants/auth-token.inject-constants';\nimport { DateTime } from 'luxon';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly passHashService: HashService,\n    @Inject(ACCESS_TOKEN_STRATEGY_INJECT_TOKEN)\n    private readonly jwtAccesTokService: JwtService,\n    @Inject(REFRESH_TOKEN_STRATEGY_INJECT_TOKEN)\n    private readonly jwtRefreshTokService: JwtService,\n    private readonly sessionsService: SessionsService,\n    private readonly mailerService: MailerService,\n    private readonly templateFactory: EmailTemplates,\n  ) {}\n\n  async checkCredentials(credentials: LoginDto): Promise<AuthSuccessDto> {\n    const user = await this.usersService.getUserByLoginOrEmail(\n      credentials.loginOrEmail,\n    );\n    if (!user) {\n      throw new DomainException({\n        code: DomainExceptionCode.Unauthorized,\n        message: 'Wrong login or password',\n      });\n    }\n    const isValidPass = await this.passHashService.compareHash(\n      credentials.password,\n      user.passwordHash,\n    );\n    if (!isValidPass) {\n      throw new DomainException({\n        code: DomainExceptionCode.Unauthorized,\n        message: 'Wrong login or password',\n      });\n    }\n    const rtInput: CreateRefreshTokenDto = {\n      userId: user._id.toString(),\n      deviceId: new mongoose.Types.ObjectId().toString(),\n      iat: DateTime.utc().toSeconds(),\n    };\n    const accTInput: CreateAccessTokenDto = {\n      id: user._id.toString(),\n    };\n    const accessToken = this.jwtAccesTokService.sign(accTInput);\n    const refreshToken = this.jwtRefreshTokService.sign(rtInput);\n\n    const sessionInput: CreateSessionDto = {\n      deviceId: rtInput.deviceId,\n      userId: rtInput.userId,\n      iat: rtInput.iat,\n      ip: credentials.ip,\n      title: credentials.title,\n    };\n    await this.sessionsService.saveSession(sessionInput);\n\n    return { accessToken, refreshToken };\n  }\n\n  async registerUser(newUserDto: UserInputModel): Promise<{ userId }> {\n    const { userId } = await this.usersService.createUser(newUserDto);\n\n    const user = await this.usersService.findUserById(userId);\n\n    if (!user) {\n      throw new DomainException({\n        code: DomainExceptionCode.InternalServerError,\n        message: 'Failed to create a new user entry',\n      });\n    }\n\n    const emailConfirmation = await this.usersService.createEmailConfirmation(\n      user.email,\n    );\n\n    const email = this.templateFactory.generateRegistrationEmail(\n      emailConfirmation.confirmationCode,\n    );\n\n    this.mailerService\n      .sendMail({\n        to: user.email,\n        subject: 'Bloggers platform registration',\n        html: email,\n      })\n      .catch((err) => console.error(`error sending email: ${err}`));\n\n    return { userId };\n  }\n\n  async confirmEmail(code: string): Promise<void> {\n    const confirmationCode = code as UUID;\n    await this.usersService.confirmEmail(confirmationCode);\n    return;\n  }\n\n  async resendConfirmation(email: string): Promise<void> {\n    const newConfirmation =\n      await this.usersService.createEmailConfirmation(email);\n    const emailTemplate = this.templateFactory.generateRegistrationEmail(\n      newConfirmation.confirmationCode,\n    );\n    this.mailerService\n      .sendMail({\n        to: email,\n        subject: 'Bloggers platform registration',\n        html: emailTemplate,\n      })\n      .catch((err) => console.error(`error sending email: ${err}`));\n    return;\n  }\n\n  async reissueTokensPair(token: string): Promise<AuthSuccessDto> {\n    const payload =\n      this.jwtRefreshTokService.decode<CreateRefreshTokenDto>(token);\n\n    await this.sessionsService.getSession(payload.deviceId, payload.iat);\n\n    const rtInput: CreateRefreshTokenDto = {\n      userId: payload.userId,\n      deviceId: new mongoose.Types.ObjectId().toString(),\n      iat: DateTime.utc().toSeconds(),\n    };\n    const refreshToken = this.jwtRefreshTokService.sign(rtInput);\n    const accessToken = this.jwtAccesTokService.sign({ id: payload.userId });\n    await this.sessionsService.refreshSession(payload.deviceId, rtInput.iat);\n    return { accessToken, refreshToken };\n  }\n\n  async recoverPassword(email: string): Promise<void> {\n    const recoveryObj = await this.usersService.setPasswordRecovery(email);\n    if (!recoveryObj) {\n      return;\n    }\n    const emailTemplate = this.templateFactory.generatePassRecoveryEmail(\n      recoveryObj.confirmationCode,\n    );\n\n    this.mailerService\n      .sendMail({\n        to: email,\n        subject: 'Blogs service password recovery request',\n        html: emailTemplate,\n      })\n      .catch((err) => console.error(`Error sending email: ${err}`));\n    return;\n  }\n\n  async confirmPassword(input: ConfirmPasswordDto): Promise<void> {\n    await this.usersService.confirmPassword(input);\n  }\n}\n"],"names":["AuthService","checkCredentials","credentials","user","usersService","getUserByLoginOrEmail","loginOrEmail","DomainException","code","DomainExceptionCode","Unauthorized","message","isValidPass","passHashService","compareHash","password","passwordHash","rtInput","userId","_id","toString","deviceId","mongoose","Types","ObjectId","iat","DateTime","utc","toSeconds","accTInput","id","accessToken","jwtAccesTokService","sign","refreshToken","jwtRefreshTokService","sessionInput","ip","title","sessionsService","saveSession","registerUser","newUserDto","createUser","findUserById","InternalServerError","emailConfirmation","createEmailConfirmation","email","templateFactory","generateRegistrationEmail","confirmationCode","mailerService","sendMail","to","subject","html","catch","err","console","error","confirmEmail","resendConfirmation","newConfirmation","emailTemplate","reissueTokensPair","token","payload","decode","getSession","refreshSession","recoverPassword","recoveryObj","setPasswordRecovery","generatePassRecoveryEmail","confirmPassword","input","constructor"],"mappings":"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"}