{"version":3,"sources":["../../../../../src/modules/user-accounts/application/usecases/resend-email-confirmation.usecase.ts"],"sourcesContent":["import { MailerService } from '@nestjs-modules/mailer';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { EmailTemplates } from 'src/modules/notifications/email.templates';\nimport { UsersRepository } from '../../infrastructure/users.repository';\nimport { UUID } from 'crypto';\nimport { Duration } from 'luxon';\nimport { DomainExceptionCode } from 'src/core/exceptions/domain-exception-codes';\nimport {\n  DomainException,\n  Extension,\n} from 'src/core/exceptions/domain-exceptions';\nimport { UserAccountConfig } from '../../config/user-account.config';\n\nexport class ResendEmailConfirmationCommand {\n  constructor(public email: string) {}\n}\n\n@CommandHandler(ResendEmailConfirmationCommand)\nexport class ResendEmailConfirmationHandler\n  implements ICommandHandler<ResendEmailConfirmationCommand>\n{\n  constructor(\n    private readonly usersRepository: UsersRepository,\n    private readonly configService: UserAccountConfig,\n    private readonly mailerService: MailerService,\n    private readonly templateFactory: EmailTemplates,\n  ) {}\n\n  async execute(command: ResendEmailConfirmationCommand): Promise<any> {\n    const user = await this.usersRepository.findUserByEmail(command.email);\n    if (!user) {\n      throw new DomainException({\n        code: DomainExceptionCode.BadRequest,\n        message: 'User with provided email do not exist',\n        extensions: [\n          new Extension('User with provided email do not exist', 'email'),\n        ],\n      });\n    }\n    if (user.emailConfirmation?.isConfirmed) {\n      throw new DomainException({\n        code: DomainExceptionCode.BadRequest,\n        message: 'Email is already confirmed',\n        extensions: [new Extension('Email is already confirmed', 'email')],\n      });\n    }\n    const expiration = Duration.fromObject({\n      minutes: this.configService.emailExpiration,\n    });\n    user.genEmailConfirmation(expiration);\n\n    const emailTemplate = this.templateFactory.generateRegistrationEmail(\n      this.configService.confirmationCodesDomain,\n      user.emailConfirmation!.confirmationCode as UUID,\n    );\n    this.mailerService\n      .sendMail({\n        to: user.email,\n        subject: 'Bloggers platform registration',\n        html: emailTemplate,\n      })\n      .catch((err) => console.error(`error sending email: ${err}`));\n    await this.usersRepository.save(user);\n    return;\n  }\n}\n"],"names":["ResendEmailConfirmationCommand","ResendEmailConfirmationHandler","constructor","email","execute","command","user","usersRepository","findUserByEmail","DomainException","code","DomainExceptionCode","BadRequest","message","extensions","Extension","emailConfirmation","isConfirmed","expiration","Duration","fromObject","minutes","configService","emailExpiration","genEmailConfirmation","emailTemplate","templateFactory","generateRegistrationEmail","confirmationCodesDomain","confirmationCode","mailerService","sendMail","to","subject","html","catch","err","console","error","save"],"mappings":";;;;;;;;;;;QAaaA;eAAAA;;QAKAC;eAAAA;;;wBAlBiB;sBACkB;gCACjB;iCACC;uBAEP;sCACW;kCAI7B;mCAC2B;;;;;;;;;;AAE3B,IAAA,AAAMD,iCAAN,MAAMA;IACXE,YAAY,AAAOC,KAAa,CAAE;aAAfA,QAAAA;IAAgB;AACrC;AAGO,IAAA,AAAMF,iCAAN,MAAMA;IAUX,MAAMG,QAAQC,OAAuC,EAAgB;QACnE,MAAMC,OAAO,MAAM,IAAI,CAACC,eAAe,CAACC,eAAe,CAACH,QAAQF,KAAK;QACrE,IAAI,CAACG,MAAM;YACT,MAAM,IAAIG,iCAAe,CAAC;gBACxBC,MAAMC,yCAAmB,CAACC,UAAU;gBACpCC,SAAS;gBACTC,YAAY;oBACV,IAAIC,2BAAS,CAAC,yCAAyC;iBACxD;YACH;QACF;QACA,IAAIT,KAAKU,iBAAiB,EAAEC,aAAa;YACvC,MAAM,IAAIR,iCAAe,CAAC;gBACxBC,MAAMC,yCAAmB,CAACC,UAAU;gBACpCC,SAAS;gBACTC,YAAY;oBAAC,IAAIC,2BAAS,CAAC,8BAA8B;iBAAS;YACpE;QACF;QACA,MAAMG,aAAaC,eAAQ,CAACC,UAAU,CAAC;YACrCC,SAAS,IAAI,CAACC,aAAa,CAACC,eAAe;QAC7C;QACAjB,KAAKkB,oBAAoB,CAACN;QAE1B,MAAMO,gBAAgB,IAAI,CAACC,eAAe,CAACC,yBAAyB,CAClE,IAAI,CAACL,aAAa,CAACM,uBAAuB,EAC1CtB,KAAKU,iBAAiB,CAAEa,gBAAgB;QAE1C,IAAI,CAACC,aAAa,CACfC,QAAQ,CAAC;YACRC,IAAI1B,KAAKH,KAAK;YACd8B,SAAS;YACTC,MAAMT;QACR,GACCU,KAAK,CAAC,CAACC,MAAQC,QAAQC,KAAK,CAAC,CAAC,qBAAqB,EAAEF,KAAK;QAC7D,MAAM,IAAI,CAAC7B,eAAe,CAACgC,IAAI,CAACjC;QAChC;IACF;IA3CAJ,YACE,AAAiBK,eAAgC,EACjD,AAAiBe,aAAgC,EACjD,AAAiBQ,aAA4B,EAC7C,AAAiBJ,eAA+B,CAChD;aAJiBnB,kBAAAA;aACAe,gBAAAA;aACAQ,gBAAAA;aACAJ,kBAAAA;IAChB;AAuCL"}