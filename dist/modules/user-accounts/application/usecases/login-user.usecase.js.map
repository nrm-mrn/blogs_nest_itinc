{"version":3,"sources":["../../../../../src/modules/user-accounts/application/usecases/login-user.usecase.ts"],"sourcesContent":["import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { AuthSuccessDto } from '../../dto/auth-success.dto';\nimport { UsersRepository } from '../../infrastructure/users.repository';\nimport { Inject } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { DateTime, Duration } from 'luxon';\nimport mongoose from 'mongoose';\nimport { DomainExceptionCode } from 'src/core/exceptions/domain-exception-codes';\nimport { DomainException } from 'src/core/exceptions/domain-exceptions';\nimport {\n  ACCESS_TOKEN_STRATEGY_INJECT_TOKEN,\n  REFRESH_TOKEN_STRATEGY_INJECT_TOKEN,\n} from '../../constants/auth-token.inject-constants';\nimport { CreateAccessTokenDto } from '../../dto/create-access-token.dto';\nimport { CreateRefreshTokenDto } from '../../dto/create-refresh-token.dto';\nimport { CreateSessionDto } from '../../dto/create-session.dto';\nimport { HashService } from '../passHash.service';\nimport { DevicesSecurityRepository } from '../../infrastructure/devices-security.repository';\nimport { InjectModel } from '@nestjs/mongoose';\nimport {\n  DeviceAuthSession,\n  SessionModelType,\n} from '../../domain/session.entity';\nimport { UserAccountConfig } from '../../config/user-account.config';\n\nexport class LoginUserCommand {\n  constructor(\n    public loginOrEmail: string,\n    public password: string,\n    public ip: string,\n    public title: string,\n  ) {}\n}\n\n@CommandHandler(LoginUserCommand)\nexport class LoginUserHandler\n  implements ICommandHandler<LoginUserCommand, AuthSuccessDto>\n{\n  constructor(\n    private readonly usersRepository: UsersRepository,\n    private readonly passHashService: HashService,\n    @Inject(ACCESS_TOKEN_STRATEGY_INJECT_TOKEN)\n    private readonly jwtAccesTokService: JwtService,\n    @Inject(REFRESH_TOKEN_STRATEGY_INJECT_TOKEN)\n    private readonly jwtRefreshTokService: JwtService,\n    @InjectModel(DeviceAuthSession.name)\n    private readonly SessionModel: SessionModelType,\n    private readonly sessionsRepository: DevicesSecurityRepository,\n    private readonly configService: UserAccountConfig,\n  ) {}\n  async execute(command: LoginUserCommand): Promise<AuthSuccessDto> {\n    const user = await this.usersRepository.findUserByLoginOrEmail(\n      command.loginOrEmail,\n    );\n    if (!user) {\n      throw new DomainException({\n        code: DomainExceptionCode.Unauthorized,\n        message: 'Wrong login or password',\n      });\n    }\n    await this.checkPass(command.password, user.passwordHash);\n    const rtInput: CreateRefreshTokenDto = {\n      userId: user._id.toString(),\n      deviceId: new mongoose.Types.ObjectId().toString(),\n      iat: Math.floor(DateTime.utc().toSeconds()),\n    };\n    const accTInput: CreateAccessTokenDto = {\n      id: user._id.toString(),\n    };\n    const accessToken = this.jwtAccesTokService.sign(accTInput);\n    const refreshToken = this.jwtRefreshTokService.sign(rtInput);\n\n    const sessionInput: CreateSessionDto = {\n      deviceId: rtInput.deviceId,\n      userId: rtInput.userId,\n      iat: rtInput.iat,\n      ip: command.ip,\n      title: command.title,\n    };\n    await this.saveSession(sessionInput);\n\n    return { accessToken, refreshToken };\n  }\n\n  private async checkPass(inputPassword: string, passHash: string) {\n    const isValidPass = await this.passHashService.compareHash(\n      inputPassword,\n      passHash,\n    );\n    if (!isValidPass) {\n      throw new DomainException({\n        code: DomainExceptionCode.Unauthorized,\n        message: 'Wrong login or password',\n      });\n    }\n  }\n\n  private async saveSession(input: CreateSessionDto) {\n    const domainInput = {\n      ...input,\n      deviceId: new mongoose.Types.ObjectId(input.deviceId),\n      expiration: DateTime.utc()\n        .plus(\n          Duration.fromMillis(this.configService.refreshTokenDuration * 1000),\n        )\n        .toJSDate(),\n    };\n    const session = this.SessionModel.createSession(domainInput);\n    await this.sessionsRepository.save(session);\n    return;\n  }\n}\n"],"names":["LoginUserCommand","LoginUserHandler","constructor","loginOrEmail","password","ip","title","execute","command","user","usersRepository","findUserByLoginOrEmail","DomainException","code","DomainExceptionCode","Unauthorized","message","checkPass","passwordHash","rtInput","userId","_id","toString","deviceId","mongoose","Types","ObjectId","iat","Math","floor","DateTime","utc","toSeconds","accTInput","id","accessToken","jwtAccesTokService","sign","refreshToken","jwtRefreshTokService","sessionInput","saveSession","inputPassword","passHash","isValidPass","passHashService","compareHash","input","domainInput","expiration","plus","Duration","fromMillis","configService","refreshTokenDuration","toJSDate","session","SessionModel","createSession","sessionsRepository","save","name"],"mappings":";;;;;;;;;;;QAyBaA;eAAAA;;QAUAC;eAAAA;;;sBAnCmC;iCAEhB;wBACT;qBACI;uBACQ;iEACd;sCACe;kCACJ;0CAIzB;iCAIqB;2CACc;2BACd;+BAIrB;mCAC2B;;;;;;;;;;;;;;;;;;;;AAE3B,IAAA,AAAMD,mBAAN,MAAMA;IACXE,YACE,AAAOC,YAAoB,EAC3B,AAAOC,QAAgB,EACvB,AAAOC,EAAU,EACjB,AAAOC,KAAa,CACpB;aAJOH,eAAAA;aACAC,WAAAA;aACAC,KAAAA;aACAC,QAAAA;IACN;AACL;AAGO,IAAA,AAAML,mBAAN,MAAMA;IAeX,MAAMM,QAAQC,OAAyB,EAA2B;QAChE,MAAMC,OAAO,MAAM,IAAI,CAACC,eAAe,CAACC,sBAAsB,CAC5DH,QAAQL,YAAY;QAEtB,IAAI,CAACM,MAAM;YACT,MAAM,IAAIG,iCAAe,CAAC;gBACxBC,MAAMC,yCAAmB,CAACC,YAAY;gBACtCC,SAAS;YACX;QACF;QACA,MAAM,IAAI,CAACC,SAAS,CAACT,QAAQJ,QAAQ,EAAEK,KAAKS,YAAY;QACxD,MAAMC,UAAiC;YACrCC,QAAQX,KAAKY,GAAG,CAACC,QAAQ;YACzBC,UAAU,IAAIC,iBAAQ,CAACC,KAAK,CAACC,QAAQ,GAAGJ,QAAQ;YAChDK,KAAKC,KAAKC,KAAK,CAACC,eAAQ,CAACC,GAAG,GAAGC,SAAS;QAC1C;QACA,MAAMC,YAAkC;YACtCC,IAAIzB,KAAKY,GAAG,CAACC,QAAQ;QACvB;QACA,MAAMa,cAAc,IAAI,CAACC,kBAAkB,CAACC,IAAI,CAACJ;QACjD,MAAMK,eAAe,IAAI,CAACC,oBAAoB,CAACF,IAAI,CAAClB;QAEpD,MAAMqB,eAAiC;YACrCjB,UAAUJ,QAAQI,QAAQ;YAC1BH,QAAQD,QAAQC,MAAM;YACtBO,KAAKR,QAAQQ,GAAG;YAChBtB,IAAIG,QAAQH,EAAE;YACdC,OAAOE,QAAQF,KAAK;QACtB;QACA,MAAM,IAAI,CAACmC,WAAW,CAACD;QAEvB,OAAO;YAAEL;YAAaG;QAAa;IACrC;IAEA,MAAcrB,UAAUyB,aAAqB,EAAEC,QAAgB,EAAE;QAC/D,MAAMC,cAAc,MAAM,IAAI,CAACC,eAAe,CAACC,WAAW,CACxDJ,eACAC;QAEF,IAAI,CAACC,aAAa;YAChB,MAAM,IAAIhC,iCAAe,CAAC;gBACxBC,MAAMC,yCAAmB,CAACC,YAAY;gBACtCC,SAAS;YACX;QACF;IACF;IAEA,MAAcyB,YAAYM,KAAuB,EAAE;QACjD,MAAMC,cAAc;YAClB,GAAGD,KAAK;YACRxB,UAAU,IAAIC,iBAAQ,CAACC,KAAK,CAACC,QAAQ,CAACqB,MAAMxB,QAAQ;YACpD0B,YAAYnB,eAAQ,CAACC,GAAG,GACrBmB,IAAI,CACHC,eAAQ,CAACC,UAAU,CAAC,IAAI,CAACC,aAAa,CAACC,oBAAoB,GAAG,OAE/DC,QAAQ;QACb;QACA,MAAMC,UAAU,IAAI,CAACC,YAAY,CAACC,aAAa,CAACV;QAChD,MAAM,IAAI,CAACW,kBAAkB,CAACC,IAAI,CAACJ;QACnC;IACF;IAxEAtD,YACE,AAAiBQ,eAAgC,EACjD,AAAiBmC,eAA4B,EAC7C,AACiBT,kBAA8B,EAC/C,AACiBG,oBAAgC,EACjD,AACiBkB,YAA8B,EAC/C,AAAiBE,kBAA6C,EAC9D,AAAiBN,aAAgC,CACjD;aAViB3C,kBAAAA;aACAmC,kBAAAA;aAEAT,qBAAAA;aAEAG,uBAAAA;aAEAkB,eAAAA;aACAE,qBAAAA;aACAN,gBAAAA;IAChB;AA8DL;;;;;8EAlEmCQ"}