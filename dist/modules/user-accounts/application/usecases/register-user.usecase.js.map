{"version":3,"sources":["../../../../../src/modules/user-accounts/application/usecases/register-user.usecase.ts"],"sourcesContent":["import { MailerService } from '@nestjs-modules/mailer';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { EmailTemplates } from 'src/modules/notifications/email.templates';\nimport { UsersService } from '../users.service';\nimport { Duration } from 'luxon';\nimport { UUID } from 'crypto';\nimport { UsersRepository } from '../../infrastructure/users.repository';\nimport { UserAccountConfig } from '../../config/user-account.config';\n\nexport class RegisterUserCommand {\n  constructor(\n    public login: string,\n    public password: string,\n    public email: string,\n  ) {}\n}\n\n@CommandHandler(RegisterUserCommand)\nexport class RegisterUserHandler\n  implements ICommandHandler<RegisterUserCommand>\n{\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly usersRepository: UsersRepository,\n    private readonly mailerService: MailerService,\n    private readonly templateFactory: EmailTemplates,\n    private readonly configService: UserAccountConfig,\n  ) {}\n\n  async execute(command: RegisterUserCommand): Promise<void> {\n    const user = await this.usersService.createUserDoc(command);\n\n    const expiration = Duration.fromObject({\n      minutes: this.configService.emailExpiration,\n    });\n    user.genEmailConfirmation(expiration);\n\n    const email = this.templateFactory.generateRegistrationEmail(\n      this.configService.confirmationCodesDomain,\n      user.emailConfirmation!.confirmationCode as UUID,\n    );\n\n    this.mailerService\n      .sendMail({\n        to: user.email,\n        subject: 'Bloggers platform registration',\n        html: email,\n      })\n      .catch((err) => console.error(`error sending email: ${err}`));\n\n    await this.usersRepository.save(user);\n  }\n}\n"],"names":["RegisterUserCommand","RegisterUserHandler","constructor","login","password","email","execute","command","user","usersService","createUserDoc","expiration","Duration","fromObject","minutes","configService","emailExpiration","genEmailConfirmation","templateFactory","generateRegistrationEmail","confirmationCodesDomain","emailConfirmation","confirmationCode","mailerService","sendMail","to","subject","html","catch","err","console","error","usersRepository","save"],"mappings":";;;;;;;;;;;QASaA;eAAAA;;QASAC;eAAAA;;;wBAlBiB;sBACkB;gCACjB;8BACF;uBACJ;iCAEO;mCACE;;;;;;;;;;AAE3B,IAAA,AAAMD,sBAAN,MAAMA;IACXE,YACE,AAAOC,KAAa,EACpB,AAAOC,QAAgB,EACvB,AAAOC,KAAa,CACpB;aAHOF,QAAAA;aACAC,WAAAA;aACAC,QAAAA;IACN;AACL;AAGO,IAAA,AAAMJ,sBAAN,MAAMA;IAWX,MAAMK,QAAQC,OAA4B,EAAiB;QACzD,MAAMC,OAAO,MAAM,IAAI,CAACC,YAAY,CAACC,aAAa,CAACH;QAEnD,MAAMI,aAAaC,eAAQ,CAACC,UAAU,CAAC;YACrCC,SAAS,IAAI,CAACC,aAAa,CAACC,eAAe;QAC7C;QACAR,KAAKS,oBAAoB,CAACN;QAE1B,MAAMN,QAAQ,IAAI,CAACa,eAAe,CAACC,yBAAyB,CAC1D,IAAI,CAACJ,aAAa,CAACK,uBAAuB,EAC1CZ,KAAKa,iBAAiB,CAAEC,gBAAgB;QAG1C,IAAI,CAACC,aAAa,CACfC,QAAQ,CAAC;YACRC,IAAIjB,KAAKH,KAAK;YACdqB,SAAS;YACTC,MAAMtB;QACR,GACCuB,KAAK,CAAC,CAACC,MAAQC,QAAQC,KAAK,CAAC,CAAC,qBAAqB,EAAEF,KAAK;QAE7D,MAAM,IAAI,CAACG,eAAe,CAACC,IAAI,CAACzB;IAClC;IA9BAN,YACE,AAAiBO,YAA0B,EAC3C,AAAiBuB,eAAgC,EACjD,AAAiBT,aAA4B,EAC7C,AAAiBL,eAA+B,EAChD,AAAiBH,aAAgC,CACjD;aALiBN,eAAAA;aACAuB,kBAAAA;aACAT,gBAAAA;aACAL,kBAAAA;aACAH,gBAAAA;IAChB;AAyBL"}