{"version":3,"sources":["../../../../../src/modules/user-accounts/application/usecases/recover-password.usecase.ts"],"sourcesContent":["import { MailerService } from '@nestjs-modules/mailer';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { EmailTemplates } from 'src/modules/notifications/email.templates';\nimport { UsersRepository } from '../../infrastructure/users.repository';\nimport { Duration } from 'luxon';\nimport { UserAccountConfig } from '../../config/user-account.config';\n\nexport class RecoverPasswordCommand {\n  constructor(public email: string) {}\n}\n\n@CommandHandler(RecoverPasswordCommand)\nexport class RecoverPasswordHandler\n  implements ICommandHandler<RecoverPasswordCommand>\n{\n  constructor(\n    private readonly usersRepository: UsersRepository,\n    private readonly mailerService: MailerService,\n    private readonly templateFactory: EmailTemplates,\n    private readonly configService: UserAccountConfig,\n  ) {}\n\n  async execute(command: RecoverPasswordCommand): Promise<any> {\n    const user = await this.usersRepository.findUserByEmail(command.email);\n    if (!user) {\n      return null;\n    }\n    const expiration = Duration.fromObject({\n      minutes: this.configService.passRecoveryExpiration,\n    });\n    user.genPasswordRecovery(expiration);\n    const emailTemplate = this.templateFactory.generatePassRecoveryEmail(\n      this.configService.confirmationCodesDomain,\n      user.passwordRecovery!.confirmationCode,\n    );\n\n    this.mailerService\n      .sendMail({\n        to: command.email,\n        subject: 'Blogs service password recovery request',\n        html: emailTemplate,\n      })\n      .catch((err) => console.error(`Error sending email: ${err}`));\n\n    await this.usersRepository.save(user);\n    return;\n  }\n}\n"],"names":["RecoverPasswordCommand","RecoverPasswordHandler","constructor","email","execute","command","user","usersRepository","findUserByEmail","expiration","Duration","fromObject","minutes","configService","passRecoveryExpiration","genPasswordRecovery","emailTemplate","templateFactory","generatePassRecoveryEmail","confirmationCodesDomain","passwordRecovery","confirmationCode","mailerService","sendMail","to","subject","html","catch","err","console","error","save"],"mappings":";;;;;;;;;;;QAOaA;eAAAA;;QAKAC;eAAAA;;;wBAZiB;sBACkB;gCACjB;iCACC;uBACP;mCACS;;;;;;;;;;AAE3B,IAAA,AAAMD,yBAAN,MAAMA;IACXE,YAAY,AAAOC,KAAa,CAAE;aAAfA,QAAAA;IAAgB;AACrC;AAGO,IAAA,AAAMF,yBAAN,MAAMA;IAUX,MAAMG,QAAQC,OAA+B,EAAgB;QAC3D,MAAMC,OAAO,MAAM,IAAI,CAACC,eAAe,CAACC,eAAe,CAACH,QAAQF,KAAK;QACrE,IAAI,CAACG,MAAM;YACT,OAAO;QACT;QACA,MAAMG,aAAaC,eAAQ,CAACC,UAAU,CAAC;YACrCC,SAAS,IAAI,CAACC,aAAa,CAACC,sBAAsB;QACpD;QACAR,KAAKS,mBAAmB,CAACN;QACzB,MAAMO,gBAAgB,IAAI,CAACC,eAAe,CAACC,yBAAyB,CAClE,IAAI,CAACL,aAAa,CAACM,uBAAuB,EAC1Cb,KAAKc,gBAAgB,CAAEC,gBAAgB;QAGzC,IAAI,CAACC,aAAa,CACfC,QAAQ,CAAC;YACRC,IAAInB,QAAQF,KAAK;YACjBsB,SAAS;YACTC,MAAMV;QACR,GACCW,KAAK,CAAC,CAACC,MAAQC,QAAQC,KAAK,CAAC,CAAC,qBAAqB,EAAEF,KAAK;QAE7D,MAAM,IAAI,CAACrB,eAAe,CAACwB,IAAI,CAACzB;QAChC;IACF;IA/BAJ,YACE,AAAiBK,eAAgC,EACjD,AAAiBe,aAA4B,EAC7C,AAAiBL,eAA+B,EAChD,AAAiBJ,aAAgC,CACjD;aAJiBN,kBAAAA;aACAe,gBAAAA;aACAL,kBAAAA;aACAJ,gBAAAA;IAChB;AA2BL"}