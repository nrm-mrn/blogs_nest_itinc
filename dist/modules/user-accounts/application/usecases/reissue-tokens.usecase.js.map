{"version":3,"sources":["../../../../../src/modules/user-accounts/application/usecases/reissue-tokens.usecase.ts"],"sourcesContent":["import { ICommandHandler } from '@nestjs/cqrs';\nimport { AuthSuccessDto } from '../../dto/auth-success.dto';\nimport { Inject } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { DateTime } from 'luxon';\nimport {\n  ACCESS_TOKEN_STRATEGY_INJECT_TOKEN,\n  REFRESH_TOKEN_STRATEGY_INJECT_TOKEN,\n} from '../../constants/auth-token.inject-constants';\nimport { CreateRefreshTokenDto } from '../../dto/create-refresh-token.dto';\nimport { DevicesSecurityRepository } from '../../infrastructure/devices-security.repository';\nimport { DomainExceptionCode } from 'src/core/exceptions/domain-exception-codes';\nimport { DomainException } from 'src/core/exceptions/domain-exceptions';\n\nexport class ReissueTokensCommand {\n  constructor(public token: string) {}\n}\n\nexport class ReissueTokensHandler\n  implements ICommandHandler<ReissueTokensCommand, AuthSuccessDto>\n{\n  constructor(\n    @Inject(ACCESS_TOKEN_STRATEGY_INJECT_TOKEN)\n    private readonly jwtAccesTokService: JwtService,\n    @Inject(REFRESH_TOKEN_STRATEGY_INJECT_TOKEN)\n    private readonly jwtRefreshTokService: JwtService,\n    private readonly sessionsRepository: DevicesSecurityRepository,\n  ) {}\n\n  async execute(command: ReissueTokensCommand): Promise<AuthSuccessDto> {\n    const payload = this.jwtRefreshTokService.decode<CreateRefreshTokenDto>(\n      command.token,\n    );\n\n    await this.sessionsRepository.findSessionOrFail(\n      payload.deviceId,\n      payload.iat,\n    );\n\n    const rtInput: CreateRefreshTokenDto = {\n      userId: payload.userId,\n      deviceId: payload.deviceId,\n      iat: Math.floor(DateTime.utc().toSeconds()),\n    };\n    const refreshToken = this.jwtRefreshTokService.sign(rtInput);\n    const accessToken = this.jwtAccesTokService.sign({ id: payload.userId });\n    await this.refreshSession(payload.deviceId, rtInput.iat);\n    return { accessToken, refreshToken };\n  }\n\n  private async refreshSession(\n    deviceId: string,\n    newIat: number,\n  ): Promise<void> {\n    const session =\n      await this.sessionsRepository.findSessionByDeviceId(deviceId);\n    if (!session) {\n      throw new DomainException({\n        code: DomainExceptionCode.InternalServerError,\n        message: 'Unable to find a session for refresh',\n      });\n    }\n    session.iat = newIat;\n    await this.sessionsRepository.save(session);\n    return;\n  }\n}\n"],"names":["ReissueTokensCommand","ReissueTokensHandler","constructor","token","execute","command","payload","jwtRefreshTokService","decode","sessionsRepository","findSessionOrFail","deviceId","iat","rtInput","userId","Math","floor","DateTime","utc","toSeconds","refreshToken","sign","accessToken","jwtAccesTokService","id","refreshSession","newIat","session","findSessionByDeviceId","DomainException","code","DomainExceptionCode","InternalServerError","message","save"],"mappings":";;;;;;;;;;;QAcaA;eAAAA;;QAIAC;eAAAA;;;wBAhBU;qBACI;uBACF;0CAIlB;2CAEmC;sCACN;kCACJ;;;;;;;;;;;;;;;AAEzB,IAAA,AAAMD,uBAAN,MAAMA;IACXE,YAAY,AAAOC,KAAa,CAAE;aAAfA,QAAAA;IAAgB;AACrC;AAEO,IAAA,AAAMF,uBAAN,MAAMA;IAWX,MAAMG,QAAQC,OAA6B,EAA2B;QACpE,MAAMC,UAAU,IAAI,CAACC,oBAAoB,CAACC,MAAM,CAC9CH,QAAQF,KAAK;QAGf,MAAM,IAAI,CAACM,kBAAkB,CAACC,iBAAiB,CAC7CJ,QAAQK,QAAQ,EAChBL,QAAQM,GAAG;QAGb,MAAMC,UAAiC;YACrCC,QAAQR,QAAQQ,MAAM;YACtBH,UAAUL,QAAQK,QAAQ;YAC1BC,KAAKG,KAAKC,KAAK,CAACC,eAAQ,CAACC,GAAG,GAAGC,SAAS;QAC1C;QACA,MAAMC,eAAe,IAAI,CAACb,oBAAoB,CAACc,IAAI,CAACR;QACpD,MAAMS,cAAc,IAAI,CAACC,kBAAkB,CAACF,IAAI,CAAC;YAAEG,IAAIlB,QAAQQ,MAAM;QAAC;QACtE,MAAM,IAAI,CAACW,cAAc,CAACnB,QAAQK,QAAQ,EAAEE,QAAQD,GAAG;QACvD,OAAO;YAAEU;YAAaF;QAAa;IACrC;IAEA,MAAcK,eACZd,QAAgB,EAChBe,MAAc,EACC;QACf,MAAMC,UACJ,MAAM,IAAI,CAAClB,kBAAkB,CAACmB,qBAAqB,CAACjB;QACtD,IAAI,CAACgB,SAAS;YACZ,MAAM,IAAIE,iCAAe,CAAC;gBACxBC,MAAMC,yCAAmB,CAACC,mBAAmB;gBAC7CC,SAAS;YACX;QACF;QACAN,QAAQf,GAAG,GAAGc;QACd,MAAM,IAAI,CAACjB,kBAAkB,CAACyB,IAAI,CAACP;QACnC;IACF;IA5CAzB,YACE,AACiBqB,kBAA8B,EAC/C,AACiBhB,oBAAgC,EACjD,AAAiBE,kBAA6C,CAC9D;aAJiBc,qBAAAA;aAEAhB,uBAAAA;aACAE,qBAAAA;IAChB;AAuCL"}