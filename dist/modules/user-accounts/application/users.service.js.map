{"version":3,"sources":["../../../../src/modules/user-accounts/application/users.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UsersRepository } from '../infrastructure/users.repository';\nimport { HashService } from './passHash.service';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User, UserDocument, UserModelType } from '../domain/user.entity';\nimport {\n  DomainException,\n  Extension,\n} from 'src/core/exceptions/domain-exceptions';\nimport { DomainExceptionCode } from 'src/core/exceptions/domain-exception-codes';\nimport { EmailConfirmation } from '../domain/emailConfirmation.schema';\nimport { ConfigService } from '@nestjs/config';\nimport { ConfigurationType } from 'src/modules/config/config.module';\nimport { Duration } from 'luxon';\nimport { UUID } from 'crypto';\nimport { PasswordRecovery } from '../domain/passRecovery.schema';\nimport { ConfirmPasswordDto } from '../dto/confirm-password.dto';\nimport { EmailConfirmationViewModel } from '../dto/email-confirmation-view.dto';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectModel(User.name) private readonly UserModel: UserModelType,\n    private readonly usersRepository: UsersRepository,\n    private readonly hashService: HashService,\n    private readonly configService: ConfigService<ConfigurationType>,\n  ) {}\n\n  async createUser(input: CreateUserDto): Promise<{ userId: string }> {\n    const newUser = await this.createUserDoc(input);\n    const userId = await this.usersRepository.save(newUser);\n\n    return { userId };\n  }\n\n  async createUserByAdmin(input: CreateUserDto): Promise<{ userId: string }> {\n    const newUser = await this.createUserDoc(input);\n    newUser.confirmEmailByAdmin();\n    const userId = await this.usersRepository.save(newUser);\n    return { userId };\n  }\n\n  private async createUserDoc(input: CreateUserDto): Promise<UserDocument> {\n    const uniqueLogin = await this.isLoginUnique(input.login);\n    if (!uniqueLogin) {\n      throw new DomainException({\n        code: DomainExceptionCode.BadRequest,\n        message: 'Login already exists',\n        extensions: [new Extension('Login already exist', 'login')],\n      });\n    }\n    const uniqueEmail = await this.isEmailUnique(input.email);\n    if (!uniqueEmail) {\n      throw new DomainException({\n        code: DomainExceptionCode.BadRequest,\n        message: 'Email already exists',\n        extensions: [new Extension('Email already exist', 'email')],\n      });\n    }\n\n    const hash = await this.hashService.createHash(input.password);\n    return this.UserModel.createUser({\n      email: input.email,\n      login: input.login,\n      passHash: hash,\n    });\n  }\n\n  async isLoginUnique(login: string): Promise<boolean> {\n    const loginRes = await this.usersRepository.findUserByLoginOrEmail(login);\n    if (loginRes) {\n      return false;\n    }\n    return true;\n  }\n\n  async isEmailUnique(email: string): Promise<boolean> {\n    const emailRes = await this.usersRepository.findUserByLoginOrEmail(email);\n    if (emailRes) {\n      return false;\n    }\n    return true;\n  }\n\n  async findUserById(id: string): Promise<UserDocument | null> {\n    return this.usersRepository.findById(id);\n  }\n\n  async getUserByLoginOrEmail(input: string): Promise<UserDocument | null> {\n    const user = await this.usersRepository.findUserByLoginOrEmail(input);\n    return user;\n  }\n\n  async deleteUser(userId: string) {\n    const user = await this.usersRepository.findOrNotFoundFail(userId);\n    await this.usersRepository.deleteUser(user);\n  }\n\n  async createEmailConfirmation(\n    email: string,\n  ): Promise<EmailConfirmationViewModel> {\n    const user = await this.usersRepository.findUserByEmail(email);\n    if (!user) {\n      throw new DomainException({\n        code: DomainExceptionCode.BadRequest,\n        message: 'User with provided email do not exist',\n        extensions: [\n          new Extension('User with provided email do not exist', 'email'),\n        ],\n      });\n    }\n    if (user.emailConfirmation?.isConfirmed) {\n      throw new DomainException({\n        code: DomainExceptionCode.BadRequest,\n        message: 'Email is already confirmed',\n        extensions: [new Extension('Email is already confirmed', 'email')],\n      });\n    }\n    user.genEmailConfirmation(\n      this.configService.get('emailExpiration') as Duration,\n    );\n    await this.usersRepository.save(user);\n    return user.emailConfirmation as EmailConfirmationViewModel;\n  }\n\n  async confirmEmail(code: UUID): Promise<void> {\n    const user = await this.usersRepository.findUserByEmailConfirmation(code);\n    if (!user) {\n      throw new DomainException({\n        code: DomainExceptionCode.BadRequest,\n        message: 'User with provided code does not exist',\n        extensions: [\n          new Extension('User with provided code does not exist', 'code'),\n        ],\n      });\n    }\n    user.confirmEmail();\n    await this.usersRepository.save(user);\n    return;\n  }\n\n  async setPasswordRecovery(email: string): Promise<PasswordRecovery | null> {\n    const user = await this.usersRepository.findUserByEmail(email);\n    if (!user) {\n      return null;\n    }\n    user.genPasswordRecovery(\n      this.configService.get('passRecoveryExpiration') as Duration,\n    );\n    await this.usersRepository.save(user);\n    return user.passwordRecovery as PasswordRecovery;\n  }\n\n  async confirmPassword(input: ConfirmPasswordDto): Promise<void> {\n    const user = await this.usersRepository.getUserByPassRecovery(input.code);\n    if (!user) {\n      throw new DomainException({\n        code: DomainExceptionCode.BadRequest,\n        message: 'Incorrect recovery code',\n        extensions: [new Extension('incorrect recovery code', 'recoveryCode')],\n      });\n    }\n    const hash = await this.hashService.createHash(input.password);\n    user.confirmPassword(hash);\n    await this.usersRepository.save(user);\n    return;\n  }\n}\n"],"names":["UsersService","createUser","input","newUser","createUserDoc","userId","usersRepository","save","createUserByAdmin","confirmEmailByAdmin","uniqueLogin","isLoginUnique","login","DomainException","code","DomainExceptionCode","BadRequest","message","extensions","Extension","uniqueEmail","isEmailUnique","email","hash","hashService","createHash","password","UserModel","passHash","loginRes","findUserByLoginOrEmail","emailRes","findUserById","id","findById","getUserByLoginOrEmail","user","deleteUser","findOrNotFoundFail","createEmailConfirmation","findUserByEmail","emailConfirmation","isConfirmed","genEmailConfirmation","configService","get","confirmEmail","findUserByEmailConfirmation","setPasswordRecovery","genPasswordRecovery","passwordRecovery","confirmPassword","getUserByPassRecovery","constructor","name"],"mappings":"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"}