{"version":3,"sources":["../../../../src/modules/user-accounts/application/users.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UsersRepository } from '../infrastructure/users.repository';\nimport { HashService } from './passHash.service';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User, UserDocument, UserModelType } from '../domain/user.entity';\nimport {\n  DomainException,\n  Extension,\n} from 'src/core/exceptions/domain-exceptions';\nimport { DomainExceptionCode } from 'src/core/exceptions/domain-exception-codes';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectModel(User.name) private readonly UserModel: UserModelType,\n    private readonly usersRepository: UsersRepository,\n    private readonly hashService: HashService,\n  ) {}\n\n  async createUserDoc(input: CreateUserDto): Promise<UserDocument> {\n    const uniqueLogin = await this.isLoginUnique(input.login);\n    if (!uniqueLogin) {\n      throw new DomainException({\n        code: DomainExceptionCode.BadRequest,\n        message: 'Login already exists',\n        extensions: [new Extension('Login already exist', 'login')],\n      });\n    }\n    const uniqueEmail = await this.isEmailUnique(input.email);\n    if (!uniqueEmail) {\n      throw new DomainException({\n        code: DomainExceptionCode.BadRequest,\n        message: 'Email already exists',\n        extensions: [new Extension('Email already exist', 'email')],\n      });\n    }\n\n    const hash = await this.hashService.createHash(input.password);\n    return this.UserModel.createUser({\n      email: input.email,\n      login: input.login,\n      passHash: hash,\n    });\n  }\n\n  async isLoginUnique(login: string): Promise<boolean> {\n    const loginRes = await this.usersRepository.findUserByLoginOrEmail(login);\n    if (loginRes) {\n      return false;\n    }\n    return true;\n  }\n\n  async isEmailUnique(email: string): Promise<boolean> {\n    const emailRes = await this.usersRepository.findUserByLoginOrEmail(email);\n    if (emailRes) {\n      return false;\n    }\n    return true;\n  }\n}\n"],"names":["UsersService","createUserDoc","input","uniqueLogin","isLoginUnique","login","DomainException","code","DomainExceptionCode","BadRequest","message","extensions","Extension","uniqueEmail","isEmailUnique","email","hash","hashService","createHash","password","UserModel","createUser","passHash","loginRes","usersRepository","findUserByLoginOrEmail","emailRes","constructor","name"],"mappings":";;;;+BAaaA;;;eAAAA;;;wBAbc;iCAEK;iCACJ;0BACA;4BACsB;kCAI3C;sCAC6B;;;;;;;;;;;;;;;AAG7B,IAAA,AAAMA,eAAN,MAAMA;IAOX,MAAMC,cAAcC,KAAoB,EAAyB;QAC/D,MAAMC,cAAc,MAAM,IAAI,CAACC,aAAa,CAACF,MAAMG,KAAK;QACxD,IAAI,CAACF,aAAa;YAChB,MAAM,IAAIG,iCAAe,CAAC;gBACxBC,MAAMC,yCAAmB,CAACC,UAAU;gBACpCC,SAAS;gBACTC,YAAY;oBAAC,IAAIC,2BAAS,CAAC,uBAAuB;iBAAS;YAC7D;QACF;QACA,MAAMC,cAAc,MAAM,IAAI,CAACC,aAAa,CAACZ,MAAMa,KAAK;QACxD,IAAI,CAACF,aAAa;YAChB,MAAM,IAAIP,iCAAe,CAAC;gBACxBC,MAAMC,yCAAmB,CAACC,UAAU;gBACpCC,SAAS;gBACTC,YAAY;oBAAC,IAAIC,2BAAS,CAAC,uBAAuB;iBAAS;YAC7D;QACF;QAEA,MAAMI,OAAO,MAAM,IAAI,CAACC,WAAW,CAACC,UAAU,CAAChB,MAAMiB,QAAQ;QAC7D,OAAO,IAAI,CAACC,SAAS,CAACC,UAAU,CAAC;YAC/BN,OAAOb,MAAMa,KAAK;YAClBV,OAAOH,MAAMG,KAAK;YAClBiB,UAAUN;QACZ;IACF;IAEA,MAAMZ,cAAcC,KAAa,EAAoB;QACnD,MAAMkB,WAAW,MAAM,IAAI,CAACC,eAAe,CAACC,sBAAsB,CAACpB;QACnE,IAAIkB,UAAU;YACZ,OAAO;QACT;QACA,OAAO;IACT;IAEA,MAAMT,cAAcC,KAAa,EAAoB;QACnD,MAAMW,WAAW,MAAM,IAAI,CAACF,eAAe,CAACC,sBAAsB,CAACV;QACnE,IAAIW,UAAU;YACZ,OAAO;QACT;QACA,OAAO;IACT;IA9CAC,YACE,AAAyCP,SAAwB,EACjE,AAAiBI,eAAgC,EACjD,AAAiBP,WAAwB,CACzC;aAHyCG,YAAAA;aACxBI,kBAAAA;aACAP,cAAAA;IAChB;AA2CL;;;6DA9CsBW"}