{"version":3,"sources":["../../../../../src/modules/user-accounts/application/queries/get-all-user-sessions.query.ts"],"sourcesContent":["import { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { SessionViewDto } from '../../api/view-dto/session.view-dto';\nimport { Inject } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { DomainExceptionCode } from 'src/core/exceptions/domain-exception-codes';\nimport { DomainException } from 'src/core/exceptions/domain-exceptions';\nimport { REFRESH_TOKEN_STRATEGY_INJECT_TOKEN } from '../../constants/auth-token.inject-constants';\nimport {\n  DeviceAuthSession,\n  SessionModelType,\n} from '../../domain/session.entity';\nimport { CreateRefreshTokenDto } from '../../dto/create-refresh-token.dto';\n\nexport class GetUserSessionsQuery {\n  constructor(public token: string) {}\n}\n\n@QueryHandler(GetUserSessionsQuery)\nexport class GetUserSessionsQueryHandler\n  implements IQueryHandler<GetUserSessionsQuery, SessionViewDto[]>\n{\n  constructor(\n    @Inject(REFRESH_TOKEN_STRATEGY_INJECT_TOKEN)\n    private readonly jwtRefreshTokService: JwtService,\n    @InjectModel(DeviceAuthSession.name)\n    private readonly SessionModel: SessionModelType,\n  ) {}\n\n  async execute(query: GetUserSessionsQuery): Promise<SessionViewDto[]> {\n    const payload = this.jwtRefreshTokService.decode<CreateRefreshTokenDto>(\n      query.token,\n    );\n    const sessions = await this.SessionModel.find({\n      userId: payload.userId,\n    }).exec();\n    if (!sessions.length) {\n      throw new DomainException({\n        code: DomainExceptionCode.InternalServerError,\n        message: 'Not found any sessions for a valid refresh token',\n      });\n    }\n    const res: SessionViewDto[] = [];\n    sessions.forEach((session) => {\n      res.push(SessionViewDto.mapToView(session));\n    });\n    return res;\n  }\n}\n"],"names":["GetUserSessionsQuery","GetUserSessionsQueryHandler","constructor","token","execute","query","payload","jwtRefreshTokService","decode","sessions","SessionModel","find","userId","exec","length","DomainException","code","DomainExceptionCode","InternalServerError","message","res","forEach","session","push","SessionViewDto","mapToView","name"],"mappings":";;;;;;;;;;;QAcaA;eAAAA;;QAKAC;eAAAA;;;sBAnB+B;gCACb;wBACR;qBACI;0BACC;sCACQ;kCACJ;0CACoB;+BAI7C;;;;;;;;;;;;;;;AAGA,IAAA,AAAMD,uBAAN,MAAMA;IACXE,YAAY,AAAOC,KAAa,CAAE;aAAfA,QAAAA;IAAgB;AACrC;AAGO,IAAA,AAAMF,8BAAN,MAAMA;IAUX,MAAMG,QAAQC,KAA2B,EAA6B;QACpE,MAAMC,UAAU,IAAI,CAACC,oBAAoB,CAACC,MAAM,CAC9CH,MAAMF,KAAK;QAEb,MAAMM,WAAW,MAAM,IAAI,CAACC,YAAY,CAACC,IAAI,CAAC;YAC5CC,QAAQN,QAAQM,MAAM;QACxB,GAAGC,IAAI;QACP,IAAI,CAACJ,SAASK,MAAM,EAAE;YACpB,MAAM,IAAIC,iCAAe,CAAC;gBACxBC,MAAMC,yCAAmB,CAACC,mBAAmB;gBAC7CC,SAAS;YACX;QACF;QACA,MAAMC,MAAwB,EAAE;QAChCX,SAASY,OAAO,CAAC,CAACC;YAChBF,IAAIG,IAAI,CAACC,8BAAc,CAACC,SAAS,CAACH;QACpC;QACA,OAAOF;IACT;IAzBAlB,YACE,AACiBK,oBAAgC,EACjD,AACiBG,YAA8B,CAC/C;aAHiBH,uBAAAA;aAEAG,eAAAA;IAChB;AAqBL;;;;6EAvBmCgB"}