{"version":3,"sources":["../../../../src/modules/user-accounts/domain/user.entity.ts"],"sourcesContent":["import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport {\n  EmailConfirmation,\n  EmailConfirmationSchema,\n} from './emailConfirmation.schema';\nimport {\n  PasswordRecovery,\n  PasswordRecoverySchema,\n} from './passRecovery.schema';\nimport { randomUUID, UUID } from 'crypto';\nimport { DateTime, Duration } from 'luxon';\nimport { HydratedDocument, Model } from 'mongoose';\nimport { CreateUserDomainDto } from './dto/create-user.domain.dto';\nimport {\n  DomainException,\n  Extension,\n} from 'src/core/exceptions/domain-exceptions';\nimport { DomainExceptionCode } from 'src/core/exceptions/domain-exception-codes';\n\nexport const loginConstraints = {\n  minLength: 3,\n  maxLength: 10,\n};\n\nexport const passwordConstraints = {\n  minLength: 6,\n  maxLength: 20,\n};\n\n/**\n * User entity schema\n * This class represents the schema and behaviour of the user entity\n */\n@Schema({ timestamps: true })\nexport class User {\n  /**\n   * User name\n   * @type {string}\n   * @required\n   */\n  @Prop({ type: String, required: true, ...loginConstraints })\n  login: string;\n\n  /**\n   * user email\n   * @type {string}\n   * @required\n   */\n  @Prop({ type: String, required: true })\n  email: string;\n\n  /**\n   * user password hash\n   * @type {string}\n   * @required\n   */\n  @Prop({ type: String, required: true })\n  passwordHash: string;\n\n  @Prop({ type: EmailConfirmationSchema, required: false, default: null })\n  emailConfirmation: EmailConfirmation | null;\n\n  @Prop({ type: PasswordRecoverySchema, required: false, default: null })\n  passwordRecovery: PasswordRecovery | null;\n  /**\n   * Timestamps\n   * @type {Date}\n   */\n  createdAt: Date;\n  updatedAt: Date;\n\n  /**\n   * Deletion timestamp\n   * nullable, if exists - user is deleted\n   * @type {Date | null}\n   */\n  @Prop({ type: Date, nullable: true, default: null })\n  deletedAt: Date | null;\n\n  /**\n   * Generates random UUID, used in pass recovery\n   * and email confirmation\n   */\n  genConfirmationCode(): UUID {\n    return randomUUID();\n  }\n\n  /**\n   * generates pass recovery confirmation code and sets\n   * related fields in passwordRecovery obj\n   */\n  genPasswordRecovery(duration: Duration) {\n    this.passwordRecovery = {\n      confirmationCode: this.genConfirmationCode(),\n      expirationDate: DateTime.now().plus(duration).toJSDate(),\n    };\n  }\n\n  /**\n   * generates email confirmation code and sets related\n   * fields in email.Confirmation object\n   */\n  genEmailConfirmation(duration: Duration) {\n    this.emailConfirmation = {\n      expirationDate: DateTime.now().plus(duration).toJSDate(),\n      confirmationCode: this.genConfirmationCode(),\n      isConfirmed: false,\n    };\n  }\n\n  /**\n   * checks pass recovery code expiration\n   * and resets password hash\n   */\n  confirmPassword(newPassHash: string) {\n    if (!this.passwordRecovery) {\n      throw new DomainException({\n        code: DomainExceptionCode.InternalServerError,\n        message: 'No password confirmation object in entity',\n      });\n    }\n    if (\n      DateTime.fromJSDate(this.passwordRecovery.expirationDate) < DateTime.now()\n    ) {\n      throw new DomainException({\n        code: DomainExceptionCode.PasswordRecoveryCodeExpired,\n        message: 'Pass recovery code has expired',\n        extensions: [\n          new Extension('Pass recovery code has expired', 'recoveryCode'),\n        ],\n      });\n    }\n    this.passwordHash = newPassHash;\n    this.passwordRecovery = null;\n  }\n\n  /**\n   * checks email is not confirmed and code is not expired\n   * marks email as confirmed\n   */\n  confirmEmail() {\n    if (!this.emailConfirmation || !this.emailConfirmation.expirationDate) {\n      throw new DomainException({\n        code: DomainExceptionCode.InternalServerError,\n        message: 'No email confirmation object in entity',\n      });\n    }\n    if (this.emailConfirmation.isConfirmed) {\n      throw new DomainException({\n        code: DomainExceptionCode.BadRequest,\n        message: 'Email is already confirmed',\n        extensions: [new Extension('Email is already confirmed', 'code')],\n      });\n    }\n    if (\n      DateTime.fromJSDate(this.emailConfirmation.expirationDate) <\n      DateTime.now()\n    ) {\n      throw new DomainException({\n        code: DomainExceptionCode.ConfirmationCodeExpired,\n        message: 'Email confirmation code has expired',\n        extensions: [new Extension('Email code has expired', 'code')],\n      });\n    }\n    this.emailConfirmation.isConfirmed = true;\n  }\n\n  confirmEmailByAdmin() {\n    this.emailConfirmation = {\n      confirmationCode: null,\n      expirationDate: null,\n      isConfirmed: true,\n    };\n  }\n\n  markDeleted() {\n    if (this.deletedAt !== null) {\n      throw new DomainException({\n        code: DomainExceptionCode.NotFound,\n        message: 'Entity is already deleted',\n      });\n    }\n    this.deletedAt = new Date();\n  }\n\n  static createUser(dto: CreateUserDomainDto): UserDocument {\n    const user = new this();\n    user.email = dto.email;\n    user.login = dto.login;\n    user.passwordHash = dto.passHash;\n\n    return user as UserDocument;\n  }\n}\n\nexport type UserDocument = HydratedDocument<User>;\nexport type UserModelType = Model<UserDocument> & typeof User;\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\nUserSchema.loadClass(User);\n"],"names":["User","UserSchema","loginConstraints","passwordConstraints","minLength","maxLength","genConfirmationCode","randomUUID","genPasswordRecovery","duration","passwordRecovery","confirmationCode","expirationDate","DateTime","now","plus","toJSDate","genEmailConfirmation","emailConfirmation","isConfirmed","confirmPassword","newPassHash","DomainException","code","DomainExceptionCode","InternalServerError","message","fromJSDate","PasswordRecoveryCodeExpired","extensions","Extension","passwordHash","confirmEmail","BadRequest","ConfirmationCodeExpired","confirmEmailByAdmin","markDeleted","deletedAt","NotFound","Date","createUser","dto","user","email","login","passHash","type","String","required","EmailConfirmationSchema","default","PasswordRecoverySchema","nullable","timestamps","SchemaFactory","createForClass","loadClass"],"mappings":";;;;;;;;;;;QAkCaA;eAAAA;;QAoKAC;eAAAA;;QAnLAC;eAAAA;;QAKAC;eAAAA;;;0BAxB+B;yCAIrC;oCAIA;wBAC0B;uBACE;kCAM5B;sCAC6B;;;;;;;;;;AAE7B,MAAMD,mBAAmB;IAC9BE,WAAW;IACXC,WAAW;AACb;AAEO,MAAMF,sBAAsB;IACjCC,WAAW;IACXC,WAAW;AACb;AAOO,IAAA,AAAML,OAAN,MAAMA;IA6CX;;;GAGC,GACDM,sBAA4B;QAC1B,OAAOC,IAAAA,kBAAU;IACnB;IAEA;;;GAGC,GACDC,oBAAoBC,QAAkB,EAAE;QACtC,IAAI,CAACC,gBAAgB,GAAG;YACtBC,kBAAkB,IAAI,CAACL,mBAAmB;YAC1CM,gBAAgBC,eAAQ,CAACC,GAAG,GAAGC,IAAI,CAACN,UAAUO,QAAQ;QACxD;IACF;IAEA;;;GAGC,GACDC,qBAAqBR,QAAkB,EAAE;QACvC,IAAI,CAACS,iBAAiB,GAAG;YACvBN,gBAAgBC,eAAQ,CAACC,GAAG,GAAGC,IAAI,CAACN,UAAUO,QAAQ;YACtDL,kBAAkB,IAAI,CAACL,mBAAmB;YAC1Ca,aAAa;QACf;IACF;IAEA;;;GAGC,GACDC,gBAAgBC,WAAmB,EAAE;QACnC,IAAI,CAAC,IAAI,CAACX,gBAAgB,EAAE;YAC1B,MAAM,IAAIY,iCAAe,CAAC;gBACxBC,MAAMC,yCAAmB,CAACC,mBAAmB;gBAC7CC,SAAS;YACX;QACF;QACA,IACEb,eAAQ,CAACc,UAAU,CAAC,IAAI,CAACjB,gBAAgB,CAACE,cAAc,IAAIC,eAAQ,CAACC,GAAG,IACxE;YACA,MAAM,IAAIQ,iCAAe,CAAC;gBACxBC,MAAMC,yCAAmB,CAACI,2BAA2B;gBACrDF,SAAS;gBACTG,YAAY;oBACV,IAAIC,2BAAS,CAAC,kCAAkC;iBACjD;YACH;QACF;QACA,IAAI,CAACC,YAAY,GAAGV;QACpB,IAAI,CAACX,gBAAgB,GAAG;IAC1B;IAEA;;;GAGC,GACDsB,eAAe;QACb,IAAI,CAAC,IAAI,CAACd,iBAAiB,IAAI,CAAC,IAAI,CAACA,iBAAiB,CAACN,cAAc,EAAE;YACrE,MAAM,IAAIU,iCAAe,CAAC;gBACxBC,MAAMC,yCAAmB,CAACC,mBAAmB;gBAC7CC,SAAS;YACX;QACF;QACA,IAAI,IAAI,CAACR,iBAAiB,CAACC,WAAW,EAAE;YACtC,MAAM,IAAIG,iCAAe,CAAC;gBACxBC,MAAMC,yCAAmB,CAACS,UAAU;gBACpCP,SAAS;gBACTG,YAAY;oBAAC,IAAIC,2BAAS,CAAC,8BAA8B;iBAAQ;YACnE;QACF;QACA,IACEjB,eAAQ,CAACc,UAAU,CAAC,IAAI,CAACT,iBAAiB,CAACN,cAAc,IACzDC,eAAQ,CAACC,GAAG,IACZ;YACA,MAAM,IAAIQ,iCAAe,CAAC;gBACxBC,MAAMC,yCAAmB,CAACU,uBAAuB;gBACjDR,SAAS;gBACTG,YAAY;oBAAC,IAAIC,2BAAS,CAAC,0BAA0B;iBAAQ;YAC/D;QACF;QACA,IAAI,CAACZ,iBAAiB,CAACC,WAAW,GAAG;IACvC;IAEAgB,sBAAsB;QACpB,IAAI,CAACjB,iBAAiB,GAAG;YACvBP,kBAAkB;YAClBC,gBAAgB;YAChBO,aAAa;QACf;IACF;IAEAiB,cAAc;QACZ,IAAI,IAAI,CAACC,SAAS,KAAK,MAAM;YAC3B,MAAM,IAAIf,iCAAe,CAAC;gBACxBC,MAAMC,yCAAmB,CAACc,QAAQ;gBAClCZ,SAAS;YACX;QACF;QACA,IAAI,CAACW,SAAS,GAAG,IAAIE;IACvB;IAEA,OAAOC,WAAWC,GAAwB,EAAgB;QACxD,MAAMC,OAAO,IAAI,IAAI;QACrBA,KAAKC,KAAK,GAAGF,IAAIE,KAAK;QACtBD,KAAKE,KAAK,GAAGH,IAAIG,KAAK;QACtBF,KAAKX,YAAY,GAAGU,IAAII,QAAQ;QAEhC,OAAOH;IACT;AACF;;;QAzJUI,MAAMC;QAAQC,UAAU;QAAM,GAAG9C,gBAAgB;;;;;;QAQjD4C,MAAMC;QAAQC,UAAU;;;;;;QAQxBF,MAAMC;QAAQC,UAAU;;;;;;QAGxBF,MAAMG,gDAAuB;QAAED,UAAU;QAAOE,SAAS;;;;;;QAGzDJ,MAAMK,0CAAsB;QAAEH,UAAU;QAAOE,SAAS;;;;;;QAcxDJ,MAAMP;QAAMa,UAAU;QAAMF,SAAS;;;;;;QA3CrCG,YAAY;;;AAqKf,MAAMpD,aAAaqD,uBAAa,CAACC,cAAc,CAACvD;AAEvDC,WAAWuD,SAAS,CAACxD"}