{"version":3,"sources":["../../../../src/modules/user-accounts/api/auth.controller.ts"],"sourcesContent":["import {\n  Body,\n  Controller,\n  Get,\n  Headers,\n  HttpCode,\n  HttpStatus,\n  Ip,\n  Post,\n  Query,\n  Req,\n  Res,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthService } from '../application/auth.service';\nimport { SessionsService } from '../application/devices-security.service';\nimport { UserLoginInputDto } from './input-dto/user-login-dto';\nimport { LoginSuccess } from './view-dto/login-success.view-dto';\nimport { LoginDto } from '../dto/login.dto';\nimport { Request, Response, response } from 'express';\nimport { ConfigService } from '@nestjs/config';\nimport { ConfigurationType } from 'src/modules/config/config.module';\nimport { MeViewDto } from './view-dto/users.view-dto';\nimport { ExtractUserFromRequest } from '../guards/decorators/extract-user-from-request.decorator';\nimport { UserContextDto } from '../guards/dto/user-context.dto';\nimport { UsersQueryRepository } from '../infrastructure/query/users.query-repository';\nimport { RegisterUserInputDto } from './input-dto/register-user.input-dto';\nimport { ResendEmailConfirmationInputDto } from './input-dto/resend-email.input-dto';\nimport { ConfirmEmailInputDto } from './input-dto/email-confirm.input-dto';\nimport { PassRecoverInputDto } from './input-dto/pass-recover.input-dto';\nimport { ConfirmPasswordDto } from '../dto/confirm-password.dto';\nimport { ConfirmPasswordInputDto } from './input-dto/pass-confirm.input-dto';\nimport { JwtAuthGuard } from '../guards/bearer/jwt-auth.guard';\nimport { RefreshTokenGuard } from '../guards/bearer/jwt-refresh-token-guard';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly sessionsService: SessionsService,\n    private readonly configService: ConfigService<ConfigurationType>,\n    private readonly usersQueryRepo: UsersQueryRepository,\n  ) {}\n\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  async login(\n    @Body() body: UserLoginInputDto,\n    @Headers('user-agent') userAgent: string,\n    @Ip() ip: string,\n    @Res() response: Response,\n  ) {\n    if (!userAgent) {\n      userAgent = 'default agent';\n    }\n\n    const creds: LoginDto = {\n      loginOrEmail: body.loginOrEmail,\n      password: body.password,\n      ip: ip ? ip : '',\n      title: userAgent,\n    };\n    const { accessToken, refreshToken } =\n      await this.authService.checkCredentials(creds);\n    response\n      .cookie('refreshToken', refreshToken, {\n        httpOnly: true,\n        secure: this.configService.get('nodeEnv') === 'testing' ? false : true,\n      })\n      .send({ accessToken });\n    return;\n  }\n\n  @UseGuards(RefreshTokenGuard)\n  @Post('refresh-token')\n  @HttpCode(HttpStatus.OK)\n  async reissueTokens(@Req() req: Request, @Res() res: Response) {\n    const token = req.cookies.refreshToken as string;\n    const { refreshToken, accessToken } =\n      await this.authService.reissueTokensPair(token);\n    res\n      .cookie('refreshToken', refreshToken, {\n        httpOnly: true,\n        secure: this.configService.get('nodeEnv') === 'testing' ? false : true,\n      })\n      .send({ accessToken });\n    return;\n  }\n\n  @UseGuards(RefreshTokenGuard)\n  @Post('logout')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async logout(@Req() req: Request, @Res() res: Response) {\n    const token = req.cookies.refreshToken as string;\n    await this.sessionsService.logout(token);\n    res.clearCookie('refreshToken').send();\n    return;\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('me')\n  @HttpCode(HttpStatus.OK)\n  async getUserInfo(\n    @ExtractUserFromRequest() user: UserContextDto,\n  ): Promise<MeViewDto> {\n    return this.usersQueryRepo.getUserInfoOrFail(user.userId);\n  }\n\n  @Post('registration')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async registerUser(@Body() body: RegisterUserInputDto) {\n    await this.authService.registerUser(body);\n    return;\n  }\n\n  @Post('registration-email-resending')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async resendEmailConfirmation(@Body() dto: ResendEmailConfirmationInputDto) {\n    await this.authService.resendConfirmation(dto.email);\n    return;\n  }\n\n  @Post('registration-confirmation')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async confirmEmail(@Body() dto: ConfirmEmailInputDto) {\n    await this.authService.confirmEmail(dto.code);\n    return;\n  }\n\n  @Post('password-recovery')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async recoverPassword(@Body() dto: PassRecoverInputDto) {\n    await this.authService.recoverPassword(dto.email);\n    return;\n  }\n\n  @Post('new-password')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async confirmPassword(@Body() dto: ConfirmPasswordInputDto) {\n    const confirmDto: ConfirmPasswordDto = {\n      code: dto.recoveryCode,\n      password: dto.newPassword,\n    };\n    await this.authService.confirmPassword(confirmDto);\n    return;\n  }\n}\n"],"names":["AuthController","login","body","userAgent","ip","response","creds","loginOrEmail","password","title","accessToken","refreshToken","authService","checkCredentials","cookie","httpOnly","secure","configService","get","send","reissueTokens","req","res","token","cookies","reissueTokensPair","logout","sessionsService","clearCookie","getUserInfo","user","usersQueryRepo","getUserInfoOrFail","userId","registerUser","resendEmailConfirmation","dto","resendConfirmation","email","confirmEmail","code","recoverPassword","confirmPassword","confirmDto","recoveryCode","newPassword","constructor","OK","NO_CONTENT"],"mappings":"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"}