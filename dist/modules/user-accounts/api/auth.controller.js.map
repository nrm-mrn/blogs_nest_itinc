{"version":3,"sources":["../../../../src/modules/user-accounts/api/auth.controller.ts"],"sourcesContent":["import {\n  Body,\n  Controller,\n  Get,\n  Headers,\n  HttpCode,\n  HttpStatus,\n  Ip,\n  Post,\n  Req,\n  Res,\n  UseGuards,\n} from '@nestjs/common';\nimport { UserLoginInputDto } from './input-dto/user-login-dto';\nimport { LoginDto } from '../dto/login.dto';\nimport { Request, Response } from 'express';\nimport { MeViewDto } from './view-dto/users.view-dto';\nimport { ExtractUserFromRequest } from '../guards/decorators/extract-user-from-request.decorator';\nimport { UserContextDto } from '../guards/dto/user-context.dto';\nimport { RegisterUserInputDto } from './input-dto/register-user.input-dto';\nimport { ResendEmailConfirmationInputDto } from './input-dto/resend-email.input-dto';\nimport { ConfirmEmailInputDto } from './input-dto/email-confirm.input-dto';\nimport { PassRecoverInputDto } from './input-dto/pass-recover.input-dto';\nimport { ConfirmPasswordInputDto } from './input-dto/pass-confirm.input-dto';\nimport { JwtAuthGuard } from '../guards/bearer/jwt-auth.guard';\nimport { RefreshTokenGuard } from '../guards/bearer/jwt-refresh-token-guard';\nimport { SkipThrottle, ThrottlerGuard } from '@nestjs/throttler';\nimport { CommandBus, QueryBus } from '@nestjs/cqrs';\nimport { GetUserInfoQuery } from '../application/queries/get-user-info.query';\nimport { RegisterUserCommand } from '../application/usecases/register-user.usecase';\nimport { ResendEmailConfirmationCommand } from '../application/usecases/resend-email-confirmation.usecase';\nimport { LoginUserCommand } from '../application/usecases/login-user.usecase';\nimport { ConfirmUserEmailCommand } from '../application/usecases/confirm-user-email.usecase';\nimport { ReissueTokensCommand } from '../application/usecases/reissue-tokens.usecase';\nimport { RecoverPasswordCommand } from '../application/usecases/recover-password.usecase';\nimport { ConfirmPasswordCommand } from '../application/usecases/confirm-new-password.usecase';\nimport { LogoutCommand } from '../application/usecases/logout-user.usecase';\nimport { UserAccountConfig } from '../config/user-account.config';\n\n@UseGuards(ThrottlerGuard)\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private readonly configService: UserAccountConfig,\n    private readonly queryBus: QueryBus,\n    private readonly commandBus: CommandBus,\n  ) {}\n\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  async login(\n    @Body() body: UserLoginInputDto,\n    @Headers('user-agent') userAgent: string,\n    @Ip() ip: string,\n    @Res() response: Response,\n  ) {\n    if (!userAgent) {\n      userAgent = 'default agent';\n    }\n\n    const creds: LoginDto = {\n      loginOrEmail: body.loginOrEmail,\n      password: body.password,\n      ip: ip ? ip : '',\n      title: userAgent,\n    };\n    const { accessToken, refreshToken } = await this.commandBus.execute(\n      new LoginUserCommand(\n        creds.loginOrEmail,\n        creds.password,\n        creds.ip,\n        creds.title,\n      ),\n    );\n    response\n      .cookie('refreshToken', refreshToken, {\n        httpOnly: true,\n        secure: this.configService.secureCookie,\n      })\n      .send({ accessToken });\n  }\n\n  @UseGuards(RefreshTokenGuard)\n  @SkipThrottle()\n  @Post('refresh-token')\n  @HttpCode(HttpStatus.OK)\n  async reissueTokens(@Req() req: Request, @Res() res: Response) {\n    const token = req.cookies.refreshToken as string;\n    const { refreshToken, accessToken } = await this.commandBus.execute(\n      new ReissueTokensCommand(token),\n    );\n    res\n      .cookie('refreshToken', refreshToken, {\n        httpOnly: true,\n        secure: this.configService.secureCookie,\n      })\n      .send({ accessToken });\n  }\n\n  @UseGuards(RefreshTokenGuard)\n  @SkipThrottle()\n  @Post('logout')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async logout(@Req() req: Request, @Res() res: Response) {\n    const token = req.cookies.refreshToken as string;\n    await this.commandBus.execute(new LogoutCommand(token));\n    res.clearCookie('refreshToken').send();\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @SkipThrottle()\n  @Get('me')\n  @HttpCode(HttpStatus.OK)\n  async getUserInfo(\n    @ExtractUserFromRequest() user: UserContextDto,\n  ): Promise<MeViewDto> {\n    return this.queryBus.execute(new GetUserInfoQuery(user.userId));\n  }\n\n  @Post('registration')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async registerUser(@Body() body: RegisterUserInputDto) {\n    return this.commandBus.execute(\n      new RegisterUserCommand(body.login, body.password, body.email),\n    );\n  }\n\n  @Post('registration-email-resending')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async resendEmailConfirmation(@Body() dto: ResendEmailConfirmationInputDto) {\n    return this.commandBus.execute(\n      new ResendEmailConfirmationCommand(dto.email),\n    );\n  }\n\n  @Post('registration-confirmation')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async confirmEmail(@Body() dto: ConfirmEmailInputDto) {\n    return this.commandBus.execute(new ConfirmUserEmailCommand(dto.code));\n  }\n\n  @Post('password-recovery')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async recoverPassword(@Body() dto: PassRecoverInputDto) {\n    return this.commandBus.execute(new RecoverPasswordCommand(dto.email));\n  }\n\n  @Post('new-password')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async confirmPassword(@Body() dto: ConfirmPasswordInputDto) {\n    return this.commandBus.execute(\n      new ConfirmPasswordCommand(dto.recoveryCode, dto.newPassword),\n    );\n  }\n}\n"],"names":["AuthController","login","body","userAgent","ip","response","creds","loginOrEmail","password","title","accessToken","refreshToken","commandBus","execute","LoginUserCommand","cookie","httpOnly","secure","configService","secureCookie","send","reissueTokens","req","res","token","cookies","ReissueTokensCommand","logout","LogoutCommand","clearCookie","getUserInfo","user","queryBus","GetUserInfoQuery","userId","registerUser","RegisterUserCommand","email","resendEmailConfirmation","dto","ResendEmailConfirmationCommand","confirmEmail","ConfirmUserEmailCommand","code","recoverPassword","RecoverPasswordCommand","confirmPassword","ConfirmPasswordCommand","recoveryCode","newPassword","constructor","OK","NO_CONTENT"],"mappings":"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"}