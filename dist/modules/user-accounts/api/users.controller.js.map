{"version":3,"sources":["../../../../src/modules/user-accounts/api/users.controller.ts"],"sourcesContent":["import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Post,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { UsersService } from '../application/users.service';\nimport { UsersQueryRepository } from '../infrastructure/query/users.query-repository';\nimport { GetUsersQueryParams } from './input-dto/get-users-query-params.input-dto';\nimport { PaginatedViewDto } from 'src/core/dto/base.paginated.view-dto';\nimport { UserViewDto } from './view-dto/users.view-dto';\nimport { BasicAuthGuard } from '../guards/basic/basic-auth.guard';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { DomainException } from 'src/core/exceptions/domain-exceptions';\nimport { DomainExceptionCode } from 'src/core/exceptions/domain-exception-codes';\nimport { ObjectIdValidationPipe } from 'src/core/pipes/object-id-validation-pipe.service';\nimport { CreateUserInputDto } from './input-dto/create-user.input-dto';\n\n@Controller('users')\n@UseGuards(BasicAuthGuard)\nexport class UsersController {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly usersQueryRepo: UsersQueryRepository,\n  ) {}\n\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  async getAllUsers(\n    @Query() query: GetUsersQueryParams,\n  ): Promise<PaginatedViewDto<UserViewDto[]>> {\n    return this.usersQueryRepo.getAllUsers(query);\n  }\n\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  async createUser(@Body() body: CreateUserInputDto): Promise<UserViewDto> {\n    const input: CreateUserDto = {\n      login: body.login,\n      email: body.email,\n      password: body.password,\n    };\n    const { userId } = await this.usersService.createUser(input);\n    const user = await this.usersQueryRepo.getUserById(userId);\n    if (!user) {\n      throw new DomainException({\n        code: DomainExceptionCode.InternalServerError,\n        message: 'User not found after creation',\n      });\n    }\n    return user;\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async deleteUser(@Param('id', ObjectIdValidationPipe) id: string) {\n    return this.usersService.deleteUser(id);\n  }\n}\n"],"names":["UsersController","getAllUsers","query","usersQueryRepo","createUser","body","input","login","email","password","userId","usersService","user","getUserById","DomainException","code","DomainExceptionCode","InternalServerError","message","deleteUser","id","constructor","OK","CREATED","NO_CONTENT"],"mappings":";;;;+BA0BaA;;;eAAAA;;;wBAfN;8BACsB;sCACQ;6CACD;gCAGL;kCAEC;sCACI;+CACG;oCACJ;;;;;;;;;;;;;;;AAI5B,IAAA,AAAMA,kBAAN,MAAMA;IAMX,MAEMC,YACJ,AAASC,KAA0B,EACO;QAC1C,OAAO,IAAI,CAACC,cAAc,CAACF,WAAW,CAACC;IACzC;IAEA,MAEME,WAAW,AAAQC,IAAwB,EAAwB;QACvE,MAAMC,QAAuB;YAC3BC,OAAOF,KAAKE,KAAK;YACjBC,OAAOH,KAAKG,KAAK;YACjBC,UAAUJ,KAAKI,QAAQ;QACzB;QACA,MAAM,EAAEC,MAAM,EAAE,GAAG,MAAM,IAAI,CAACC,YAAY,CAACP,UAAU,CAACE;QACtD,MAAMM,OAAO,MAAM,IAAI,CAACT,cAAc,CAACU,WAAW,CAACH;QACnD,IAAI,CAACE,MAAM;YACT,MAAM,IAAIE,iCAAe,CAAC;gBACxBC,MAAMC,yCAAmB,CAACC,mBAAmB;gBAC7CC,SAAS;YACX;QACF;QACA,OAAON;IACT;IAEA,MAEMO,WAAW,AAAqCC,EAAU,EAAE;QAChE,OAAO,IAAI,CAACT,YAAY,CAACQ,UAAU,CAACC;IACtC;IApCAC,YACE,AAAiBV,YAA0B,EAC3C,AAAiBR,cAAoC,CACrD;aAFiBQ,eAAAA;aACAR,iBAAAA;IAChB;AAkCL;;;6CA/BuBmB;;;;;;;;;;6CAQAC;;;;;;;;;;6CAmBAC"}