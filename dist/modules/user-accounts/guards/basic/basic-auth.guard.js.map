{"version":3,"sources":["../../../../../src/modules/user-accounts/guards/basic/basic-auth.guard.ts"],"sourcesContent":["import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Reflector } from '@nestjs/core';\nimport { Request } from 'express';\nimport { ConfigurationType } from 'src/modules/config/config.module';\nimport { IS_PUBLIC_KEY } from '../decorators/public.decorator';\nimport { DomainException } from 'src/core/exceptions/domain-exceptions';\nimport { DomainExceptionCode } from 'src/core/exceptions/domain-exception-codes';\n\n@Injectable()\nexport class BasicAuthGuard implements CanActivate {\n  constructor(\n    private readonly configService: ConfigService<ConfigurationType>,\n    private readonly reflector: Reflector,\n  ) { }\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const request = context.switchToHttp().getRequest<Request>()\n    const authHeader = request.headers.authorization;\n\n    const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass()\n    ])\n    if (isPublic) {\n      return true\n    }\n\n    if (!authHeader || !authHeader.startsWith('Basic ')) {\n      throw new DomainException({\n        code: DomainExceptionCode.Unauthorized,\n        message: 'unauthorized',\n      })\n    }\n\n    const adminUsername = this.configService.get('adminUsername') as string;\n    const adminPassword = this.configService.get('adminPassword') as string;\n\n    const base64Creds = authHeader.split(' ')[1];\n    const credentials = Buffer.from(base64Creds, 'base64').toString('utf-8')\n    const [username, password] = credentials.split(':');\n\n    if (username === adminUsername && password === adminPassword) {\n      return true;\n    } else {\n      throw new DomainException({\n        code: DomainExceptionCode.Unauthorized,\n        message: 'unauthorized'\n      })\n    }\n  }\n}\n"],"names":["BasicAuthGuard","canActivate","context","request","switchToHttp","getRequest","authHeader","headers","authorization","isPublic","reflector","getAllAndOverride","IS_PUBLIC_KEY","getHandler","getClass","startsWith","DomainException","code","DomainExceptionCode","Unauthorized","message","adminUsername","configService","get","adminPassword","base64Creds","split","credentials","Buffer","from","toString","username","password","constructor"],"mappings":";;;;+BAUaA;;;eAAAA;;;wBAV6C;wBAC5B;sBACJ;iCAGI;kCACE;sCACI;;;;;;;;;;AAG7B,IAAA,AAAMA,iBAAN,MAAMA;IAMX,MAAMC,YAAYC,OAAyB,EAAoB;QAC7D,MAAMC,UAAUD,QAAQE,YAAY,GAAGC,UAAU;QACjD,MAAMC,aAAaH,QAAQI,OAAO,CAACC,aAAa;QAEhD,MAAMC,WAAW,IAAI,CAACC,SAAS,CAACC,iBAAiB,CAAUC,8BAAa,EAAE;YACxEV,QAAQW,UAAU;YAClBX,QAAQY,QAAQ;SACjB;QACD,IAAIL,UAAU;YACZ,OAAO;QACT;QAEA,IAAI,CAACH,cAAc,CAACA,WAAWS,UAAU,CAAC,WAAW;YACnD,MAAM,IAAIC,iCAAe,CAAC;gBACxBC,MAAMC,yCAAmB,CAACC,YAAY;gBACtCC,SAAS;YACX;QACF;QAEA,MAAMC,gBAAgB,IAAI,CAACC,aAAa,CAACC,GAAG,CAAC;QAC7C,MAAMC,gBAAgB,IAAI,CAACF,aAAa,CAACC,GAAG,CAAC;QAE7C,MAAME,cAAcnB,WAAWoB,KAAK,CAAC,IAAI,CAAC,EAAE;QAC5C,MAAMC,cAAcC,OAAOC,IAAI,CAACJ,aAAa,UAAUK,QAAQ,CAAC;QAChE,MAAM,CAACC,UAAUC,SAAS,GAAGL,YAAYD,KAAK,CAAC;QAE/C,IAAIK,aAAaV,iBAAiBW,aAAaR,eAAe;YAC5D,OAAO;QACT,OAAO;YACL,MAAM,IAAIR,iCAAe,CAAC;gBACxBC,MAAMC,yCAAmB,CAACC,YAAY;gBACtCC,SAAS;YACX;QACF;IACF;IAvCAa,YACE,AAAiBX,aAA+C,EAChE,AAAiBZ,SAAoB,CACrC;aAFiBY,gBAAAA;aACAZ,YAAAA;IACf;AAqCN"}