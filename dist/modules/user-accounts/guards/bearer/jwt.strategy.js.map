{"version":3,"sources":["../../../../../src/modules/user-accounts/guards/bearer/jwt.strategy.ts"],"sourcesContent":["import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { UserContextDto } from '../dto/user-context.dto';\nimport { UserAccountConfig } from '../../config/user-account.config';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(configService: UserAccountConfig) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.jwtAccessSecret,\n    });\n  }\n\n  /**\n   * функция принимает payload из jwt токена и возвращает то, что впоследствии будет записано в req.user\n   * @param payload\n   */\n  validate(payload: { id: string; iat: number; exp: number }): UserContextDto {\n    return { userId: payload.id };\n  }\n}\n"],"names":["JwtStrategy","PassportStrategy","Strategy","validate","payload","userId","id","constructor","configService","jwtFromRequest","ExtractJwt","fromAuthHeaderAsBearerToken","ignoreExpiration","secretOrKey","jwtAccessSecret"],"mappings":";;;;+BAOaA;;;eAAAA;;;6BAPwB;0BACJ;wBACN;mCAEO;;;;;;;;;;AAG3B,IAAA,AAAMA,cAAN,MAAMA,oBAAoBC,IAAAA,0BAAgB,EAACC,qBAAQ,EAAE;IAS1D;;;GAGC,GACDC,SAASC,OAAiD,EAAkB;QAC1E,OAAO;YAAEC,QAAQD,QAAQE,EAAE;QAAC;IAC9B;IAdAC,YAAYC,aAAgC,CAAE;QAC5C,KAAK,CAAC;YACJC,gBAAgBC,uBAAU,CAACC,2BAA2B;YACtDC,kBAAkB;YAClBC,aAAaL,cAAcM,eAAe;QAC5C;IACF;AASF"}