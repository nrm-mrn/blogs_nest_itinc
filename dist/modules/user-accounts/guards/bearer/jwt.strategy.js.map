{"version":3,"sources":["../../../../../src/modules/user-accounts/guards/bearer/jwt.strategy.ts"],"sourcesContent":["import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { UserContextDto } from '../dto/user-context.dto';\nimport { ConfigService } from '@nestjs/config';\nimport { ConfigurationType } from 'src/modules/config/config.module';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(configService: ConfigService<ConfigurationType>) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('jwtSecret') as string,\n    });\n  }\n\n  /**\n   * функция принимает payload из jwt токена и возвращает то, что впоследствии будет записано в req.user\n   * @param payload\n   */\n  async validate(payload: UserContextDto): Promise<UserContextDto> {\n    return payload;\n  }\n}\n"],"names":["JwtStrategy","PassportStrategy","Strategy","validate","payload","constructor","configService","jwtFromRequest","ExtractJwt","fromAuthHeaderAsBearerToken","ignoreExpiration","secretOrKey","get"],"mappings":";;;;+BAQaA;;;eAAAA;;;6BARwB;0BACJ;wBACN;wBAEG;;;;;;;;;;AAIvB,IAAA,AAAMA,cAAN,MAAMA,oBAAoBC,IAAAA,0BAAgB,EAACC,qBAAQ,EAAE;IAS1D;;;GAGC,GACD,MAAMC,SAASC,OAAuB,EAA2B;QAC/D,OAAOA;IACT;IAdAC,YAAYC,aAA+C,CAAE;QAC3D,KAAK,CAAC;YACJC,gBAAgBC,uBAAU,CAACC,2BAA2B;YACtDC,kBAAkB;YAClBC,aAAaL,cAAcM,GAAG,CAAC;QACjC;IACF;AASF"}