{"version":3,"sources":["../../../../../src/modules/user-accounts/guards/bearer/jwt-optional-guard.ts"],"sourcesContent":["import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtOptionalAuthGuard extends AuthGuard('jwt') {\n  // canActivate(context: ExecutionContext) {\n  //   return super.canActivate(context);\n  // }\n\n  handleRequest(err: any, user: any) {\n    //NOTE:super.handleRequest(err, user, info, context, status);\n    // мы не будем вызывать здесь базовый метод суперкласса, в нём написано вот это:\n    // кидаем ошибку если нет юзера или если другая ошибка (например JWT протух)...\n    // handleRequest(err, user, info, context, status) {\n    //   if (err || !user) {\n    //     throw err || new common_1.UnauthorizedException();\n    //   }\n    //   return user;\n    // }\n    // а мы вернём просто null и не будем процессить ошибку и null\n    if (err || !user) {\n      return null;\n    } else {\n      return user;\n    }\n  }\n}\n"],"names":["JwtOptionalAuthGuard","AuthGuard","handleRequest","err","user"],"mappings":";;;;+BAIaA;;;eAAAA;;;wBAJgC;0BACnB;;;;;;;AAGnB,IAAA,AAAMA,uBAAN,MAAMA,6BAA6BC,IAAAA,mBAAS,EAAC;IAClD,2CAA2C;IAC3C,uCAAuC;IACvC,IAAI;IAEJC,cAAcC,GAAQ,EAAEC,IAAS,EAAE;QACjC,6DAA6D;QAC7D,gFAAgF;QAChF,+EAA+E;QAC/E,oDAAoD;QACpD,wBAAwB;QACxB,yDAAyD;QACzD,MAAM;QACN,iBAAiB;QACjB,IAAI;QACJ,8DAA8D;QAC9D,IAAID,OAAO,CAACC,MAAM;YAChB,OAAO;QACT,OAAO;YACL,OAAOA;QACT;IACF;AACF"}