{"version":3,"sources":["../../../../../src/modules/user-accounts/guards/bearer/jwt-optional-guard.ts"],"sourcesContent":["import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtOptionalAuthGuard extends AuthGuard('jwt') {\n  canActivate(context: ExecutionContext) {\n    return super.canActivate(context);\n  }\n\n  handleRequest(\n    err: any,\n    user: any,\n    info: any,\n    context: ExecutionContext,\n    status?: any,\n  ) {\n    //NOTE:super.handleRequest(err, user, info, context, status);\n    // мы не будем вызывать здесь базовый метод суперкласса, в нём написано вот это:\n    // кидаем ошибку если нет юзера или если другая ошибка (например JWT протух)...\n    // handleRequest(err, user, info, context, status) {\n    //   if (err || !user) {\n    //     throw err || new common_1.UnauthorizedException();\n    //   }\n    //   return user;\n    // }\n    // а мы вернём просто null и не будем процессить ошибку и null\n    if (err || !user) {\n      return null;\n    } else {\n      return user;\n    }\n  }\n}\n"],"names":["JwtOptionalAuthGuard","AuthGuard","canActivate","context","handleRequest","err","user","info","status"],"mappings":";;;;+BAIaA;;;eAAAA;;;wBAJgC;0BACnB;;;;;;;AAGnB,IAAA,AAAMA,uBAAN,MAAMA,6BAA6BC,IAAAA,mBAAS,EAAC;IAClDC,YAAYC,OAAyB,EAAE;QACrC,OAAO,KAAK,CAACD,YAAYC;IAC3B;IAEAC,cACEC,GAAQ,EACRC,IAAS,EACTC,IAAS,EACTJ,OAAyB,EACzBK,MAAY,EACZ;QACA,6DAA6D;QAC7D,gFAAgF;QAChF,+EAA+E;QAC/E,oDAAoD;QACpD,wBAAwB;QACxB,yDAAyD;QACzD,MAAM;QACN,iBAAiB;QACjB,IAAI;QACJ,8DAA8D;QAC9D,IAAIH,OAAO,CAACC,MAAM;YAChB,OAAO;QACT,OAAO;YACL,OAAOA;QACT;IACF;AACF"}